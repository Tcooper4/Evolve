{
  "agents": {
    "commentaryagent": {
      "name": "commentaryagent",
      "class_name": "CommentaryAgent",
      "module_path": "trading.agents.commentary_agent.CommentaryAgent",
      "description": "Commentary Agent that provides LLM-based explanations and insights.\n\nThis agent wraps the Commentary Engine and provides a standardized interface\nfor generating commentary across the trading system.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the agent's main logic.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "analyze_performance",
          "description": "Analyze trading performance.\n\nArgs:\n    symbol: Trading symbol\n    performance_data: Performance metrics\n    \nReturns:\n    AgentResult with performance analysis",
          "required_params": [
            "symbol",
            "performance_data"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "assess_risk",
          "description": "Assess trading risks.\n\nArgs:\n    symbol: Trading symbol\n    trade_data: Trade details (optional)\n    portfolio_data: Portfolio data (optional)\n    \nReturns:\n    AgentResult with risk assessment",
          "required_params": [
            "symbol"
          ],
          "optional_params": [
            "trade_data",
            "portfolio_data"
          ],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "explain_trade",
          "description": "Explain a trading decision.\n\nArgs:\n    symbol: Trading symbol\n    trade_data: Trade details\n    market_data: Market data\n    \nReturns:\n    AgentResult with trade explanation",
          "required_params": [
            "symbol",
            "trade_data"
          ],
          "optional_params": [
            "market_data"
          ],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "generate_commentary",
          "description": "Generate commentary based on the request.\n\nArgs:\n    request: Commentary request\n    \nReturns:\n    AgentResult with commentary data",
          "required_params": [
            "request"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "get_commentary_statistics",
          "description": "Get commentary generation statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "\nCommentary Agent that provides LLM-based explanations and insights.\n\nThis agent wraps the Commentary Engine and provides a standardized interface\nfor generating commentary across the trading system.\n",
        "trading.agents.commentary_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.173045",
      "updated_at": "2025-07-09T20:22:09.173068"
    },
    "dataqualityagent": {
      "name": "dataqualityagent",
      "class_name": "DataQualityAgent",
      "module_path": "trading.agents.data_quality_agent.DataQualityAgent",
      "description": "Agent responsible for:\n- Detecting data quality issues and anomalies\n- Monitoring data consistency and timeliness\n- Automatically routing to backup data providers\n- Providing data quality reports and recommendations",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the data quality assessment logic.\nArgs:\n    **kwargs: data, symbol, data_source, action, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "assess_data_quality",
          "description": "Assess the quality of market data.\n\nArgs:\n    data: Market data DataFrame\n    symbol: Asset symbol\n    data_source: Source of the data\n    \nReturns:\n    DataQualityReport with quality assessment",
          "required_params": [
            "data",
            "symbol"
          ],
          "optional_params": [
            "data_source"
          ],
          "return_type": "<class 'trading.agents.data_quality_agent.DataQualityReport'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_quality_summary",
          "description": "Get quality summary for a symbol.",
          "required_params": [
            "symbol"
          ],
          "optional_params": [],
          "return_type": "typing.Optional[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "route_to_backup_provider",
          "description": "Route data request to backup provider when primary fails.",
          "required_params": [
            "symbol",
            "data_issues"
          ],
          "optional_params": [],
          "return_type": "typing.Optional[pandas.core.frame.DataFrame]",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_quality_history",
          "description": "Save quality history to file.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "\nAgent responsible for:\n- Detecting data quality issues and anomalies\n- Monitoring data consistency and timeliness\n- Automatically routing to backup data providers\n- Providing data quality reports and recommendations\n",
        "trading.agents.data_quality_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.174183",
      "updated_at": "2025-07-09T20:22:09.174207"
    },
    "executionagent": {
      "name": "executionagent",
      "class_name": "ExecutionAgent",
      "module_path": "trading.agents.execution_agent.ExecutionAgent",
      "description": "Agent responsible for trade execution and position tracking.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the agent's main logic.\n\nArgs:\n    **kwargs: May include:\n        - signals: List of TradeSignal objects\n        - market_data: Current market data\n        - portfolio_update: Whether to update portfolio\n        - risk_check: Whether to perform risk checks\n        \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "clear_trade_log",
          "description": "Clear the trade log file.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of entries to return\n    \nReturns:\n    List of execution history entries",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "get_exit_events",
          "description": "Get exit events.\n\nArgs:\n    start_date: Start date filter\n    end_date: End date filter\n    \nReturns:\n    List of exit events",
          "required_params": [],
          "optional_params": [
            "start_date",
            "end_date"
          ],
          "return_type": "typing.List[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_portfolio_status",
          "description": "Get current portfolio status.\n\nReturns:\n    Portfolio status dictionary",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_risk_summary",
          "description": "Get risk management summary.\n\nReturns:\n    Risk management summary",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "get_trade_log",
          "description": "Get trade log entries.\n\nArgs:\n    start_date: Start date filter\n    end_date: End date filter\n    \nReturns:\n    List of trade log entries",
          "required_params": [],
          "optional_params": [
            "start_date",
            "end_date"
          ],
          "return_type": "typing.List[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Agent responsible for trade execution and position tracking.",
        "trading.agents.execution_agent",
        "1.0.0"
      ],
      "category": "execution",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.176284",
      "updated_at": "2025-07-09T20:22:09.176351"
    },
    "executionriskagent": {
      "name": "executionriskagent",
      "class_name": "ExecutionRiskAgent",
      "module_path": "trading.agents.execution_risk_agent.ExecutionRiskAgent",
      "description": "Execution risk control agent for trade approval and risk management.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the risk agent logic.\nArgs:\n    **kwargs: action, trade_id, symbol, size, side, price, portfolio_context, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "approve_trade",
          "description": "Approve or reject a trade based on risk checks.\n\nArgs:\n    trade_id: Unique trade identifier\n    symbol: Trading symbol\n    size: Trade size\n    side: Trade side (buy/sell)\n    price: Trade price\n    portfolio_context: Portfolio context information\n    \nReturns:\n    Trade approval result",
          "required_params": [
            "trade_id",
            "symbol",
            "size",
            "side",
            "price"
          ],
          "optional_params": [
            "portfolio_context"
          ],
          "return_type": "<class 'trading.agents.execution_risk_agent.TradeApproval'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "export_risk_report",
          "description": "Export risk report.\n\nArgs:\n    filepath: Output file path\n    \nReturns:\n    True if export successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_risk_summary",
          "description": "Get risk summary.\n\nReturns:\n    Risk summary dictionary",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "trigger_cooling_period",
          "description": "Trigger cooling period for a symbol.\n\nArgs:\n    symbol: Trading symbol\n    reason: Reason for cooling period\n    hours: Cooling period duration (optional)",
          "required_params": [
            "symbol",
            "reason"
          ],
          "optional_params": [
            "hours"
          ],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Execution risk control agent for trade approval and risk management.",
        "trading.agents.execution_risk_agent",
        "1.0.0"
      ],
      "category": "execution",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.178289",
      "updated_at": "2025-07-09T20:22:09.178334"
    },
    "executionriskcontrolagent": {
      "name": "executionriskcontrolagent",
      "class_name": "ExecutionRiskControlAgent",
      "module_path": "trading.agents.execution_risk_control_agent.ExecutionRiskControlAgent",
      "description": "Advanced execution risk control agent with comprehensive risk management.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the risk control agent.\n\nArgs:\n    **kwargs: Parameters including trade_request, action, etc.\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "check_trade_risk",
          "description": "Comprehensive risk check for trade request.",
          "required_params": [
            "trade_request"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.execution_risk_control_agent.RiskCheck'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "execute_trade",
          "description": "Execute trade with risk controls.",
          "required_params": [
            "trade_request"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.execution_risk_control_agent.ExecutionResult'>",
          "version": "1.0.0"
        },
        {
          "name": "export_risk_data",
          "description": "Export risk control data to file.",
          "required_params": [],
          "optional_params": [
            "filepath"
          ],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_risk_summary",
          "description": "Get comprehensive risk summary.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Advanced execution risk control agent with comprehensive risk management.",
        "trading.agents.execution_risk_control_agent",
        "1.0.0"
      ],
      "category": "execution",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.180007",
      "updated_at": "2025-07-09T20:22:09.180045"
    },
    "marketregimeagent": {
      "name": "marketregimeagent",
      "class_name": "MarketRegimeAgent",
      "module_path": "trading.agents.market_regime_agent.MarketRegimeAgent",
      "description": "Advanced market regime detection and strategy routing agent.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the market regime analysis logic.\nArgs:\n    **kwargs: symbol, action, data, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "analyze_regime",
          "description": "Perform comprehensive regime analysis.",
          "required_params": [],
          "optional_params": [
            "symbol"
          ],
          "return_type": "<class 'trading.agents.market_regime_agent.RegimeAnalysis'>",
          "version": "1.0.0"
        },
        {
          "name": "calculate_regime_features",
          "description": "Calculate features for regime classification.",
          "required_params": [
            "data"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.market_regime_agent.RegimeMetrics'>",
          "version": "1.0.0"
        },
        {
          "name": "classify_regime",
          "description": "Classify market regime based on metrics.",
          "required_params": [
            "metrics"
          ],
          "optional_params": [],
          "return_type": "typing.Tuple[trading.agents.market_regime_agent.MarketRegime, float]",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_market_data",
          "description": "Get market data for regime analysis.",
          "required_params": [],
          "optional_params": [
            "symbol",
            "period"
          ],
          "return_type": "<class 'pandas.core.frame.DataFrame'>",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_recommended_strategies",
          "description": "Get recommended strategies for the current regime.",
          "required_params": [
            "regime",
            "confidence"
          ],
          "optional_params": [],
          "return_type": "typing.List[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "get_regime_confidence",
          "description": "Get confidence level for the current regime classification.\n\nReturns:\n    Confidence score between 0.0 and 1.0",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'float'>",
          "version": "1.0.0"
        },
        {
          "name": "get_regime_summary",
          "description": "Get summary of current regime analysis.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_regime_history",
          "description": "Load regime history from file.",
          "required_params": [],
          "optional_params": [
            "filepath"
          ],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_regime_history",
          "description": "Save regime history to file.",
          "required_params": [],
          "optional_params": [
            "filepath"
          ],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Advanced market regime detection and strategy routing agent.",
        "trading.agents.market_regime_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.181874",
      "updated_at": "2025-07-09T20:22:09.181919"
    },
    "metalearneragent": {
      "name": "metalearneragent",
      "class_name": "MetaLearnerAgent",
      "module_path": "trading.agents.meta_learner.MetaLearnerAgent",
      "description": "Meta-learning agent that improves decision-making over time.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the meta-learning logic.\nArgs:\n    **kwargs: context, action, outcome, performance, metadata, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_learning_summary",
          "description": "Get summary of learning progress.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_recommendation",
          "description": "Get recommendation based on learned patterns.\n\nArgs:\n    context: Current market context\n    \nReturns:\n    Dictionary with recommendation and confidence",
          "required_params": [
            "context"
          ],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "learn_from_experiences",
          "description": "Learn from stored experiences.\n\nReturns:\n    Dictionary with learning insights",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the meta-learning agent.\n\nArgs:\n    context: Current market context\n    \nReturns:\n    Dictionary with meta-learning results",
          "required_params": [],
          "optional_params": [
            "context"
          ],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "store_experience",
          "description": "Store a learning experience.\n\nArgs:\n    context: Market context and conditions\n    action: Action taken\n    outcome: Result of the action\n    performance: Performance metric\n    metadata: Additional metadata",
          "required_params": [
            "context",
            "action",
            "outcome",
            "performance"
          ],
          "optional_params": [
            "metadata"
          ],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Meta-learning agent that improves decision-making over time.",
        "trading.agents.meta_learner",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.183468",
      "updated_at": "2025-07-09T20:22:09.183509"
    },
    "metalearningfeedbackagent": {
      "name": "metalearningfeedbackagent",
      "class_name": "MetaLearningFeedbackAgent",
      "module_path": "trading.agents.meta_learning_feedback_agent.MetaLearningFeedbackAgent",
      "description": "Agent responsible for:\n- Monitoring model performance after each trade\n- Automatically retuning hyperparameters\n- Replacing underperforming models\n- Updating ensemble weights based on performance",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the meta-learning feedback agent logic.\nArgs:\n    **kwargs: action, feedback, model_name, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_ensemble_weights",
          "description": "Get current ensemble weights.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, float]",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_model_performance_summary",
          "description": "Get performance summary for a specific model.",
          "required_params": [
            "model_name"
          ],
          "optional_params": [],
          "return_type": "typing.Optional[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "process_model_feedback",
          "description": "Process feedback from a model prediction.",
          "required_params": [
            "feedback"
          ],
          "optional_params": [],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_feedback_history",
          "description": "Save feedback history to file.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "\nAgent responsible for:\n- Monitoring model performance after each trade\n- Automatically retuning hyperparameters\n- Replacing underperforming models\n- Updating ensemble weights based on performance\n",
        "trading.agents.meta_learning_feedback_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.184746",
      "updated_at": "2025-07-09T20:22:09.184768"
    },
    "metaresearchagent": {
      "name": "metaresearchagent",
      "class_name": "MetaResearchAgent",
      "module_path": "trading.agents.meta_research_agent.MetaResearchAgent",
      "description": "Meta-Research Agent with:\n- Automated research paper discovery\n- Model performance evaluation\n- Implementation feasibility assessment\n- Auto-addition to model registry",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the meta-research agent logic.\nArgs:\n    **kwargs: action, keywords, max_papers, threshold, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "auto_implement_top_models",
          "description": "Automatically implement top-performing models.\n\nArgs:\n    evaluations: List of model evaluations\n    threshold: Score threshold for implementation\n    \nReturns:\n    List of implemented model names",
          "required_params": [
            "evaluations"
          ],
          "optional_params": [
            "threshold"
          ],
          "return_type": "typing.List[str]",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "discover_research_papers",
          "description": "Discover new research papers from various sources.\n\nArgs:\n    keywords: Keywords to search for\n    max_papers: Maximum number of papers to discover\n    \nReturns:\n    List of discovered research papers",
          "required_params": [],
          "optional_params": [
            "keywords",
            "max_papers"
          ],
          "return_type": "typing.List[trading.agents.meta_research_agent.ResearchPaper]",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "evaluate_models",
          "description": "Evaluate models described in research papers.\n\nArgs:\n    papers: List of research papers to evaluate\n    \nReturns:\n    List of model evaluations",
          "required_params": [
            "papers"
          ],
          "optional_params": [],
          "return_type": "typing.List[trading.agents.meta_research_agent.ModelEvaluation]",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_research_summary",
          "description": "Get summary of research activities.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "\nMeta-Research Agent with:\n- Automated research paper discovery\n- Model performance evaluation\n- Implementation feasibility assessment\n- Auto-addition to model registry\n",
        "trading.agents.meta_research_agent",
        "1.0.0"
      ],
      "category": "analysis",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.186218",
      "updated_at": "2025-07-09T20:22:09.186264"
    },
    "metastrategyagent": {
      "name": "metastrategyagent",
      "class_name": "MetaStrategyAgent",
      "module_path": "trading.agents.meta_strategy_agent.MetaStrategyAgent",
      "description": "Agent responsible for managing and coordinating multiple trading strategies.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute meta-strategy operations.",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Agent responsible for managing and coordinating multiple trading strategies.",
        "trading.agents.meta_strategy_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.188187",
      "updated_at": "2025-07-09T20:22:09.188226"
    },
    "metatuneragent": {
      "name": "metatuneragent",
      "class_name": "MetaTunerAgent",
      "module_path": "trading.agents.meta_tuner_agent.MetaTunerAgent",
      "description": "Agent for autonomous hyperparameter tuning using multiple optimization strategies.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the hyperparameter tuning logic.\nArgs:\n    **kwargs: model_type, objective_function, n_trials, method, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "add_parameter_space",
          "description": "Add or update parameter space for a model type.",
          "required_params": [
            "model_type",
            "param_space"
          ],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "clear_history",
          "description": "Clear tuning history for all models or a specific model type.",
          "required_params": [],
          "optional_params": [
            "model_type"
          ],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_best_hyperparameters",
          "description": "Get the best hyperparameters for a model type.",
          "required_params": [
            "model_type"
          ],
          "optional_params": [],
          "return_type": "typing.Optional[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "get_tuning_history",
          "description": "Get tuning history for all models or a specific model type.",
          "required_params": [],
          "optional_params": [
            "model_type"
          ],
          "return_type": "typing.Dict[str, typing.List[trading.agents.meta_tuner_agent.TuningResult]]",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "tune_hyperparameters",
          "description": "Tune hyperparameters for a given model type.\n\nArgs:\n    model_type: Type of model to tune\n    objective_function: Function that takes hyperparameters and returns performance score\n    n_trials: Number of trials (overrides config)\n    method: Optimization method ('auto', 'bayesian', 'grid', 'random')\n    \nReturns:\n    Tuning result with best hyperparameters",
          "required_params": [
            "model_type",
            "objective_function"
          ],
          "optional_params": [
            "n_trials",
            "method"
          ],
          "return_type": "<class 'trading.agents.meta_tuner_agent.TuningResult'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Agent for autonomous hyperparameter tuning using multiple optimization strategies.",
        "trading.agents.meta_tuner_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.189509",
      "updated_at": "2025-07-09T20:22:09.189631"
    },
    "modelbuilderagent": {
      "name": "modelbuilderagent",
      "class_name": "ModelBuilderAgent",
      "module_path": "trading.agents.model_builder_agent.ModelBuilderAgent",
      "description": "Agent responsible for building ML models from scratch.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the model building logic.\n\nArgs:\n    **kwargs: Must contain 'request' with ModelBuildRequest\n    \nReturns:\n    AgentResult: Result of the model building execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "build_model",
          "description": "Build a model based on the request.\n\nArgs:\n    request: Model build request\n    \nReturns:\n    Model build result",
          "required_params": [
            "request"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.model_builder_agent.ModelBuildResult'>",
          "version": "1.0.0"
        },
        {
          "name": "cleanup_old_models",
          "description": "Clean up old models.\n\nArgs:\n    max_age_days: Maximum age in days\n    \nReturns:\n    Number of models cleaned up",
          "required_params": [],
          "optional_params": [
            "max_age_days"
          ],
          "return_type": "<class 'int'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_agent_status",
          "description": "Get current agent status",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_model_status",
          "description": "Get status of a specific model.\n\nArgs:\n    model_id: Model ID\n    \nReturns:\n    Model build result if found",
          "required_params": [
            "model_id"
          ],
          "optional_params": [],
          "return_type": "typing.Optional[trading.agents.model_builder_agent.ModelBuildResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "list_models",
          "description": "List all built models.\n\nReturns:\n    List of model information",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.List[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Agent responsible for building ML models from scratch.",
        "trading.agents.model_builder_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.190805",
      "updated_at": "2025-07-09T20:22:09.190827"
    },
    "modelevaluatoragent": {
      "name": "modelevaluatoragent",
      "class_name": "ModelEvaluatorAgent",
      "module_path": "trading.agents.model_evaluator_agent.ModelEvaluatorAgent",
      "description": "Model Evaluator Agent that:\n- Evaluates model performance using multiple metrics\n- Provides comprehensive analysis and recommendations\n- Tracks evaluation history and trends\n- Identifies model degradation and improvement opportunities\n- Generates performance reports and alerts",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the model evaluation logic.\nArgs:\n    **kwargs: action, model_id, performance_data, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "compare_models",
          "description": "Compare multiple models.",
          "required_params": [
            "model_ids"
          ],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "evaluate_model",
          "description": "Evaluate a model's performance.\n\nArgs:\n    model_id: ID of the model to evaluate\n    performance_data: Performance data including predictions and actual values\n    \nReturns:\n    Evaluation result",
          "required_params": [
            "model_id",
            "performance_data"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.model_evaluator_agent.EvaluationResult'>",
          "version": "1.0.0"
        },
        {
          "name": "generate_evaluation_report",
          "description": "Generate comprehensive evaluation report.",
          "required_params": [],
          "optional_params": [
            "model_id"
          ],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_agent_status",
          "description": "Get current agent status.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_evaluation_history",
          "description": "Get evaluation history for a model or all models.",
          "required_params": [],
          "optional_params": [
            "model_id"
          ],
          "return_type": "typing.List[trading.agents.model_evaluator_agent.EvaluationResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_model_status",
          "description": "Get current status of a model.",
          "required_params": [
            "model_id"
          ],
          "optional_params": [],
          "return_type": "typing.Optional[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "\nModel Evaluator Agent that:\n- Evaluates model performance using multiple metrics\n- Provides comprehensive analysis and recommendations\n- Tracks evaluation history and trends\n- Identifies model degradation and improvement opportunities\n- Generates performance reports and alerts\n",
        "trading.agents.model_evaluator_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.191539",
      "updated_at": "2025-07-09T20:22:09.191581"
    },
    "modelimproveragent": {
      "name": "modelimproveragent",
      "class_name": "ModelImproverAgent",
      "module_path": "trading.agents.model_improver_agent.ModelImproverAgent",
      "description": "Agent responsible for reviewing backtest performance and automatically updating model configs.\n\nThis agent performs dynamic hyperparameter tuning based on recent performance metrics\nand market conditions to continuously improve model performance.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the model improvement logic.\n\nArgs:\n    **kwargs: action, model_name, performance_data, etc.\n    \nReturns:\n    AgentResult: Result of the improvement process",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_improvement_summary",
          "description": "Get summary of recent improvements.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get agent status information.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_performance_thresholds",
          "description": "Update performance thresholds.",
          "required_params": [
            "new_thresholds"
          ],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "\nAgent responsible for reviewing backtest performance and automatically updating model configs.\n\nThis agent performs dynamic hyperparameter tuning based on recent performance metrics\nand market conditions to continuously improve model performance.\n",
        "trading.agents.model_improver_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.192907",
      "updated_at": "2025-07-09T20:22:09.192943"
    },
    "modeloptimizeragent": {
      "name": "modeloptimizeragent",
      "class_name": "ModelOptimizerAgent",
      "module_path": "trading.agents.model_optimizer_agent.ModelOptimizerAgent",
      "description": "Model Optimizer Agent that:\n- Optimizes model hyperparameters using various algorithms\n- Performs feature selection and engineering optimization\n- Optimizes ensemble weights and configurations\n- Tracks optimization history and improvements\n- Provides optimization recommendations and insights",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the model optimization logic.\nArgs:\n    **kwargs: action, model_id, optimization_config, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "cancel_optimization",
          "description": "Cancel an ongoing optimization.",
          "required_params": [
            "optimization_id"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_agent_status",
          "description": "Get current agent status.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_optimization_history",
          "description": "Get optimization history for a model or all models.",
          "required_params": [],
          "optional_params": [
            "model_id"
          ],
          "return_type": "typing.List[trading.agents.model_optimizer_agent.OptimizationResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_optimization_recommendations",
          "description": "Get optimization recommendations for a model.",
          "required_params": [
            "model_id"
          ],
          "optional_params": [],
          "return_type": "typing.List[str]",
          "version": "1.0.0"
        },
        {
          "name": "get_optimization_status",
          "description": "Get status of an optimization.",
          "required_params": [
            "optimization_id"
          ],
          "optional_params": [],
          "return_type": "typing.Optional[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "optimize_model",
          "description": "Optimize a model based on the configuration.\n\nArgs:\n    model_id: ID of the model to optimize\n    optimization_config: Optimization configuration\n    \nReturns:\n    Optimization result",
          "required_params": [
            "model_id",
            "optimization_config"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.model_optimizer_agent.OptimizationResult'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "\nModel Optimizer Agent that:\n- Optimizes model hyperparameters using various algorithms\n- Performs feature selection and engineering optimization\n- Optimizes ensemble weights and configurations\n- Tracks optimization history and improvements\n- Provides optimization recommendations and insights\n",
        "trading.agents.model_optimizer_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.193957",
      "updated_at": "2025-07-09T20:22:09.193976"
    },
    "modelselectoragent": {
      "name": "modelselectoragent",
      "class_name": "ModelSelectorAgent",
      "module_path": "trading.agents.model_selector_agent.ModelSelectorAgent",
      "description": "Agent for dynamic model selection based on market conditions and requirements.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the model selector agent.\n\nArgs:\n    **kwargs: Parameters including action, horizon, market_regime, etc.\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "detect_market_regime",
          "description": "Detect current market regime from price data.",
          "required_params": [
            "price_data"
          ],
          "optional_params": [],
          "return_type": "<enum 'MarketRegime'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_model_recommendations",
          "description": "Get top-k model recommendations with explanations.",
          "required_params": [
            "horizon",
            "market_regime"
          ],
          "optional_params": [
            "top_k"
          ],
          "return_type": "typing.List[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "register_model",
          "description": "Register a new model in the registry.",
          "required_params": [
            "model_id",
            "config"
          ],
          "optional_params": [],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "select_model",
          "description": "Select the best model for given requirements.\n\nArgs:\n    horizon: Forecasting horizon\n    market_regime: Current market regime\n    data_length: Available data points\n    required_features: Required features for the model\n    performance_weight: Weight for performance-based selection\n    capability_weight: Weight for capability-based selection\n    \nReturns:\n    Tuple of (selected_model_id, confidence_score)",
          "required_params": [
            "horizon",
            "market_regime",
            "data_length"
          ],
          "optional_params": [
            "required_features",
            "performance_weight",
            "capability_weight"
          ],
          "return_type": "typing.Tuple[str, float]",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_model_performance",
          "description": "Update performance metrics for a model.",
          "required_params": [
            "model_id",
            "performance"
          ],
          "optional_params": [],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Agent for dynamic model selection based on market conditions and requirements.",
        "trading.agents.model_selector_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.194892",
      "updated_at": "2025-07-09T20:22:09.194945"
    },
    "multimodalagent": {
      "name": "multimodalagent",
      "class_name": "MultimodalAgent",
      "module_path": "trading.agents.multimodal_agent.MultimodalAgent",
      "description": "Agent for processing multimodal inputs (text, images, audio, data).",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the multimodal analysis logic.\nArgs:\n    **kwargs: equity, returns, action, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "analyze_drawdown",
          "description": "analyze_drawdown method",
          "required_params": [
            "equity"
          ],
          "optional_params": [],
          "return_type": "<class 'str'>",
          "version": "1.0.0"
        },
        {
          "name": "analyze_equity_curve",
          "description": "analyze_equity_curve method",
          "required_params": [
            "equity"
          ],
          "optional_params": [],
          "return_type": "<class 'str'>",
          "version": "1.0.0"
        },
        {
          "name": "analyze_performance",
          "description": "analyze_performance method",
          "required_params": [
            "returns"
          ],
          "optional_params": [],
          "return_type": "<class 'str'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "plot_drawdown",
          "description": "plot_drawdown method",
          "required_params": [
            "equity"
          ],
          "optional_params": [
            "title"
          ],
          "return_type": "<class 'bytes'>",
          "version": "1.0.0"
        },
        {
          "name": "plot_equity_curve",
          "description": "plot_equity_curve method",
          "required_params": [
            "equity"
          ],
          "optional_params": [
            "title"
          ],
          "return_type": "<class 'bytes'>",
          "version": "1.0.0"
        },
        {
          "name": "plot_performance",
          "description": "plot_performance method",
          "required_params": [
            "returns"
          ],
          "optional_params": [
            "title"
          ],
          "return_type": "<class 'bytes'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "vision_insight",
          "description": "Pass image to a vision model and get a natural language insight.",
          "required_params": [
            "image_bytes"
          ],
          "optional_params": [
            "prompt"
          ],
          "return_type": "<class 'str'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Agent for processing multimodal inputs (text, images, audio, data).",
        "trading.agents.multimodal_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.196517",
      "updated_at": "2025-07-09T20:22:09.196556"
    },
    "optimizeragent": {
      "name": "optimizeragent",
      "class_name": "OptimizerAgent",
      "module_path": "trading.agents.optimizer_agent.OptimizerAgent",
      "description": "Agent for optimizing strategy combinations, thresholds, and indicators.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the optimization process.\n\nArgs:\n    **kwargs: May include:\n        - optimization_config: OptimizationConfig object\n        - symbols: List of symbols to optimize\n        - time_periods: List of time periods\n        - optimization_type: Type of optimization\n        \nReturns:\n    AgentResult: Result of the optimization",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_best_results",
          "description": "Get best optimization results by symbol.\n\nReturns:\n    Dictionary of best results by symbol",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, trading.agents.optimizer_agent.OptimizationResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_optimization_history",
          "description": "Get optimization history.\n\nArgs:\n    limit: Maximum number of entries to return\n    \nReturns:\n    List of optimization history entries",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "get_optimization_stats",
          "description": "Get optimization statistics.\n\nReturns:\n    Optimization statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Agent for optimizing strategy combinations, thresholds, and indicators.",
        "trading.agents.optimizer_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.198028",
      "updated_at": "2025-07-09T20:22:09.198066"
    },
    "performancecriticagent": {
      "name": "performancecriticagent",
      "class_name": "PerformanceCriticAgent",
      "module_path": "trading.agents.performance_critic_agent.PerformanceCriticAgent",
      "description": "Agent responsible for evaluating model performance.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the model evaluation logic.\n\nArgs:\n    **kwargs: Must contain 'request' with ModelEvaluationRequest\n    \nReturns:\n    AgentResult: Result of the model evaluation execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "evaluate_model",
          "description": "Evaluate a model's performance.\n\nArgs:\n    request: Model evaluation request\n    \nReturns:\n    Model evaluation result",
          "required_params": [
            "request"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.performance_critic_agent.ModelEvaluationResult'>",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_evaluation_history",
          "description": "Get evaluation history for a model.\n\nArgs:\n    model_id: Model ID\n    \nReturns:\n    List of evaluation results",
          "required_params": [
            "model_id"
          ],
          "optional_params": [],
          "return_type": "typing.List[trading.agents.performance_critic_agent.ModelEvaluationResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_model_performance_summary",
          "description": "Get performance summary for a model.\n\nArgs:\n    model_id: Model ID\n    \nReturns:\n    Performance summary",
          "required_params": [
            "model_id"
          ],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Agent responsible for evaluating model performance.",
        "trading.agents.performance_critic_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.199610",
      "updated_at": "2025-07-09T20:22:09.199654"
    },
    "promptrouteragent": {
      "name": "promptrouteragent",
      "class_name": "PromptRouterAgent",
      "module_path": "trading.agents.prompt_router_agent.PromptRouterAgent",
      "description": "Intelligent prompt router that directs user requests to appropriate agents.\n\nThis agent analyzes incoming requests and determines the best agent(s) to handle\nthem based on capabilities, availability, performance history, and current load.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the prompt router agent's main logic.\n\nArgs:\n    **kwargs: Expected to contain 'user_request' and optionally 'context'\n    \nReturns:\n    AgentResult: Result of the routing decision",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_routing_statistics",
          "description": "Get routing statistics and performance metrics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "record_agent_performance",
          "description": "Record performance metrics for an agent.",
          "required_params": [
            "agent_name",
            "success",
            "response_time"
          ],
          "optional_params": [],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "route_request",
          "description": "Route a user request to the most appropriate agent(s).\n\nArgs:\n    user_request: The user's request text\n    context: Additional context information\n    \nReturns:\n    Routing decision with agent recommendations",
          "required_params": [
            "user_request"
          ],
          "optional_params": [
            "context"
          ],
          "return_type": "<class 'trading.agents.prompt_router_agent.RoutingDecision'>",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_agent_status",
          "description": "Update the status of an agent.",
          "required_params": [
            "agent_name",
            "is_available"
          ],
          "optional_params": [
            "current_load"
          ],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "\nIntelligent prompt router that directs user requests to appropriate agents.\n\nThis agent analyzes incoming requests and determines the best agent(s) to handle\nthem based on capabilities, availability, performance history, and current load.\n",
        "trading.agents.prompt_router_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.201081",
      "updated_at": "2025-07-09T20:22:09.201106"
    },
    "regimedetectionagent": {
      "name": "regimedetectionagent",
      "class_name": "RegimeDetectionAgent",
      "module_path": "trading.agents.regime_detection_agent.RegimeDetectionAgent",
      "description": "Market regime detection agent that identifies current market conditions\nand recommends appropriate trading strategies.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the regime detection agent's main logic.\n\nArgs:\n    **kwargs: Expected to contain 'data' and optionally 'symbol'\n    \nReturns:\n    AgentResult: Result of the regime detection",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "detect_regime",
          "description": "Detect the current market regime.\n\nArgs:\n    data: Market data with OHLCV columns\n    symbol: Symbol being analyzed\n    \nReturns:\n    Regime detection result",
          "required_params": [
            "data"
          ],
          "optional_params": [
            "symbol"
          ],
          "return_type": "<class 'trading.agents.regime_detection_agent.RegimeResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_regime_statistics",
          "description": "Get regime detection statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_performance_by_regime",
          "description": "Update performance metrics for a specific regime.",
          "required_params": [
            "regime",
            "performance_metrics"
          ],
          "optional_params": [],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "\nMarket regime detection agent that identifies current market conditions\nand recommends appropriate trading strategies.\n",
        "trading.agents.regime_detection_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.202471",
      "updated_at": "2025-07-09T20:22:09.202513"
    },
    "researchagent": {
      "name": "researchagent",
      "class_name": "ResearchAgent",
      "module_path": "trading.agents.research_agent.ResearchAgent",
      "description": "Base interface for all pluggable agents.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the research logic.\nArgs:\n    **kwargs: topic, max_results, action, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "code_suggestion_with_openai",
          "description": "Use OpenAI API to generate code suggestion from a description.",
          "required_params": [
            "description"
          ],
          "optional_params": [],
          "return_type": "<class 'str'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "log_finding",
          "description": "Log a research finding to research_log.json.",
          "required_params": [
            "finding"
          ],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "research",
          "description": "Conduct research on a topic: search, summarize, suggest code, and log findings.",
          "required_params": [
            "topic"
          ],
          "optional_params": [
            "max_results"
          ],
          "return_type": "typing.List[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "search_arxiv",
          "description": "Search arXiv for papers related to the query.",
          "required_params": [
            "query"
          ],
          "optional_params": [
            "max_results"
          ],
          "return_type": "typing.List[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "search_github",
          "description": "Search GitHub for repositories related to the query.",
          "required_params": [
            "query"
          ],
          "optional_params": [
            "max_results"
          ],
          "return_type": "typing.List[typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "summarize_with_openai",
          "description": "Use OpenAI API to summarize text.",
          "required_params": [
            "text"
          ],
          "optional_params": [
            "prompt"
          ],
          "return_type": "<class 'str'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "trading.agents.research_agent",
        "1.0.0"
      ],
      "category": "analysis",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.204450",
      "updated_at": "2025-07-09T20:22:09.204499"
    },
    "rollingretrainingagent": {
      "name": "rollingretrainingagent",
      "class_name": "RollingRetrainingAgent",
      "module_path": "trading.agents.rolling_retraining_agent.RollingRetrainingAgent",
      "description": "Advanced rolling retraining and walk-forward validation agent.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the rolling retraining logic.\nArgs:\n    **kwargs: data, model_factory, target_col, action, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "export_results",
          "description": "Export retraining results to file.",
          "required_params": [],
          "optional_params": [
            "filepath"
          ],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_feature_importance",
          "description": "Get feature importance from the current model.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, float]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_summary",
          "description": "Get summary of model performance over time.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_latest_model",
          "description": "Load the latest trained model.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Optional[typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "predict",
          "description": "Make predictions using the current model.",
          "required_params": [
            "features"
          ],
          "optional_params": [],
          "return_type": "<class 'numpy.ndarray'>",
          "version": "1.0.0"
        },
        {
          "name": "prepare_data",
          "description": "Prepare data for training.",
          "required_params": [
            "data"
          ],
          "optional_params": [
            "target_col"
          ],
          "return_type": "typing.Tuple[pandas.core.frame.DataFrame, pandas.core.series.Series]",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "retrain_model",
          "description": "Retrain the model with new data.",
          "required_params": [
            "data",
            "model_factory"
          ],
          "optional_params": [
            "target_col"
          ],
          "return_type": "<class 'pandas.core.series.Series'>",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "should_retrain",
          "description": "Determine if retraining is needed.",
          "required_params": [
            "current_performance"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "walk_forward_validation",
          "description": "Perform walk-forward validation.",
          "required_params": [
            "features",
            "target",
            "model_factory"
          ],
          "optional_params": [
            "n_splits"
          ],
          "return_type": "typing.List[trading.agents.rolling_retraining_agent.WalkForwardResult]",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Advanced rolling retraining and walk-forward validation agent.",
        "trading.agents.rolling_retraining_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.206824",
      "updated_at": "2025-07-09T20:22:09.206879"
    },
    "selfimprovingagent": {
      "name": "selfimprovingagent",
      "class_name": "SelfImprovingAgent",
      "module_path": "trading.agents.self_improving_agent.SelfImprovingAgent",
      "description": "Agent that can learn and improve its performance over time.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the self-improving agent logic.\nArgs:\n    **kwargs: task_data, action, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "process_task",
          "description": "Process a task and learn from the results.\n\nArgs:\n    task_data: Task data and parameters\n    \nReturns:\n    Dict[str, Any]: Task results and learning outcomes",
          "required_params": [
            "task_data"
          ],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Agent that can learn and improve its performance over time.",
        "trading.agents.self_improving_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.208569",
      "updated_at": "2025-07-09T20:22:09.208609"
    },
    "selftuningoptimizeragent": {
      "name": "selftuningoptimizeragent",
      "class_name": "SelfTuningOptimizerAgent",
      "module_path": "trading.agents.self_tuning_optimizer_agent.SelfTuningOptimizerAgent",
      "description": "Self-Tuning Optimizer Agent with:\n- Dynamic parameter adjustment based on market conditions\n- Performance-based optimization triggers\n- Multi-objective optimization\n- Constraint handling\n- Optimization history tracking",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the self-tuning optimization logic.\nArgs:\n    **kwargs: strategy_name, strategy_performance, market_data, action, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "check_optimization_triggers",
          "description": "Check if optimization should be triggered.\n\nArgs:\n    strategy_name: Name of the strategy\n    strategy_performance: Strategy performance series\n    market_data: Current market data\n    \nReturns:\n    List of triggered optimization types",
          "required_params": [
            "strategy_name",
            "strategy_performance",
            "market_data"
          ],
          "optional_params": [],
          "return_type": "typing.List[trading.agents.self_tuning_optimizer_agent.OptimizationTrigger]",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_optimization_summary",
          "description": "Get summary of optimization activities.",
          "required_params": [],
          "optional_params": [
            "strategy_name"
          ],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "optimize_strategy_parameters",
          "description": "Optimize strategy parameters based on triggers and market conditions.\n\nArgs:\n    strategy_name: Name of the strategy to optimize\n    current_parameters: Current strategy parameters\n    strategy_performance: Strategy performance history\n    market_data: Current market data\n    triggers: List of optimization triggers\n    \nReturns:\n    Optimization result with new parameters",
          "required_params": [
            "strategy_name",
            "current_parameters",
            "strategy_performance",
            "market_data",
            "triggers"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.self_tuning_optimizer_agent.OptimizationResult'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "set_parameter_constraints",
          "description": "Set parameter constraints for a strategy.",
          "required_params": [
            "strategy_name",
            "constraints"
          ],
          "optional_params": [],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "\nSelf-Tuning Optimizer Agent with:\n- Dynamic parameter adjustment based on market conditions\n- Performance-based optimization triggers\n- Multi-objective optimization\n- Constraint handling\n- Optimization history tracking\n",
        "trading.agents.self_tuning_optimizer_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.210343",
      "updated_at": "2025-07-09T20:22:09.210387"
    },
    "strategyimproveragent": {
      "name": "strategyimproveragent",
      "class_name": "StrategyImproverAgent",
      "module_path": "trading.agents.strategy_improver_agent.StrategyImproverAgent",
      "description": "Agent responsible for monitoring strategy performance and adjusting logic.\n\nThis agent performs dynamic parameter tuning for strategies like RSI thresholds,\nBollinger band widths, and MACD parameters based on recent market conditions\nand performance metrics.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the strategy improvement logic.\n\nArgs:\n    **kwargs: action, strategy_name, performance_data, etc.\n    \nReturns:\n    AgentResult: Result of the improvement process",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_improvement_summary",
          "description": "Get summary of recent improvements.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get agent status information.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_performance_thresholds",
          "description": "Update performance thresholds.",
          "required_params": [
            "new_thresholds"
          ],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "\nAgent responsible for monitoring strategy performance and adjusting logic.\n\nThis agent performs dynamic parameter tuning for strategies like RSI thresholds,\nBollinger band widths, and MACD parameters based on recent market conditions\nand performance metrics.\n",
        "trading.agents.strategy_improver_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.211901",
      "updated_at": "2025-07-09T20:22:09.211938"
    },
    "strategyselectoragent": {
      "name": "strategyselectoragent",
      "class_name": "StrategySelectorAgent",
      "module_path": "trading.agents.strategy_selector_agent.StrategySelectorAgent",
      "description": "Agent responsible for:\n- Detecting best-fit strategies based on market conditions\n- Adjusting strategy parameters using genetic optimization\n- Cross-validating strategies over multiple market regimes\n- Providing strategy recommendations with confidence scores",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the strategy selection logic.\nArgs:\n    **kwargs: market_data, asset_symbol, forecast_horizon, risk_tolerance, action, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "get_strategy_recommendations",
          "description": "Get strategy recommendations for given market conditions.\n\nArgs:\n    market_data: Real market data for evaluation\n    market_regime: Current market regime\n    risk_tolerance: Risk tolerance level\n    \nReturns:\n    List of strategy recommendations",
          "required_params": [
            "market_data",
            "market_regime"
          ],
          "optional_params": [
            "risk_tolerance"
          ],
          "return_type": "typing.List[trading.agents.strategy_selector_agent.StrategyRecommendation]",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "save_strategy_performance",
          "description": "Save strategy performance to file.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "select_strategy",
          "description": "Select the best strategy for the given market conditions.\n\nArgs:\n    market_data: Historical market data\n    asset_symbol: Asset symbol\n    forecast_horizon: Forecast horizon\n    risk_tolerance: Risk tolerance level (low/medium/high)\n    \nReturns:\n    StrategyRecommendation with optimal strategy and parameters",
          "required_params": [
            "market_data",
            "asset_symbol",
            "forecast_horizon"
          ],
          "optional_params": [
            "risk_tolerance"
          ],
          "return_type": "<class 'trading.agents.strategy_selector_agent.StrategyRecommendation'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_strategy_performance",
          "description": "Update strategy performance after execution.",
          "required_params": [
            "performance"
          ],
          "optional_params": [],
          "return_type": "<class 'inspect._empty'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "\nAgent responsible for:\n- Detecting best-fit strategies based on market conditions\n- Adjusting strategy parameters using genetic optimization\n- Cross-validating strategies over multiple market regimes\n- Providing strategy recommendations with confidence scores\n",
        "trading.agents.strategy_selector_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.213493",
      "updated_at": "2025-07-09T20:22:09.213529"
    },
    "taskdelegationagent": {
      "name": "taskdelegationagent",
      "class_name": "TaskDelegationAgent",
      "module_path": "trading.agents.task_delegation_agent.TaskDelegationAgent",
      "description": "Agent responsible for delegating tasks across multiple agents with specific roles.\n\nThis agent orchestrates complex workflows by breaking them down into tasks\nand assigning them to appropriate agents based on their roles and capabilities.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the task delegation logic.\n\nArgs:\n    **kwargs: action, task_description, workflow, etc.\n    \nReturns:\n    AgentResult: Result of the delegation process",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get agent status information.",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "\nAgent responsible for delegating tasks across multiple agents with specific roles.\n\nThis agent orchestrates complex workflows by breaking them down into tasks\nand assigning them to appropriate agents based on their roles and capabilities.\n",
        "trading.agents.task_delegation_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.214849",
      "updated_at": "2025-07-09T20:22:09.214882"
    },
    "updateragent": {
      "name": "updateragent",
      "class_name": "UpdaterAgent",
      "module_path": "trading.agents.updater_agent.UpdaterAgent",
      "description": "Agent responsible for updating models based on performance feedback.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the model updating logic.\n\nArgs:\n    **kwargs: Must contain either 'evaluation_result' or 'request'\n    \nReturns:\n    AgentResult: Result of the model updating execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "cleanup_old_models",
          "description": "Clean up old model files.\n\nArgs:\n    max_age_days: Maximum age in days\n    \nReturns:\n    Number of models cleaned up",
          "required_params": [],
          "optional_params": [
            "max_age_days"
          ],
          "return_type": "<class 'int'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "execute_update",
          "description": "Execute model update.\n\nArgs:\n    request: Update request\n    \nReturns:\n    Update result",
          "required_params": [
            "request"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.updater_agent.UpdateResult'>",
          "version": "1.0.0"
        },
        {
          "name": "get_active_models",
          "description": "Get all active models.\n\nReturns:\n    Dictionary of active models",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Dict[str, typing.Any]]",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "get_update_history",
          "description": "Get update history for a model.\n\nArgs:\n    model_id: Model ID\n    \nReturns:\n    List of update results",
          "required_params": [
            "model_id"
          ],
          "optional_params": [],
          "return_type": "typing.List[trading.agents.updater_agent.UpdateResult]",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "process_evaluation",
          "description": "Process evaluation result and determine if update is needed.\n\nArgs:\n    evaluation_result: Model evaluation result\n    \nReturns:\n    Update request if needed, None otherwise",
          "required_params": [
            "evaluation_result"
          ],
          "optional_params": [],
          "return_type": "typing.Optional[trading.agents.updater_agent.UpdateRequest]",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Agent responsible for updating models based on performance feedback.",
        "trading.agents.updater_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.216575",
      "updated_at": "2025-07-09T20:22:09.216633"
    },
    "walkforwardagent": {
      "name": "walkforwardagent",
      "class_name": "WalkForwardAgent",
      "module_path": "trading.agents.walk_forward_agent.WalkForwardAgent",
      "description": "Walk-forward validation and rolling retraining agent.",
      "capabilities": [
        {
          "name": "execute",
          "description": "Execute the walk-forward validation logic.\nArgs:\n    **kwargs: data, target_column, feature_columns, model_factory, action, etc.\nReturns:\n    AgentResult",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "disable",
          "description": "Disable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "enable",
          "description": "Enable the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "export_results",
          "description": "Export walk-forward results to file.\n\nArgs:\n    filepath: Output file path\n    \nReturns:\n    True if export successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "get_config",
          "description": "Get the agent configuration.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentConfig'>",
          "version": "1.0.0"
        },
        {
          "name": "get_execution_history",
          "description": "Get execution history.\n\nArgs:\n    limit: Maximum number of results to return\n    \nReturns:\n    List of execution results",
          "required_params": [],
          "optional_params": [
            "limit"
          ],
          "return_type": "typing.List[trading.agents.base_agent_interface.AgentResult]",
          "version": "1.0.0"
        },
        {
          "name": "get_metadata",
          "description": "Get agent metadata for registration.\n\nReturns:\n    Dict containing agent metadata",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_stats",
          "description": "Get performance statistics.\n\nReturns:\n    Dictionary with performance statistics",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_summary",
          "description": "Get summary of walk-forward performance.\n\nReturns:\n    Performance summary",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, typing.Any]",
          "version": "1.0.0"
        },
        {
          "name": "get_performance_trends",
          "description": "Get performance trends over time.\n\nReturns:\n    Dictionary of performance trends",
          "required_params": [],
          "optional_params": [],
          "return_type": "typing.Dict[str, pandas.core.series.Series]",
          "version": "1.0.0"
        },
        {
          "name": "get_status",
          "description": "Get the current status of the agent.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentStatus'>",
          "version": "1.0.0"
        },
        {
          "name": "handle_error",
          "description": "Handle errors during execution.\n\nArgs:\n    error: Exception that occurred\n    \nReturns:\n    AgentResult: Error result",
          "required_params": [
            "error"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "is_enabled",
          "description": "Check if the agent is enabled.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "is_running",
          "description": "Check if the agent is currently running.",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "load_state",
          "description": "Load agent state from file.\n\nArgs:\n    filepath: Path to load state from\n    \nReturns:\n    bool: True if load was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "reset",
          "description": "Reset agent state and statistics.",
          "required_params": [],
          "optional_params": [],
          "return_type": "None",
          "version": "1.0.0"
        },
        {
          "name": "run",
          "description": "Run the agent with error handling and status updates.\n\nArgs:\n    **kwargs: Agent-specific parameters\n    \nReturns:\n    AgentResult: Result of the execution",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'trading.agents.base_agent_interface.AgentResult'>",
          "version": "1.0.0"
        },
        {
          "name": "run_walk_forward_validation",
          "description": "Run walk-forward validation on the data.\n\nArgs:\n    data: Input data with datetime index\n    target_column: Target variable column\n    feature_columns: Feature columns\n    model_factory: Function to create model instances\n    start_date: Start date for validation\n    end_date: End date for validation\n    \nReturns:\n    List of walk-forward results",
          "required_params": [
            "data",
            "target_column",
            "feature_columns",
            "model_factory"
          ],
          "optional_params": [
            "start_date",
            "end_date"
          ],
          "return_type": "typing.List[trading.agents.walk_forward_agent.WalkForwardResult]",
          "version": "1.0.0"
        },
        {
          "name": "save_state",
          "description": "Save agent state to file.\n\nArgs:\n    filepath: Path to save state\n    \nReturns:\n    bool: True if save was successful",
          "required_params": [
            "filepath"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "should_retrain",
          "description": "Determine if model should be retrained based on performance degradation.\n\nArgs:\n    current_performance: Current model performance\n    threshold: Performance degradation threshold\n    \nReturns:\n    True if retraining is recommended",
          "required_params": [
            "current_performance"
          ],
          "optional_params": [
            "threshold"
          ],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "update_config",
          "description": "Update agent configuration.\n\nArgs:\n    new_config: New configuration values\n    \nReturns:\n    bool: True if update was successful",
          "required_params": [
            "new_config"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_config",
          "description": "Validate agent configuration.\n\nReturns:\n    bool: True if configuration is valid",
          "required_params": [],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        },
        {
          "name": "validate_input",
          "description": "Validate input parameters.\n\nArgs:\n    **kwargs: Parameters to validate\n    \nReturns:\n    bool: True if input is valid",
          "required_params": [
            "kwargs"
          ],
          "optional_params": [],
          "return_type": "<class 'bool'>",
          "version": "1.0.0"
        }
      ],
      "dependencies": [
        "Unknown",
        "Base agent interface",
        "Walk-forward validation and rolling retraining agent.",
        "trading.agents.walk_forward_agent",
        "1.0.0"
      ],
      "category": "trading",
      "status": "active",
      "version": "1.0.0",
      "author": "Unknown",
      "tags": [],
      "config_schema": null,
      "created_at": "2025-07-09T20:22:09.218162",
      "updated_at": "2025-07-09T20:22:09.218197"
    }
  },
  "capabilities": {
    "execute": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "analyze_performance": [
      "commentaryagent",
      "multimodalagent"
    ],
    "assess_risk": [
      "commentaryagent"
    ],
    "disable": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "enable": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "explain_trade": [
      "commentaryagent"
    ],
    "generate_commentary": [
      "commentaryagent"
    ],
    "get_commentary_statistics": [
      "commentaryagent"
    ],
    "get_config": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "get_execution_history": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "get_metadata": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "get_performance_stats": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "get_status": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "handle_error": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "is_enabled": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "is_running": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "load_state": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "reset": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "run": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "save_state": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "update_config": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "validate_config": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "validate_input": [
      "metalearningfeedbackagent",
      "researchagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "executionriskcontrolagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "metaresearchagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "executionagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "executionriskagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "assess_data_quality": [
      "dataqualityagent"
    ],
    "get_quality_summary": [
      "dataqualityagent"
    ],
    "route_to_backup_provider": [
      "dataqualityagent"
    ],
    "save_quality_history": [
      "dataqualityagent"
    ],
    "clear_trade_log": [
      "executionagent"
    ],
    "get_exit_events": [
      "executionagent"
    ],
    "get_portfolio_status": [
      "executionagent"
    ],
    "get_risk_summary": [
      "executionagent",
      "executionriskcontrolagent",
      "executionriskagent"
    ],
    "get_trade_log": [
      "executionagent"
    ],
    "approve_trade": [
      "executionriskagent"
    ],
    "export_risk_report": [
      "executionriskagent"
    ],
    "trigger_cooling_period": [
      "executionriskagent"
    ],
    "check_trade_risk": [
      "executionriskcontrolagent"
    ],
    "execute_trade": [
      "executionriskcontrolagent"
    ],
    "export_risk_data": [
      "executionriskcontrolagent"
    ],
    "analyze_regime": [
      "marketregimeagent"
    ],
    "calculate_regime_features": [
      "marketregimeagent"
    ],
    "classify_regime": [
      "marketregimeagent"
    ],
    "get_market_data": [
      "marketregimeagent"
    ],
    "get_recommended_strategies": [
      "marketregimeagent"
    ],
    "get_regime_confidence": [
      "marketregimeagent"
    ],
    "get_regime_summary": [
      "marketregimeagent"
    ],
    "load_regime_history": [
      "marketregimeagent"
    ],
    "save_regime_history": [
      "marketregimeagent"
    ],
    "get_learning_summary": [
      "metalearneragent"
    ],
    "get_recommendation": [
      "metalearneragent"
    ],
    "learn_from_experiences": [
      "metalearneragent"
    ],
    "store_experience": [
      "metalearneragent"
    ],
    "get_ensemble_weights": [
      "metalearningfeedbackagent"
    ],
    "get_model_performance_summary": [
      "metalearningfeedbackagent",
      "performancecriticagent"
    ],
    "process_model_feedback": [
      "metalearningfeedbackagent"
    ],
    "save_feedback_history": [
      "metalearningfeedbackagent"
    ],
    "auto_implement_top_models": [
      "metaresearchagent"
    ],
    "discover_research_papers": [
      "metaresearchagent"
    ],
    "evaluate_models": [
      "metaresearchagent"
    ],
    "get_research_summary": [
      "metaresearchagent"
    ],
    "add_parameter_space": [
      "metatuneragent"
    ],
    "clear_history": [
      "metatuneragent"
    ],
    "get_best_hyperparameters": [
      "metatuneragent"
    ],
    "get_tuning_history": [
      "metatuneragent"
    ],
    "tune_hyperparameters": [
      "metatuneragent"
    ],
    "build_model": [
      "modelbuilderagent"
    ],
    "cleanup_old_models": [
      "modelbuilderagent",
      "updateragent"
    ],
    "get_agent_status": [
      "modelevaluatoragent",
      "modeloptimizeragent",
      "modelbuilderagent"
    ],
    "get_model_status": [
      "modelevaluatoragent",
      "modelbuilderagent"
    ],
    "list_models": [
      "modelbuilderagent"
    ],
    "compare_models": [
      "modelevaluatoragent"
    ],
    "evaluate_model": [
      "modelevaluatoragent",
      "performancecriticagent"
    ],
    "generate_evaluation_report": [
      "modelevaluatoragent"
    ],
    "get_evaluation_history": [
      "modelevaluatoragent",
      "performancecriticagent"
    ],
    "get_improvement_summary": [
      "strategyimproveragent",
      "modelimproveragent"
    ],
    "update_performance_thresholds": [
      "strategyimproveragent",
      "modelimproveragent"
    ],
    "cancel_optimization": [
      "modeloptimizeragent"
    ],
    "get_optimization_history": [
      "modeloptimizeragent",
      "optimizeragent"
    ],
    "get_optimization_recommendations": [
      "modeloptimizeragent"
    ],
    "get_optimization_status": [
      "modeloptimizeragent"
    ],
    "optimize_model": [
      "modeloptimizeragent"
    ],
    "detect_market_regime": [
      "modelselectoragent"
    ],
    "get_model_recommendations": [
      "modelselectoragent"
    ],
    "register_model": [
      "modelselectoragent"
    ],
    "select_model": [
      "modelselectoragent"
    ],
    "update_model_performance": [
      "modelselectoragent"
    ],
    "analyze_drawdown": [
      "multimodalagent"
    ],
    "analyze_equity_curve": [
      "multimodalagent"
    ],
    "plot_drawdown": [
      "multimodalagent"
    ],
    "plot_equity_curve": [
      "multimodalagent"
    ],
    "plot_performance": [
      "multimodalagent"
    ],
    "vision_insight": [
      "multimodalagent"
    ],
    "get_best_results": [
      "optimizeragent"
    ],
    "get_optimization_stats": [
      "optimizeragent"
    ],
    "get_routing_statistics": [
      "promptrouteragent"
    ],
    "record_agent_performance": [
      "promptrouteragent"
    ],
    "route_request": [
      "promptrouteragent"
    ],
    "update_agent_status": [
      "promptrouteragent"
    ],
    "detect_regime": [
      "regimedetectionagent"
    ],
    "get_regime_statistics": [
      "regimedetectionagent"
    ],
    "update_performance_by_regime": [
      "regimedetectionagent"
    ],
    "code_suggestion_with_openai": [
      "researchagent"
    ],
    "log_finding": [
      "researchagent"
    ],
    "research": [
      "researchagent"
    ],
    "search_arxiv": [
      "researchagent"
    ],
    "search_github": [
      "researchagent"
    ],
    "summarize_with_openai": [
      "researchagent"
    ],
    "export_results": [
      "rollingretrainingagent",
      "walkforwardagent"
    ],
    "get_feature_importance": [
      "rollingretrainingagent"
    ],
    "get_performance_summary": [
      "rollingretrainingagent",
      "walkforwardagent"
    ],
    "load_latest_model": [
      "rollingretrainingagent"
    ],
    "predict": [
      "rollingretrainingagent"
    ],
    "prepare_data": [
      "rollingretrainingagent"
    ],
    "retrain_model": [
      "rollingretrainingagent"
    ],
    "should_retrain": [
      "rollingretrainingagent",
      "walkforwardagent"
    ],
    "walk_forward_validation": [
      "rollingretrainingagent"
    ],
    "process_task": [
      "selfimprovingagent"
    ],
    "check_optimization_triggers": [
      "selftuningoptimizeragent"
    ],
    "get_optimization_summary": [
      "selftuningoptimizeragent"
    ],
    "optimize_strategy_parameters": [
      "selftuningoptimizeragent"
    ],
    "set_parameter_constraints": [
      "selftuningoptimizeragent"
    ],
    "get_strategy_recommendations": [
      "strategyselectoragent"
    ],
    "save_strategy_performance": [
      "strategyselectoragent"
    ],
    "select_strategy": [
      "strategyselectoragent"
    ],
    "update_strategy_performance": [
      "strategyselectoragent"
    ],
    "execute_update": [
      "updateragent"
    ],
    "get_active_models": [
      "updateragent"
    ],
    "get_update_history": [
      "updateragent"
    ],
    "process_evaluation": [
      "updateragent"
    ],
    "get_performance_trends": [
      "walkforwardagent"
    ],
    "run_walk_forward_validation": [
      "walkforwardagent"
    ]
  },
  "categories": {
    "trading": [
      "metalearningfeedbackagent",
      "multimodalagent",
      "selfimprovingagent",
      "dataqualityagent",
      "metastrategyagent",
      "optimizeragent",
      "commentaryagent",
      "strategyselectoragent",
      "modelimproveragent",
      "modeloptimizeragent",
      "walkforwardagent",
      "taskdelegationagent",
      "metalearneragent",
      "updateragent",
      "performancecriticagent",
      "metatuneragent",
      "modelbuilderagent",
      "strategyimproveragent",
      "selftuningoptimizeragent",
      "promptrouteragent",
      "regimedetectionagent",
      "modelevaluatoragent",
      "modelselectoragent",
      "marketregimeagent",
      "rollingretrainingagent"
    ],
    "execution": [
      "executionagent",
      "executionriskcontrolagent",
      "executionriskagent"
    ],
    "analysis": [
      "metaresearchagent",
      "researchagent"
    ]
  },
  "stats": {
    "total_agents": 30,
    "active_agents": 30,
    "total_capabilities": 130,
    "last_discovery": "2025-07-16T20:26:30.933859"
  },
  "last_updated": "2025-07-16T20:26:30.937420"
}