# ============================================================================
# EVOLVE TRADING PLATFORM - PRODUCTION DOCKER COMPOSE
# ============================================================================
# Production deployment with all services

version: '3.8'

services:
  # Main application
  evolve-trading:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.production
    container_name: evolve-trading-app
    restart: unless-stopped
    ports:
      - "8501:8501"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - LOG_LEVEL=INFO
    env_file:
      - ../env.example
    volumes:
      - ../logs:/app/logs
      - ../models:/app/models
      - ../reports:/app/reports
      - ../backtest_results:/app/backtest_results
    depends_on:
      - redis
      - postgres
    networks:
      - evolve-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: evolve-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    networks:
      - evolve-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for data storage
  postgres:
    image: postgres:15-alpine
    container_name: evolve-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=evolve_trading
      - POSTGRES_USER=${POSTGRES_USER:-evolve_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-evolve_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - evolve-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-evolve_user} -d evolve_trading"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for document storage
  mongodb:
    image: mongo:6
    container_name: evolve-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME:-evolve_user}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD:-evolve_password}
      - MONGO_INITDB_DATABASE=evolve_trading
    volumes:
      - mongodb_data:/data/db
    networks:
      - evolve-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: evolve-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - evolve-trading
    networks:
      - evolve-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: evolve-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - evolve-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: evolve-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - evolve-network

  # Backup service
  backup:
    image: alpine:latest
    container_name: evolve-backup
    restart: "no"
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - mongodb_data:/data/db:ro
      - ../backups:/backups
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 0 * * *}
    command: |
      sh -c "
        apk add --no-cache postgresql-client mongodb-tools
        while true; do
          sleep 86400
          echo 'Starting backup...'
          pg_dump -h postgres -U $${POSTGRES_USER:-evolve_user} evolve_trading > /backups/postgres_$$(date +%Y%m%d_%H%M%S).sql
          mongodump --host mongodb --username $${MONGODB_USERNAME:-evolve_user} --password $${MONGODB_PASSWORD:-evolve_password} --db evolve_trading --out /backups/mongodb_$$(date +%Y%m%d_%H%M%S)
          echo 'Backup completed'
        done
      "
    depends_on:
      - postgres
      - mongodb
    networks:
      - evolve-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  evolve-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 