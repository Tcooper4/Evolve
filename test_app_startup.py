#!/usr/bin/env python3
"""
Test script to verify app startup without errors.
"""

import sys
import traceback
import os

# Load environment variables from .env file BEFORE any other imports
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ Environment variables loaded from .env file")
except ImportError:
    print("‚ö†Ô∏è python-dotenv not available, using system environment variables")
except Exception as e:
    print(f"‚ö†Ô∏è Error loading .env file: {e}")

# Debug: Check if API keys are loaded
alpha_vantage_key = os.getenv('ALPHA_VANTAGE_API_KEY')
finnhub_key = os.getenv('FINNHUB_API_KEY')
polygon_key = os.getenv('POLYGON_API_KEY')

if alpha_vantage_key:
    print(f"‚úÖ ALPHA_VANTAGE_API_KEY loaded: {alpha_vantage_key[:10]}...")
else:
    print("‚ùå ALPHA_VANTAGE_API_KEY not found")

if finnhub_key:
    print(f"‚úÖ FINNHUB_API_KEY loaded: {finnhub_key[:10]}...")
else:
    print("‚ùå FINNHUB_API_KEY not found")

if polygon_key:
    print(f"‚úÖ POLYGON_API_KEY loaded: {polygon_key[:10]}...")
else:
    print("‚ùå POLYGON_API_KEY not found")

print()

def test_imports():
    """Test all critical imports."""
    print("üîç Testing critical imports...")
    
    try:
        import streamlit
        print("‚úÖ Streamlit imported successfully")
    except ImportError as e:
        print(f"‚ùå Streamlit import failed: {e}")
        return False
    
    try:
        import pandas as pd
        print("‚úÖ Pandas imported successfully")
    except ImportError as e:
        print(f"‚ùå Pandas import failed: {e}")
        return False
    
    try:
        import numpy as np
        print("‚úÖ NumPy imported successfully")
    except ImportError as e:
        print(f"‚ùå NumPy import failed: {e}")
        return False
    
    try:
        import plotly
        print("‚úÖ Plotly imported successfully")
    except ImportError as e:
        print(f"‚ùå Plotly import failed: {e}")
        return False
    
    return True

def test_core_modules():
    """Test core trading modules."""
    print("\nüîç Testing core trading modules...")
    
    try:
        from trading.llm.agent import PromptAgent
        print("‚úÖ PromptAgent imported successfully")
    except ImportError as e:
        print(f"‚ùå PromptAgent import failed: {e}")
        return False
    
    # Test strategy engine import
    try:
        from trading.strategies.enhanced_strategy_engine import StrategyEngine
        print("‚úÖ StrategyEngine imported successfully")
    except ImportError as e:
        print(f"‚ùå StrategyEngine import failed: {e}")
        return False
    
    try:
        from models.forecast_router import ForecastRouter
        print("‚úÖ ForecastRouter imported successfully")
    except ImportError as e:
        print(f"‚ùå ForecastRouter import failed: {e}")
        return False
    
    return True

def test_agent_imports():
    """Test agent imports."""
    print("\nüîç Testing agent imports...")
    
    try:
        from trading.agents.model_improver_agent import ModelImprovementRequest
        print("‚úÖ ModelImprovementRequest imported successfully")
    except ImportError as e:
        print(f"‚ùå ModelImprovementRequest import failed: {e}")
        return False
    
    try:
        from trading.agents.execution_agent import ExecutionAgent, ExecutionRequest, ExecutionResult
        print("‚úÖ ExecutionAgent imports successful")
    except ImportError as e:
        print(f"‚ùå ExecutionAgent imports failed: {e}")
        return False
    
    try:
        from trading.agents.execution_risk_agent import ExecutionRiskAgent, RiskAssessmentRequest, RiskAssessmentResult
        print("‚úÖ ExecutionRiskAgent imports successful")
    except ImportError as e:
        print(f"‚ùå ExecutionRiskAgent imports failed: {e}")
        return False
    
    try:
        from trading.agents.execution_risk_control_agent import ExecutionRiskControlAgent, RiskControlRequest, RiskControlResult
        print("‚úÖ ExecutionRiskControlAgent imports successful")
    except ImportError as e:
        print(f"‚ùå ExecutionRiskControlAgent imports failed: {e}")
        return False
    
    return True

def test_evaluation_metrics():
    """Test evaluation metrics imports."""
    print("\nüîç Testing evaluation metrics...")
    
    try:
        from trading.evaluation.metrics import calculate_sharpe_ratio, calculate_max_drawdown, calculate_win_rate
        print("‚úÖ Evaluation metrics imported successfully")
    except ImportError as e:
        print(f"‚ùå Evaluation metrics import failed: {e}")
        return False
    
    return True

def main():
    """Run all tests."""
    print("üöÄ Starting Evolve AI Trading Platform Tests")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_core_modules,
        test_agent_imports,
        test_evaluation_metrics
    ]
    
    all_passed = True
    
    for test in tests:
        try:
            if not test():
                all_passed = False
        except Exception as e:
            print(f"‚ùå Test failed with exception: {e}")
            traceback.print_exc()
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ All tests passed! The app should start successfully.")
        print("üí° You can now run: streamlit run app.py")
    else:
        print("‚ùå Some tests failed. Please check the errors above.")
        sys.exit(1)

if __name__ == "__main__":
    main() 