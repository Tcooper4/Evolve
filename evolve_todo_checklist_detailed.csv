File,Line,Code
Evolve-main/unified_interface.py,1061,"print(f""Interface result: {result}"")"
Evolve-main/agents/model_generator.py,166,except:
Evolve-main/causal/causal_model.py,473,"print(""Market Analysis Results:"", results)"
Evolve-main/causal/causal_model.py,484,"print(""Strategy Insights:"", insights)"
Evolve-main/config/logging_config.py,91,"print(f""Error setting up logging: {e}"", file=sys.stderr)"
Evolve-main/core/error_handler.py,200,except:
Evolve-main/core/agents/goal_planner.py,459,"print(json.dumps(status.__dict__, indent=2, default=str))"
Evolve-main/core/agents/router.py,476,"print(f""Router result: {result}"")"
Evolve-main/examples/forecasting_example.py,22,"print(""üöÄ Starting AAPL Forecast Example"")"
Evolve-main/examples/forecasting_example.py,23,"print(""="" * 50)"
Evolve-main/examples/forecasting_example.py,27,"print(""üìä Initializing data provider and model..."")"
Evolve-main/examples/forecasting_example.py,32,"print(""üìà Fetching historical data..."")"
Evolve-main/examples/forecasting_example.py,36,"print(""‚ùå No data received from provider"")"
Evolve-main/examples/forecasting_example.py,39,"print(f""‚úÖ Retrieved {len(data)} data points"")"
Evolve-main/examples/forecasting_example.py,40,"print(f""üìÖ Date range: {data.index[0].date()} to {data.index[-1].date()}"")"
Evolve-main/examples/forecasting_example.py,43,"print(""üîÆ Generating forecast..."")"
Evolve-main/examples/forecasting_example.py,47,"print(""\nüìä FORECAST RESULTS"")"
Evolve-main/examples/forecasting_example.py,48,"print(""="" * 30)"
Evolve-main/examples/forecasting_example.py,49,"print(f""Current Price: ${data['close'].iloc[-1]:.2f}"")"
Evolve-main/examples/forecasting_example.py,50,"print(f""Predicted Price (30d): ${forecast['predicted_price']:.2f}"")"
Evolve-main/examples/forecasting_example.py,51,"print(f""Price Change: {((forecast['predicted_price'] / data['close'].iloc[-1]) - 1) * 100:.2f}%"")"
Evolve-main/examples/forecasting_example.py,54,"print(f""Confidence: {forecast['confidence']:.2%}"")"
Evolve-main/examples/forecasting_example.py,57,"print(f""Confidence Interval: ${forecast['lower']:.2f} - ${forecast['upper']:.2f}"")"
Evolve-main/examples/forecasting_example.py,59,"print(""\n‚úÖ Forecast completed successfully!"")"
Evolve-main/examples/forecasting_example.py,63,"print(f""‚ùå Error during forecasting: {e}"")"
Evolve-main/examples/forecasting_example.py,72,"print(f""\nüîÑ Forecasting multiple tickers: {', '.join(tickers)}"")"
Evolve-main/examples/forecasting_example.py,73,"print(""="" * 60)"
Evolve-main/examples/forecasting_example.py,76,"print(f""\nüìà Processing {ticker}..."")"
Evolve-main/examples/forecasting_example.py,90,"print(f""  Current: ${results[ticker]['current_price']:.2f}"")"
Evolve-main/examples/forecasting_example.py,91,"print(f""  Predicted: ${results[ticker]['predicted_price']:.2f}"")"
Evolve-main/examples/forecasting_example.py,92,"print(f""  Change: {results[ticker]['change_pct']:+.2f}%"")"
Evolve-main/examples/forecasting_example.py,95,"print(f""  ‚ùå Error with {ticker}: {e}"")"
Evolve-main/examples/forecasting_example.py,101,"print(""üéØ EVOLVE FORECASTING EXAMPLE"")"
Evolve-main/examples/forecasting_example.py,102,"print(""="" * 50)"
Evolve-main/examples/forecasting_example.py,110,"print(""\nüéâ Example completed!"")"
Evolve-main/legacy/fix_performance_logger.py,13,"print(f""File {file_path} not found"")"
Evolve-main/legacy/fix_performance_logger.py,31,"print(""Fixed PerformanceLogger __init__ method"")"
Evolve-main/legacy/fix_performance_logger.py,33,"print(""Could not find the problematic line to fix"")"
Evolve-main/legacy/fix_syntax_errors.py,13,"print(f""File {file_path} not found"")"
Evolve-main/legacy/fix_syntax_errors.py,27,"print(""Fixed run_forecasting_pipeline.py"")"
Evolve-main/legacy/fix_syntax_errors.py,29,"print(""Could not find the problematic line in run_forecasting_pipeline.py"")"
Evolve-main/legacy/fix_syntax_errors.py,36,"print(f""File {file_path} not found"")"
Evolve-main/legacy/fix_syntax_errors.py,50,"print(""Fixed agents/model_generator.py"")"
Evolve-main/legacy/fix_syntax_errors.py,52,"print(""Could not find the problematic line in agents/model_generator.py"")"
Evolve-main/legacy/fix_syntax_errors.py,59,"print(f""File {file_path} not found"")"
Evolve-main/legacy/fix_syntax_errors.py,73,"print(""Fixed memory/performance_weights.py"")"
Evolve-main/legacy/fix_syntax_errors.py,75,"print(""Could not find the problematic line in memory/performance_weights.py"")"
Evolve-main/legacy/fix_syntax_errors.py,82,"print(f""File {file_path} not found"")"
Evolve-main/legacy/fix_syntax_errors.py,96,"print(""Fixed scripts/manage_incident.py"")"
Evolve-main/legacy/fix_syntax_errors.py,98,"print(""Could not find the problematic line in scripts/manage_incident.py"")"
Evolve-main/legacy/fix_syntax_errors.py,105,"print(f""File {file_path} not found"")"
Evolve-main/legacy/fix_syntax_errors.py,119,"print(""Fixed scripts/manage_logs.py"")"
Evolve-main/legacy/fix_syntax_errors.py,121,"print(""Could not find the problematic line in scripts/manage_logs.py"")"
Evolve-main/legacy/fix_syntax_errors.py,125,"print(""Fixing critical syntax errors..."")"
Evolve-main/legacy/fix_syntax_errors.py,133,"print(""Syntax error fixes completed!"")"
Evolve-main/memory/performance_weights.py,161,"print(f""[DRIFT] {model} weight changed by {drift:.2f} on {ticker}"")"
Evolve-main/models/forecast_router.py,363,except:
Evolve-main/models/forecast_router.py,378,except:
Evolve-main/models/forecast_router.py,552,"print(f""Could not plot results: {e}"")"
Evolve-main/models/forecast_router.py,567,"print(f""Forecast result: {result}"")"
Evolve-main/models/tft_model.py,592,self.model.eval()
Evolve-main/models/tft_model.py,622,self.model.eval()
Evolve-main/pages/settings.py,144,# TODO: Implement configuration saving
Evolve-main/pages/settings.py,150,# TODO: Implement configuration reset
Evolve-main/rl/strategy_trainer_backup.py,407,"print(""Evaluation metrics:"", metrics)"
Evolve-main/scripts/cleanup_requirements.py,219,"print(""‚úÖ Requirements cleanup completed successfully"")"
Evolve-main/scripts/cleanup_requirements.py,221,"print(f""üìä Report: {report}"")"
Evolve-main/scripts/cleanup_requirements.py,223,"print(""‚ùå Requirements cleanup failed"")"
Evolve-main/scripts/cleanup_requirements.py,226,"print(f""‚ùå Error: {e}"")"
Evolve-main/scripts/generate_docs.py,44,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/generate_docs.py,54,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/launch_institutional_system.py,502,"print(json.dumps(status, indent=2))"
Evolve-main/scripts/launch_institutional_system.py,512,"print(f""‚ùå {service_name}: {service_status['status']}"")"
Evolve-main/scripts/launch_institutional_system.py,514,"print(f""‚úÖ {service_name}: {service_status['status']}"")"
Evolve-main/scripts/launch_institutional_system.py,517,"print(""üéâ All services are healthy"")"
Evolve-main/scripts/launch_institutional_system.py,520,"print(""‚ö†Ô∏è  Some services are not healthy"")"
Evolve-main/scripts/launch_unified_interface.py,71,"print(f""Error loading config: {e}"")"
Evolve-main/scripts/launch_unified_interface.py,86,"print(""üîÆ Evolve Unified Interface - Demo Mode"")"
Evolve-main/scripts/launch_unified_interface.py,87,"print(""="" * 60)"
Evolve-main/scripts/launch_unified_interface.py,101,"print(f""\nüìù Executing: {command}"")"
Evolve-main/scripts/launch_unified_interface.py,102,"print(""-"" * 40)"
Evolve-main/scripts/launch_unified_interface.py,107,"print(f""‚ùå Error: {result.get('error')}"")"
Evolve-main/scripts/launch_unified_interface.py,111,"print(""-"" * 40)"
Evolve-main/scripts/launch_unified_interface.py,113,"print(""\n‚úÖ Demo completed!"")"
Evolve-main/scripts/launch_unified_interface.py,117,"print(f""üîÆ Executing: {command}"")"
Evolve-main/scripts/launch_unified_interface.py,118,"print(""="" * 50)"
Evolve-main/scripts/launch_unified_interface.py,123,"print(f""‚ùå Error: {result.get('error')}"")"
Evolve-main/scripts/launch_unified_interface.py,134,"print(f""üìã {help_data['overview']['title']}"")"
Evolve-main/scripts/launch_unified_interface.py,135,"print(f""Version: {help_data['overview']['version']}"")"
Evolve-main/scripts/launch_unified_interface.py,136,"print(f""\n{help_data['overview']['description']}"")"
Evolve-main/scripts/launch_unified_interface.py,138,"print(""\nüöÄ Quick Start Examples:"")"
Evolve-main/scripts/launch_unified_interface.py,140,"print(f""  {example}"")"
Evolve-main/scripts/launch_unified_interface.py,143,"print(""ü§ñ QuantGPT Response:"")"
Evolve-main/scripts/launch_unified_interface.py,145,print(result['result']['gpt_commentary'])
Evolve-main/scripts/launch_unified_interface.py,147,"print(result.get('result', 'No response'))"
Evolve-main/scripts/launch_unified_interface.py,150,"print(f""‚úÖ {result_type.title()} completed"")"
Evolve-main/scripts/launch_unified_interface.py,151,"print(f""Symbol: {result.get('symbol', 'N/A')}"")"
Evolve-main/scripts/launch_unified_interface.py,153,"print(""Details:"", result['result'])"
Evolve-main/scripts/launch_unified_interface.py,157,"print(f""üìã {result_type.replace('_', ' ').title()}:"")"
Evolve-main/scripts/launch_unified_interface.py,159,"print(f""  - {item}"")"
Evolve-main/scripts/launch_unified_interface.py,162,"print(""‚úÖ Command completed successfully"")"
Evolve-main/scripts/launch_unified_interface.py,164,"print(""Result:"", result['result'])"
Evolve-main/scripts/launch_unified_interface.py,178,"print(""üîÆ Launching Streamlit interface..."")"
Evolve-main/scripts/launch_unified_interface.py,179,"print(""üì± Open your browser to: http://localhost:8501"")"
Evolve-main/scripts/launch_unified_interface.py,180,"print(""‚èπÔ∏è  Press Ctrl+C to stop"")"
Evolve-main/scripts/launch_unified_interface.py,185,"print(""‚ùå Streamlit not installed. Install with: pip install streamlit"")"
Evolve-main/scripts/launch_unified_interface.py,188,"print(""\nüëã Streamlit interface stopped"")"
Evolve-main/scripts/launch_unified_interface.py,190,"print(f""‚ùå Error launching Streamlit: {e}"")"
Evolve-main/scripts/manage.py,89,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage.py,103,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage.py,322,print(__doc__)
Evolve-main/scripts/manage_api.py,87,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_api.py,97,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_api.py,297,"print(""\nAPI Test Results:"")"
Evolve-main/scripts/manage_api.py,298,"print(""\nEndpoints:"")"
Evolve-main/scripts/manage_api.py,301,"print(f""{status} {result['endpoint']}"")"
Evolve-main/scripts/manage_api.py,303,"print(f""  Error: {result.get('error', 'Unknown error')}"")"
Evolve-main/scripts/manage_api.py,307,"print(""\nAPI Monitoring Metrics:"")"
Evolve-main/scripts/manage_api.py,319,"print(f""\n{endpoint}:"")"
Evolve-main/scripts/manage_api.py,324,"print(f""  Average Latency: {sum(latencies) / len(latencies):.3f}s"")"
Evolve-main/scripts/manage_api.py,325,"print(f""  Min Latency: {min(latencies):.3f}s"")"
Evolve-main/scripts/manage_api.py,326,"print(f""  Max Latency: {max(latencies):.3f}s"")"
Evolve-main/scripts/manage_api.py,331,"print(f""  Errors: {len(errors)}"")"
Evolve-main/scripts/manage_api.py,333,"print(f""    - {error['error']}"")"
Evolve-main/scripts/manage_backup.py,73,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_backup.py,83,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_backup.py,596,"print(""\nAvailable Backups:"")"
Evolve-main/scripts/manage_backup.py,599,"print(f""\nTimestamp: {backup['timestamp']}"")"
Evolve-main/scripts/manage_backup.py,600,"print(f""Type: {backup['type']}"")"
Evolve-main/scripts/manage_backup.py,601,"print(f""Target: {backup['target']}"")"
Evolve-main/scripts/manage_backup.py,602,"print(f""Size: {backup['metadata']['size'] / 1024 / 1024:.2f} MB"")"
Evolve-main/scripts/manage_backup.py,603,"print(""Components:"")"
Evolve-main/scripts/manage_backup.py,605,"print(f""  {component}: {len(paths)} files"")"
Evolve-main/scripts/manage_config.py,64,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_config.py,74,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_config.py,393,"print(""\nConfiguration Validation Results:"")"
Evolve-main/scripts/manage_config.py,394,"print(f""\nTimestamp: {results['timestamp']}"")"
Evolve-main/scripts/manage_config.py,395,"print(f""Config Path: {results['config_path']}"")"
Evolve-main/scripts/manage_config.py,396,"print(f""Valid: {'ÔøΩÔøΩÔøΩ' if results['valid'] else 'ÔøΩÔøΩÔøΩ'}"")"
Evolve-main/scripts/manage_config.py,399,"print(""\nIssues:"")"
Evolve-main/scripts/manage_config.py,401,"print(f""  - {issue}"")"
Evolve-main/scripts/manage_dashboard.py,79,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_dashboard.py,89,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_data.py,60,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_data.py,70,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_data.py,270,"print(f""{file_path} ({size:,} bytes, modified: {modified})"")"
Evolve-main/scripts/manage_data_quality.py,59,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_data_quality.py,69,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_data_quality.py,438,"print(""\nValidation Results:"")"
Evolve-main/scripts/manage_data_quality.py,439,"print(f""\nTimestamp: {results['timestamp']}"")"
Evolve-main/scripts/manage_data_quality.py,440,"print(f""Data Path: {results['data_path']}"")"
Evolve-main/scripts/manage_data_quality.py,442,"print(""\nSchema Validation:"")"
Evolve-main/scripts/manage_data_quality.py,444,"print(""  ÔøΩÔøΩÔøΩ Schema validation passed"")"
Evolve-main/scripts/manage_data_quality.py,446,"print(""  ÔøΩÔøΩÔøΩ Schema validation failed"")"
Evolve-main/scripts/manage_data_quality.py,448,"print(f""    - {result['message']}"")"
Evolve-main/scripts/manage_data_quality.py,450,"print(""\nQuality Validation:"")"
Evolve-main/scripts/manage_data_quality.py,452,"print(""  ÔøΩÔøΩÔøΩ Quality validation passed"")"
Evolve-main/scripts/manage_data_quality.py,454,"print(""  ÔøΩÔøΩÔøΩ Quality validation failed"")"
Evolve-main/scripts/manage_data_quality.py,456,"print(f""    - {result['message']}"")"
Evolve-main/scripts/manage_data_quality.py,460,"print(""\nData Analysis Results:"")"
Evolve-main/scripts/manage_data_quality.py,461,"print(f""\nTimestamp: {analysis['timestamp']}"")"
Evolve-main/scripts/manage_data_quality.py,462,"print(f""Data Path: {analysis['data_path']}"")"
Evolve-main/scripts/manage_data_quality.py,464,"print(""\nBasic Statistics:"")"
Evolve-main/scripts/manage_data_quality.py,465,"print(f""  Shape: {analysis['basic_stats']['shape']}"")"
Evolve-main/scripts/manage_data_quality.py,466,"print(f""  Columns: {', '.join(analysis['basic_stats']['columns'])}"")"
Evolve-main/scripts/manage_data_quality.py,468,"print(""\nQuality Metrics:"")"
Evolve-main/scripts/manage_data_quality.py,469,"print(""  Missing Values:"")"
Evolve-main/scripts/manage_data_quality.py,472,"print(f""    - {column}: {count}"")"
Evolve-main/scripts/manage_data_quality.py,474,"print(""\nCorrelations:"")"
Evolve-main/scripts/manage_data_quality.py,478,"print(f""  {col1} - {col2}: {value:.2f}"")"
Evolve-main/scripts/manage_db.py,69,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_db.py,79,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_db.py,165,"print(""\nDatabase Information:"")"
Evolve-main/scripts/manage_db.py,166,"print(f""Redis Version: {info['redis_version']}"")"
Evolve-main/scripts/manage_db.py,167,"print(f""Connected Clients: {info['connected_clients']}"")"
Evolve-main/scripts/manage_db.py,168,"print(f""Used Memory: {info['used_memory_human']}"")"
Evolve-main/scripts/manage_db.py,169,"print(f""Total Keys: {info['db0']['keys']}"")"
Evolve-main/scripts/manage_db.py,170,"print(f""Last Save Time: {datetime.fromtimestamp(info['last_save_time'])}"")"
Evolve-main/scripts/manage_db.py,229,"print(""Monitoring database (press Ctrl+C to stop)..."")"
Evolve-main/scripts/manage_db.py,232,"print(f""{datetime.now()}: {message['data']}"")"
Evolve-main/scripts/manage_debug.py,84,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_debug.py,98,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_debug.py,338,"print(""\nError Monitoring Results:"")"
Evolve-main/scripts/manage_debug.py,339,"print(f""\nTotal Errors: {len(errors)}"")"
Evolve-main/scripts/manage_debug.py,342,"print(""\nRecent Errors:"")"
Evolve-main/scripts/manage_debug.py,344,"print(f""\nTimestamp: {error['timestamp']}"")"
Evolve-main/scripts/manage_debug.py,345,"print(f""Message: {error['message']}"")"
Evolve-main/scripts/manage_debug.py,346,"print(f""File: {error['file']}"")"
Evolve-main/scripts/manage_debug.py,354,"print(""\nError Fix Suggestions:"")"
Evolve-main/scripts/manage_debug.py,357,"print(f""\nError Type: {suggestion['error_type']}"")"
Evolve-main/scripts/manage_debug.py,358,"print(f""Description: {suggestion['description']}"")"
Evolve-main/scripts/manage_debug.py,359,"print(f""Example: {suggestion['example']}"")"
Evolve-main/scripts/manage_debug.py,360,"print(f""Severity: {suggestion['severity']}"")"
Evolve-main/scripts/manage_debug.py,526,"print(""Error: --function is required for debug command"")"
Evolve-main/scripts/manage_debug.py,535,"print(f""Debug result: {result}"")"
Evolve-main/scripts/manage_debug.py,539,"print(""Error: --log-files is required for analyze command"")"
Evolve-main/scripts/manage_debug.py,543,"print(f""Analysis complete: {result['total_errors']} errors found"")"
Evolve-main/scripts/manage_debug.py,547,"print(f""Monitoring complete: {len(result)} errors detected"")"
Evolve-main/scripts/manage_debug.py,551,"print(""Error: --log-files is required for fix command"")"
Evolve-main/scripts/manage_debug.py,556,"print(f""Fix suggestions generated: {len(result)} suggestions"")"
Evolve-main/scripts/manage_debug.py,561,"print(f""Error: {e}"")"
Evolve-main/scripts/manage_deps.py,52,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_deps.py,62,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_deps.py,154,print(result.stdout)
Evolve-main/scripts/manage_deps.py,202,print(result.stdout)
Evolve-main/scripts/manage_docs.py,57,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_docs.py,67,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_docs.py,95,print(result.stderr)
Evolve-main/scripts/manage_docs.py,121,print(result.stderr)
Evolve-main/scripts/manage_docs.py,244,print(result.stderr)
Evolve-main/scripts/manage_env.py,68,"print(""Template created successfully"")"
Evolve-main/scripts/manage_env.py,72,"print(""Environment validation successful"")"
Evolve-main/scripts/manage_env.py,74,"print(""Environment validation failed"")"
Evolve-main/scripts/manage_env.py,79,"print(""Error: --key and --value are required for rotate-secret"")"
Evolve-main/scripts/manage_env.py,82,"print(f""Secret {args.key} rotated successfully"")"
Evolve-main/scripts/manage_env.py,88,"print(f""Error: Python version {python_version.major}.{python_version.minor} is not supported"")"
Evolve-main/scripts/manage_env.py,95,"print(f""Error: Required directory not found: {directory}"")"
Evolve-main/scripts/manage_env.py,98,"print(""Environment health check completed successfully"")"
Evolve-main/scripts/manage_env.py,101,"print(f""Error: {str(e)}"")"
Evolve-main/scripts/manage_health.py,79,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_health.py,89,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_incident.py,79,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_incident.py,89,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_logs.py,55,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_logs.py,65,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_logs.py,179,"print(""\nLog Analysis Results:"")"
Evolve-main/scripts/manage_logs.py,180,"print(f""Total Errors: {analysis_results['error_count']}"")"
Evolve-main/scripts/manage_logs.py,181,"print(f""Total Warnings: {analysis_results['warning_count']}"")"
Evolve-main/scripts/manage_logs.py,184,"print(""\nError Patterns:"")"
Evolve-main/scripts/manage_logs.py,186,"print(f""  {pattern}: {count}"")"
Evolve-main/scripts/manage_logs.py,189,"print(""\nWarning Patterns:"")"
Evolve-main/scripts/manage_logs.py,191,"print(f""  {pattern}: {count}"")"
Evolve-main/scripts/manage_ml.py,160,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_ml.py,174,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_ml.py,612,model.eval()
Evolve-main/scripts/manage_ml.py,665,"print(""\nModel Metrics:"")"
Evolve-main/scripts/manage_ml.py,667,"print(f""{metric}: {value:.4f}"")"
Evolve-main/scripts/manage_ml.py,806,print(__doc__)
Evolve-main/scripts/manage_model.py,70,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_model.py,80,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_model.py,138,"print(""\nModel Evaluation Metrics:"")"
Evolve-main/scripts/manage_model.py,140,"print(f""{metric}: {value:.4f}"")"
Evolve-main/scripts/manage_model.py,191,"print(""\nOptimization Results:"")"
Evolve-main/scripts/manage_model.py,192,"print(f""Best Parameters: {best_params}"")"
Evolve-main/scripts/manage_model.py,193,"print(""\nModel Metrics:"")"
Evolve-main/scripts/manage_model.py,196,"print(f""{metric}: {value:.4f}"")"
Evolve-main/scripts/manage_model.py,364,model.eval()
Evolve-main/scripts/manage_monitor.py,66,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_monitor.py,76,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_monitor.py,196,"print(""\nMetrics Analysis:"")"
Evolve-main/scripts/manage_monitor.py,197,"print(""\nSystem Metrics:"")"
Evolve-main/scripts/manage_monitor.py,199,"print(f""\n{metric.upper()}:"")"
Evolve-main/scripts/manage_monitor.py,200,"print(f""  Average: {values['avg']:.2f}%"")"
Evolve-main/scripts/manage_monitor.py,201,"print(f""  Maximum: {values['max']:.2f}%"")"
Evolve-main/scripts/manage_monitor.py,202,"print(f""  Minimum: {values['min']:.2f}%"")"
Evolve-main/scripts/manage_monitor.py,204,"print(""\nApplication Metrics:"")"
Evolve-main/scripts/manage_monitor.py,205,"print(f""\nTotal Requests: {stats['application']['requests']}"")"
Evolve-main/scripts/manage_monitor.py,206,"print(f""Total Errors: {stats['application']['errors']}"")"
Evolve-main/scripts/manage_monitor.py,207,"print(f""Error Rate: {(stats['application']['errors'] / max(stats['application']['requests'], 1)) * 100:.2f}%"")"
Evolve-main/scripts/manage_monitor.py,208,"print(f""\nLatency:"")"
Evolve-main/scripts/manage_monitor.py,209,"print(f""  Average: {stats['application']['latency']['avg']:.2f}s"")"
Evolve-main/scripts/manage_monitor.py,210,"print(f""  Maximum: {stats['application']['latency']['max']:.2f}s"")"
Evolve-main/scripts/manage_monitor.py,211,"print(f""  Minimum: {stats['application']['latency']['min']:.2f}s"")"
Evolve-main/scripts/manage_performance.py,115,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_performance.py,129,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_performance.py,582,print(__doc__)
Evolve-main/scripts/manage_pipeline.py,100,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_pipeline.py,114,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_pipeline.py,507,print(__doc__)
Evolve-main/scripts/manage_recovery.py,69,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_recovery.py,79,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_recovery.py,507,"print(""\nSystem Health Check Results:"")"
Evolve-main/scripts/manage_recovery.py,508,"print(f""\nTimestamp: {health_check['timestamp']}"")"
Evolve-main/scripts/manage_recovery.py,510,"print(""\nComponents:"")"
Evolve-main/scripts/manage_recovery.py,512,"print(f""\n{component.title()}:"")"
Evolve-main/scripts/manage_recovery.py,514,"print(f""  {key}: {value}"")"
Evolve-main/scripts/manage_recovery.py,516,"print(""\nSystem Metrics:"")"
Evolve-main/scripts/manage_recovery.py,518,"print(f""\n{metric.title()}:"")"
Evolve-main/scripts/manage_recovery.py,521,"print(f""  {key}: {val}"")"
Evolve-main/scripts/manage_recovery.py,523,"print(f""  {value}"")"
Evolve-main/scripts/manage_recovery.py,526,"print(""\nRecommendations:"")"
Evolve-main/scripts/manage_recovery.py,528,"print(f""\n{rec['component'].title()}:"")"
Evolve-main/scripts/manage_recovery.py,529,"print(f""  Issue: {rec['issue']}"")"
Evolve-main/scripts/manage_recovery.py,530,"print(f""  Recommendation: {rec['recommendation']}"")"
Evolve-main/scripts/manage_security.py,61,"print(f""Error: Configuration file not found: {config_path}"")"
Evolve-main/scripts/manage_security.py,71,"print(""Error: logging_config.yaml not found"")"
Evolve-main/scripts/manage_security.py,135,"print(""\nSecurity Check Results:"")"
Evolve-main/scripts/manage_security.py,138,"print(f""\n{status} {check.upper()}"")"
Evolve-main/scripts/manage_security.py,140,"print(""  Issues:"")"
Evolve-main/scripts/manage_security.py,142,"print(f""    - {issue}"")"
Evolve-main/scripts/manage_security.py,144,"print(""  Recommendations:"")"
Evolve-main/scripts/manage_security.py,146,"print(f""    - {rec}"")"
Evolve-main/scripts/monitor_app.py,306,# TODO: Implement actual email sending logic
Evolve-main/scripts/monitor_app.py,489,"print(json.dumps(status, indent=2))"
Evolve-main/scripts/monitor_app.py,494,"print(f""Application health: {health}"")"
Evolve-main/scripts/monitor_app.py,499,"print(f""Monitoring data exported to {args.output}"")"
Evolve-main/scripts/monitor_app.py,501,"print(""Failed to export monitoring data"")"
Evolve-main/scripts/monitor_app.py,509,"print(f""Error: {e}"")"
Evolve-main/scripts/quick_system_check.py,28,"print(""üîç Evolve Trading Platform - Quick System Check"")"
Evolve-main/scripts/quick_system_check.py,29,"print(""="" * 60)"
Evolve-main/scripts/quick_system_check.py,68,"print(f""‚úÖ {result['description']}"")"
Evolve-main/scripts/quick_system_check.py,71,"print(f""‚ùå {result['description']}: {result['error']}"")"
Evolve-main/scripts/quick_system_check.py,76,"print(""\n"" + ""="" * 60)"
Evolve-main/scripts/quick_system_check.py,77,"print(f""üìä RESULTS: {successes}/{total} successful ({success_rate:.1f}%)"")"
Evolve-main/scripts/quick_system_check.py,78,"print(f""‚úÖ Successes: {successes}"")"
Evolve-main/scripts/quick_system_check.py,79,"print(f""‚ùå Failures: {failures}"")"
Evolve-main/scripts/quick_system_check.py,82,"print(""\nüîß FAILED MODULES:"")"
Evolve-main/scripts/quick_system_check.py,85,"print(f""  - {result['module']}: {result['error']}"")"
Evolve-main/scripts/quick_system_check.py,87,"print(""\nüéØ RL Module Status: ‚úÖ WORKING"")"
Evolve-main/scripts/quick_system_check.py,88,"print(""üöÄ System is ready for institutional-grade trading!"")"
Evolve-main/scripts/run_comprehensive_tests.py,342,"print(""\nüéâ All tests passed successfully!"")"
Evolve-main/scripts/run_comprehensive_tests.py,343,"print(""‚úÖ pandas-ta compatibility verified"")"
Evolve-main/scripts/run_comprehensive_tests.py,344,"print(""‚úÖ Strategy tests completed"")"
Evolve-main/scripts/run_comprehensive_tests.py,345,"print(""‚úÖ Agent tests completed"")"
Evolve-main/scripts/run_comprehensive_tests.py,346,"print(""‚úÖ Integration tests completed"")"
Evolve-main/scripts/run_comprehensive_tests.py,347,"print(""‚úÖ Code coverage generated"")"
Evolve-main/scripts/run_comprehensive_tests.py,348,"print(""\nüìä Check test_report.json for detailed results"")"
Evolve-main/scripts/run_comprehensive_tests.py,349,"print(""üìä Check htmlcov/ for coverage report"")"
Evolve-main/scripts/run_comprehensive_tests.py,351,"print(""\n‚ùå Some tests failed!"")"
Evolve-main/scripts/run_comprehensive_tests.py,352,"print(""üìä Check test_report.json for detailed results"")"
Evolve-main/scripts/run_comprehensive_tests.py,353,"print(""üìã Check test_run.log for detailed logs"")"
Evolve-main/scripts/run_tests.py,31,"print(f""Tests failed with exit code {e.returncode}"")"
Evolve-main/scripts/run_tests.py,36,"print(""Running tests..."")"
Evolve-main/scripts/run_tests.py,38,"print(""Tests completed!"")"
Evolve-main/scripts/run_unified.py,17,"print(""üîÆ Evolve Unified Interface Launcher"")"
Evolve-main/scripts/run_unified.py,18,"print(""="" * 50)"
Evolve-main/scripts/run_unified.py,23,"print(f""Executing: {command}"")"
Evolve-main/scripts/run_unified.py,31,"print(f""‚ùå Error: {result.get('error')}"")"
Evolve-main/scripts/run_unified.py,33,"print(""‚úÖ Success!"")"
Evolve-main/scripts/run_unified.py,34,"print(f""Result: {result}"")"
Evolve-main/scripts/run_unified.py,37,"print(f""‚ùå Error: {e}"")"
Evolve-main/scripts/run_unified.py,38,"print(""Make sure unified_interface.py is in the current directory"")"
Evolve-main/scripts/run_unified.py,41,"print(""Usage:"")"
Evolve-main/scripts/run_unified.py,42,"print(""  python run_unified.py <command>"")"
Evolve-main/scripts/run_unified.py,43,"print("""")"
Evolve-main/scripts/run_unified.py,44,"print(""Examples:"")"
Evolve-main/scripts/run_unified.py,45,"print(""  python run_unified.py help"")"
Evolve-main/scripts/run_unified.py,46,"print(""  python run_unified.py forecast AAPL 7d"")"
Evolve-main/scripts/run_unified.py,47,"print(""  python run_unified.py \""What's the best model for TSLA?\"""")"
Evolve-main/scripts/run_unified.py,48,"print("""")"
Evolve-main/scripts/run_unified.py,49,"print(""Or launch Streamlit interface:"")"
Evolve-main/scripts/run_unified.py,50,"print(""  streamlit run app.py"")"
Evolve-main/scripts/run_unified.py,51,"print(""  streamlit run unified_interface.py"")"
Evolve-main/scripts/setup_test_env.py,14,"print(""Warning: requirements-test.txt not found"")"
Evolve-main/scripts/setup_test_env.py,30,"print(""Setting up test environment..."")"
Evolve-main/scripts/setup_test_env.py,38,"print(""Test environment setup complete!"")"
Evolve-main/scripts/system_check.py,294,"print(""\nDETAILED RESULTS:"")"
Evolve-main/scripts/system_check.py,295,"print(""=""*60)"
Evolve-main/scripts/system_check.py,297,print(detail)
Evolve-main/scripts/system_check.py,299,"print(f""\nSUMMARY:"")"
Evolve-main/scripts/system_check.py,300,"print(f""Success Rate: {results['success_rate']:.1f}%"")"
Evolve-main/scripts/system_check.py,301,"print(f""Total: {results['total']} | Success: {results['success']} | Failures: {results['failure']} | Warnings: {results['warning']}"")"
Evolve-main/scripts/voice_prompt_agent.py,195,# TODO: Integrate with LLM parsing when available
Evolve-main/system/infra/agents/services/automation_cli.py,144,self.console.print(table)
Evolve-main/system/infra/agents/services/automation_cli.py,146,self.console.print(
Evolve-main/system/infra/agents/services/automation_cli.py,170,self.console.print(
Evolve-main/system/infra/agents/services/automation_cli.py,183,self.console.print(
Evolve-main/system/infra/agents/services/automation_cli.py,221,self.console.print(table)
Evolve-main/system/infra/agents/services/automation_cli.py,223,self.console.print(
Evolve-main/system/infra/agents/services/automation_cli.py,262,self.console.print(
Evolve-main/system/infra/agents/services/automation_cli.py,274,self.console.print(
Evolve-main/system/infra/agents/services/automation_cli.py,286,self.console.print(
Evolve-main/system/infra/agents/services/automation_cli.py,309,self.console.print(
Evolve-main/system/infra/agents/services/automation_cli.py,357,self.console.print(table)
Evolve-main/system/infra/agents/services/automation_cli.py,360,self.console.print(
Evolve-main/system/infra/agents/services/automation_cli.py,391,self.console.print(
Evolve-main/system/infra/agents/services/automation_cli.py,404,self.console.print(
Evolve-main/system/infra/agents/services/automation_cli.py,414,self.console.print(
Evolve-main/system/infra/agents/services/automation_cli.py,424,self.console.print(
Evolve-main/system/infra/agents/services/notification_cleanup.py,965,metrics.add_success(0.0)  # TODO: Add cleanup time
Evolve-main/tests/audit_return_statements.py,253,"print(""\n"" + ""=""*80)"
Evolve-main/tests/audit_return_statements.py,254,"print(""RETURN STATEMENT AUDIT REPORT"")"
Evolve-main/tests/audit_return_statements.py,255,"print(""=""*80)"
Evolve-main/tests/audit_return_statements.py,258,"print(f""\nSUMMARY:"")"
Evolve-main/tests/audit_return_statements.py,259,"print(f""  Total Issues: {summary['total_issues']}"")"
Evolve-main/tests/audit_return_statements.py,260,"print(f""  Passing Functions: {summary['total_passing']}"")"
Evolve-main/tests/audit_return_statements.py,261,"print(f""  Exempt Functions: {summary['total_exempt']}"")"
Evolve-main/tests/audit_return_statements.py,262,"print(f""  Compliance Rate: {summary['compliance_rate']}"")"
Evolve-main/tests/audit_return_statements.py,265,"print(f""\nTOP FILES WITH ISSUES:"")"
Evolve-main/tests/audit_return_statements.py,267,"print(f""  {file_path}: {len(issues)} issues"")"
Evolve-main/tests/audit_return_statements.py,269,"print(f""\nRECOMMENDATIONS:"")"
Evolve-main/tests/audit_return_statements.py,271,"print(f""  {rec}"")"
Evolve-main/tests/audit_return_statements.py,273,"print(""\n"" + ""=""*80)"
Evolve-main/tests/audit_return_statements.py,275,"print(f""Audit failed: {result['message']}"")"
Evolve-main/tests/check_system.py,106,"print(""üîç EVOLVE TRADING PLATFORM - SYSTEM CHECK"")"
Evolve-main/tests/check_system.py,107,"print(""="" * 60)"
Evolve-main/tests/check_system.py,110,"print(""\nüì¶ CRITICAL IMPORTS:"")"
Evolve-main/tests/check_system.py,117,"print(f""  {status} {module}"")"
Evolve-main/tests/check_system.py,120,"print(""\nüèóÔ∏è CORE MODULES:"")"
Evolve-main/tests/check_system.py,127,"print(f""  {status} {module}"")"
Evolve-main/tests/check_system.py,130,"print(""\nüöÄ ADVANCED MODULES:"")"
Evolve-main/tests/check_system.py,137,"print(f""  {status} {module}"")"
Evolve-main/tests/check_system.py,140,"print(""\nüñ•Ô∏è UI MODULES:"")"
Evolve-main/tests/check_system.py,147,"print(f""  {status} {module}"")"
Evolve-main/tests/check_system.py,155,"print(""\n"" + ""="" * 60)"
Evolve-main/tests/check_system.py,156,"print(f""üìä OVERALL SUCCESS RATE: {success_rate:.1f}%"")"
Evolve-main/tests/check_system.py,157,"print(f""‚úÖ Success: {total_success}/{total_checks}"")"
Evolve-main/tests/check_system.py,158,"print(f""‚ùå Failures: {total_checks - total_success}"")"
Evolve-main/tests/check_system.py,159,"print(""="" * 60)"
Evolve-main/tests/comprehensive_audit.py,188,"print(""üîç Starting comprehensive return statement audit..."")"
Evolve-main/tests/comprehensive_audit.py,201,"print(f""üìÅ Found {len(python_files)} Python files to audit"")"
Evolve-main/tests/comprehensive_audit.py,292,"print(""\n"" + ""=""*80)"
Evolve-main/tests/comprehensive_audit.py,293,"print(""üìä COMPREHENSIVE RETURN STATEMENT AUDIT REPORT"")"
Evolve-main/tests/comprehensive_audit.py,294,"print(""=""*80)"
Evolve-main/tests/comprehensive_audit.py,296,"print(f""\nüìà OVERALL COMPLIANCE:"")"
Evolve-main/tests/comprehensive_audit.py,297,"print(f""   Files: {summary['compliant_files']}/{summary['total_files']} compliant ({summary['file_compliance_rate']:.1f}%)"")"
Evolve-main/tests/comprehensive_audit.py,298,"print(f""   Functions: {summary['functions_with_returns']}/{summary['total_functions']} with returns ({summary['compliance_rate']:.1f}%)"")"
Evolve-main/tests/comprehensive_audit.py,300,"print(f""\nüéØ VIOLATIONS BY PRIORITY:"")"
Evolve-main/tests/comprehensive_audit.py,303,"print(f""   {priority.upper()}: {data['count']} violations in {data['files_affected']} files"")"
Evolve-main/tests/comprehensive_audit.py,305,"print(f""\nüö® CRITICAL VIOLATIONS:"")"
Evolve-main/tests/comprehensive_audit.py,307,"print(f""   {violation['file']}:{violation['line']} - {violation['function']} ({violation['reason']})"")"
Evolve-main/tests/comprehensive_audit.py,310,"print(f""   ... and {len(priority_summary['critical']['violations']) - 10} more"")"
Evolve-main/tests/comprehensive_audit.py,312,"print(f""\n‚ö†Ô∏è HIGH PRIORITY VIOLATIONS:"")"
Evolve-main/tests/comprehensive_audit.py,314,"print(f""   {violation['file']}:{violation['line']} - {violation['function']} ({violation['reason']})"")"
Evolve-main/tests/comprehensive_audit.py,317,"print(f""   ... and {len(priority_summary['high']['violations']) - 10} more"")"
Evolve-main/tests/comprehensive_audit.py,319,"print(f""\nüí° RECOMMENDATIONS:"")"
Evolve-main/tests/comprehensive_audit.py,321,"print(f""   {rec}"")"
Evolve-main/tests/comprehensive_audit.py,323,"print(""\n"" + ""=""*80)"
Evolve-main/tests/comprehensive_audit.py,329,"print(f""üìÑ Report saved to {filename}"")"
Evolve-main/tests/comprehensive_codebase_review.py,11,"print(""üîç Testing Basic Imports..."")"
Evolve-main/tests/comprehensive_codebase_review.py,58,"print(""\nüîç Testing Core Modules..."")"
Evolve-main/tests/comprehensive_codebase_review.py,95,"print(""\nüîç Testing Advanced Features..."")"
Evolve-main/tests/comprehensive_codebase_review.py,140,"print(""\nüîç Testing Optimization Modules..."")"
Evolve-main/tests/comprehensive_codebase_review.py,169,"print(""\nüîç Testing Data Providers..."")"
Evolve-main/tests/comprehensive_codebase_review.py,191,"print(""\nüîç Testing UI Components..."")"
Evolve-main/tests/comprehensive_codebase_review.py,215,"print(""\nüîç Testing Configuration..."")"
Evolve-main/tests/comprehensive_codebase_review.py,247,"print(""\nüîç Testing File Structure..."")"
Evolve-main/tests/comprehensive_codebase_review.py,294,"print(""\n"" + ""=""*60)"
Evolve-main/tests/comprehensive_codebase_review.py,295,"print(""üìä COMPREHENSIVE CODEBASE REVIEW SUMMARY"")"
Evolve-main/tests/comprehensive_codebase_review.py,296,"print(""=""*60)"
Evolve-main/tests/comprehensive_codebase_review.py,304,"print(f""\n{category.upper()}:"")"
Evolve-main/tests/comprehensive_codebase_review.py,305,"print(""-"" * len(category))"
Evolve-main/tests/comprehensive_codebase_review.py,311,"print(f""  {test:30} {result}"")"
Evolve-main/tests/comprehensive_codebase_review.py,314,"print(f""  {test:30} {result}"")"
Evolve-main/tests/comprehensive_codebase_review.py,317,"print(f""  {test:30} {result}"")"
Evolve-main/tests/comprehensive_codebase_review.py,319,"print(""\n"" + ""=""*60)"
Evolve-main/tests/comprehensive_codebase_review.py,320,"print(""üìà OVERALL STATISTICS"")"
Evolve-main/tests/comprehensive_codebase_review.py,321,"print(""=""*60)"
Evolve-main/tests/comprehensive_codebase_review.py,322,"print(f""Total Tests:     {total_tests}"")"
Evolve-main/tests/comprehensive_codebase_review.py,323,"print(f""‚úÖ Passed:       {passed_tests}"")"
Evolve-main/tests/comprehensive_codebase_review.py,324,"print(f""‚ö†Ô∏è  Warnings:     {warnings}"")"
Evolve-main/tests/comprehensive_codebase_review.py,325,"print(f""‚ùå Failures:     {failures}"")"
Evolve-main/tests/comprehensive_codebase_review.py,326,"print(f""Success Rate:    {passed_tests/total_tests*100:.1f}%"")"
Evolve-main/tests/comprehensive_codebase_review.py,329,"print(""\nüéâ EXCELLENT! All critical components are working!"")"
Evolve-main/tests/comprehensive_codebase_review.py,331,"print(f""‚ö†Ô∏è  {warnings} optional features have warnings but don't affect core functionality."")"
Evolve-main/tests/comprehensive_codebase_review.py,333,"print(""\n‚úÖ GOOD! Most components are working. Minor issues detected."")"
Evolve-main/tests/comprehensive_codebase_review.py,335,"print(""\n‚ö†Ô∏è  ATTENTION NEEDED! Several components have issues."")"
Evolve-main/tests/comprehensive_codebase_review.py,347,"print(""üß™ COMPREHENSIVE CODEBASE REVIEW"")"
Evolve-main/tests/comprehensive_codebase_review.py,348,"print(""=""*60)"
Evolve-main/tests/comprehensive_codebase_review.py,349,"print(""Reviewing Evolve Trading Platform..."")"
Evolve-main/tests/comprehensive_codebase_review.py,350,"print(f""Started at: {time.strftime('%Y-%m-%d %H:%M:%S')}"")"
Evolve-main/tests/comprehensive_codebase_review.py,367,"print(f""\nCompleted at: {time.strftime('%Y-%m-%d %H:%M:%S')}"")"
Evolve-main/tests/comprehensive_return_fix.py,306,"print(""\n"" + ""=""*60)"
Evolve-main/tests/comprehensive_return_fix.py,307,"print(""COMPREHENSIVE RETURN STATEMENT FIX SUMMARY"")"
Evolve-main/tests/comprehensive_return_fix.py,308,"print(""=""*60)"
Evolve-main/tests/comprehensive_return_fix.py,309,"print(f""Total files processed: {results['total_files']}"")"
Evolve-main/tests/comprehensive_return_fix.py,310,"print(f""Files fixed: {results['files_fixed']}"")"
Evolve-main/tests/comprehensive_return_fix.py,311,"print(f""Total functions fixed: {results['total_functions_fixed']}"")"
Evolve-main/tests/comprehensive_return_fix.py,314,"print(f""Files with errors: {len(results['files_with_errors'])}"")"
Evolve-main/tests/comprehensive_return_fix.py,316,"print(f""  - {error_file}"")"
Evolve-main/tests/comprehensive_return_fix.py,318,"print(f""  ... and {len(results['files_with_errors']) - 10} more"")"
Evolve-main/tests/comprehensive_return_fix.py,320,"print(""=""*60)"
Evolve-main/tests/demo_unified_interface.py,18,"print(""üîÆ Evolve Unified Interface Demo"")"
Evolve-main/tests/demo_unified_interface.py,19,"print(""="" * 60)"
Evolve-main/tests/demo_unified_interface.py,20,"print(""This demo shows how to access all features through one interface."")"
Evolve-main/tests/demo_unified_interface.py,21,"print(""="" * 60)"
Evolve-main/tests/demo_unified_interface.py,26,"print(""‚úÖ Successfully imported UnifiedInterface"")"
Evolve-main/tests/demo_unified_interface.py,30,"print(""‚úÖ Successfully initialized interface"")"
Evolve-main/tests/demo_unified_interface.py,68,"print(f""\nüìù Running {len(demo_commands)} demo commands..."")"
Evolve-main/tests/demo_unified_interface.py,69,"print(""-"" * 60)"
Evolve-main/tests/demo_unified_interface.py,73,"print(f""\n{i}. {demo['description']}"")"
Evolve-main/tests/demo_unified_interface.py,74,"print(f""   Command: {demo['command']}"")"
Evolve-main/tests/demo_unified_interface.py,75,"print(""   "" + ""-"" * 40)"
Evolve-main/tests/demo_unified_interface.py,82,"print(f""   ‚ùå Error: {result.get('error')}"")"
Evolve-main/tests/demo_unified_interface.py,84,"print(f""   ‚úÖ Success!"")"
Evolve-main/tests/demo_unified_interface.py,86,"print(f""   Type: {result_type}"")"
Evolve-main/tests/demo_unified_interface.py,91,"print(f""   Features: {len(help_data['features'])} available"")"
Evolve-main/tests/demo_unified_interface.py,93,"print(""   QuantGPT processed the query"")"
Evolve-main/tests/demo_unified_interface.py,96,"print(f""   Symbol: {symbol}"")"
Evolve-main/tests/demo_unified_interface.py,99,"print(f""   Items: {len(items)} found"")"
Evolve-main/tests/demo_unified_interface.py,101,"print(""   System status retrieved"")"
Evolve-main/tests/demo_unified_interface.py,103,"print(""\n"" + ""="" * 60)"
Evolve-main/tests/demo_unified_interface.py,104,"print(""üéâ Demo completed successfully!"")"
Evolve-main/tests/demo_unified_interface.py,105,"print(""\nüìã What you can do next:"")"
Evolve-main/tests/demo_unified_interface.py,106,"print(""1. Launch Streamlit interface: streamlit run app.py"")"
Evolve-main/tests/demo_unified_interface.py,107,"print(""2. Use terminal interface: python unified_interface.py --terminal"")"
Evolve-main/tests/demo_unified_interface.py,108,"print(""3. Execute commands: python unified_interface.py --command 'help'"")"
Evolve-main/tests/demo_unified_interface.py,109,"print(""4. Ask questions: python unified_interface.py --command 'What is the best model for AAPL?'"")"
Evolve-main/tests/demo_unified_interface.py,114,"print(f""‚ùå Import error: {e}"")"
Evolve-main/tests/demo_unified_interface.py,115,"print(""Make sure unified_interface.py is in the current directory"")"
Evolve-main/tests/demo_unified_interface.py,118,"print(f""‚ùå Unexpected error: {e}"")"
Evolve-main/tests/demo_unified_interface.py,123,"print(""\nüìö Usage Examples"")"
Evolve-main/tests/demo_unified_interface.py,124,"print(""="" * 60)"
Evolve-main/tests/demo_unified_interface.py,173,"print(f""\n{category['category']}:"")"
Evolve-main/tests/demo_unified_interface.py,175,"print(f""  {example}"")"
Evolve-main/tests/focused_return_fix.py,202,"print(""\n"" + ""=""*60)"
Evolve-main/tests/focused_return_fix.py,203,"print(""FOCUSED RETURN STATEMENT FIX SUMMARY"")"
Evolve-main/tests/focused_return_fix.py,204,"print(""=""*60)"
Evolve-main/tests/focused_return_fix.py,205,"print(f""Priority files processed: {results['total_files']}"")"
Evolve-main/tests/focused_return_fix.py,206,"print(f""Files fixed: {results['files_fixed']}"")"
Evolve-main/tests/focused_return_fix.py,207,"print(f""Total functions fixed: {results['total_functions_fixed']}"")"
Evolve-main/tests/focused_return_fix.py,210,"print(f""Files with errors: {len(results['files_with_errors'])}"")"
Evolve-main/tests/focused_return_fix.py,212,"print(f""  - {error_file}"")"
Evolve-main/tests/focused_return_fix.py,214,"print(""=""*60)"
Evolve-main/tests/post_upgrade_audit.py,137,"'print(',"
Evolve-main/tests/post_upgrade_audit.py,269,"print(""üîç POST-UPGRADE RETURN STATEMENT AUDIT"")"
Evolve-main/tests/post_upgrade_audit.py,270,"print(""="" * 60)"
Evolve-main/tests/post_upgrade_audit.py,275,"print(f""\nüìä AUDIT RESULTS"")"
Evolve-main/tests/post_upgrade_audit.py,276,"print(""="" * 60)"
Evolve-main/tests/post_upgrade_audit.py,277,"print(f""Total functions audited: {result['total_functions']}"")"
Evolve-main/tests/post_upgrade_audit.py,278,"print(f""Compliant functions: {result['total_compliant']}"")"
Evolve-main/tests/post_upgrade_audit.py,279,"print(f""Violations found: {result['total_violations']}"")"
Evolve-main/tests/post_upgrade_audit.py,280,"print(f""Compliance rate: {result['compliance_rate']:.1f}%"")"
Evolve-main/tests/post_upgrade_audit.py,283,"print(""\n‚úÖ ALL RETURN STATEMENTS ARE COMPLIANT!"")"
Evolve-main/tests/post_upgrade_audit.py,286,"print(f""\n‚ùå {result['total_violations']} VIOLATIONS FOUND:"")"
Evolve-main/tests/post_upgrade_audit.py,287,"print(""="" * 60)"
Evolve-main/tests/post_upgrade_audit.py,299,"print(f""\nüìÅ {file_path}"")"
Evolve-main/tests/post_upgrade_audit.py,302,"print(f""  ‚ùå Line {violation['line']}: {violation['function']} - {violation['reason']}"")"
Evolve-main/tests/post_upgrade_audit.py,304,"print(f""  ‚ùå {violation['error']}"")"
Evolve-main/tests/post_upgrade_audit.py,307,"print(f""  ... and {len(violations) - 10} more violations"")"
Evolve-main/tests/post_upgrade_audit.py,318,"print(f""\nFinal result: {result['status']}"")"
Evolve-main/tests/post_upgrade_audit.py,320,"print(f""Compliance rate: {result['compliance_rate']:.1f}%"")"
Evolve-main/tests/post_upgrade_audit.py,321,"print(f""Total violations: {result['total_violations']}"")"
Evolve-main/tests/post_upgrade_return_audit.py,308,print(report)
Evolve-main/tests/post_upgrade_return_audit.py,316,"print(""\n‚úÖ AUDIT PASSED: All return statements are compliant"")"
Evolve-main/tests/post_upgrade_return_audit.py,319,"print(f""\n‚ùå AUDIT FAILED: {audit_result['summary']['total_violations']} violations found"")"
Evolve-main/tests/quick_audit.py,69,"'logger.', 'print(', 'st.', 'open(', 'write(', 'requests.',"
Evolve-main/tests/quick_audit.py,119,"print(""üîç QUICK POST-UPGRADE RETURN STATEMENT AUDIT"")"
Evolve-main/tests/quick_audit.py,120,"print(""="" * 60)"
Evolve-main/tests/quick_audit.py,124,"print(f""Found {len(python_files)} Python files to audit"")"
Evolve-main/tests/quick_audit.py,134,"print(f""\nüìÅ {file_path}"")"
Evolve-main/tests/quick_audit.py,137,"print(f""  ‚ùå Line {violation['line']}: {violation['function']} - {violation['reason']}"")"
Evolve-main/tests/quick_audit.py,139,"print(f""  ‚ùå {violation['reason']}"")"
Evolve-main/tests/quick_audit.py,141,"print(""\n"" + ""="" * 60)"
Evolve-main/tests/quick_audit.py,142,"print(""üìä AUDIT RESULTS"")"
Evolve-main/tests/quick_audit.py,143,"print(""="" * 60)"
Evolve-main/tests/quick_audit.py,144,"print(f""Files audited: {len(python_files)}"")"
Evolve-main/tests/quick_audit.py,145,"print(f""Files with violations: {files_with_violations}"")"
Evolve-main/tests/quick_audit.py,146,"print(f""Total violations: {len(all_violations)}"")"
Evolve-main/tests/quick_audit.py,149,"print(f""\n‚ùå VIOLATIONS FOUND - SYSTEM NOT FULLY COMPLIANT"")"
Evolve-main/tests/quick_audit.py,150,"print(""="" * 60)"
Evolve-main/tests/quick_audit.py,156,"print(f""Functions with side effects missing returns: {len(side_effect_violations)}"")"
Evolve-main/tests/quick_audit.py,157,"print(f""Functions that should return based on name: {len(name_based_violations)}"")"
Evolve-main/tests/quick_audit.py,159,"print(f""\nüéØ TOP PRIORITY FIXES (Side Effects):"")"
Evolve-main/tests/quick_audit.py,161,"print(f""  - {violation['file']}:{violation['line']} - {violation['function']}"")"
Evolve-main/tests/quick_audit.py,164,"print(f""  ... and {len(side_effect_violations) - 20} more"")"
Evolve-main/tests/quick_audit.py,174,"print(""\n‚úÖ ALL RETURN STATEMENTS ARE COMPLIANT!"")"
Evolve-main/tests/quick_audit.py,179,"print(f""\nFinal result: {result['status']}"")"
Evolve-main/tests/quick_comprehensive_audit.py,13,"print(""üîç Quick Comprehensive Return Statement Audit"")"
Evolve-main/tests/quick_comprehensive_audit.py,14,"print(""=""*60)"
Evolve-main/tests/quick_comprehensive_audit.py,32,"print(f""üìÅ Found {len(python_files)} Python files"")"
Evolve-main/tests/quick_comprehensive_audit.py,62,"'print(', 'logging', 'logger', 'st.', 'plt.', 'open(', 'write(',"
Evolve-main/tests/quick_comprehensive_audit.py,85,"print(f""Error reading {file_path}: {e}"")"
Evolve-main/tests/quick_comprehensive_audit.py,91,"print(f""\nüìä RESULTS:"")"
Evolve-main/tests/quick_comprehensive_audit.py,92,"print(f""   Total functions: {total_functions}"")"
Evolve-main/tests/quick_comprehensive_audit.py,93,"print(f""   Functions with returns: {functions_with_returns}"")"
Evolve-main/tests/quick_comprehensive_audit.py,94,"print(f""   Functions without returns: {total_functions - functions_with_returns}"")"
Evolve-main/tests/quick_comprehensive_audit.py,95,"print(f""   Compliance rate: {compliance_rate:.1f}%"")"
Evolve-main/tests/quick_comprehensive_audit.py,97,"print(f""\nüö® VIOLATIONS BY PRIORITY:"")"
Evolve-main/tests/quick_comprehensive_audit.py,101,"print(f""   {priority.upper()}: {count} violations"")"
Evolve-main/tests/quick_comprehensive_audit.py,105,"print(f""     - {violation['file']}: {violation['function']}"")"
Evolve-main/tests/quick_comprehensive_audit.py,107,"print(f""     ... and {len(violations[priority]) - 5} more"")"
Evolve-main/tests/quick_comprehensive_audit.py,110,"print(f""\nüéØ SUMMARY:"")"
Evolve-main/tests/quick_comprehensive_audit.py,111,"print(f""   Total violations: {total_violations}"")"
Evolve-main/tests/quick_comprehensive_audit.py,112,"print(f""   Critical violations: {len(violations['critical'])}"")"
Evolve-main/tests/quick_comprehensive_audit.py,113,"print(f""   High priority violations: {len(violations['high'])}"")"
Evolve-main/tests/quick_comprehensive_audit.py,116,"print(""‚úÖ EXCELLENT! All functions have proper return statements!"")"
Evolve-main/tests/quick_comprehensive_audit.py,118,"print(""‚úÖ GOOD! No critical violations found!"")"
Evolve-main/tests/quick_comprehensive_audit.py,120,"print(""‚ö†Ô∏è  Need to fix critical violations for full compliance"")"
Evolve-main/tests/quick_fix.py,29,"print(""Fixed updater_agent.py"")"
Evolve-main/tests/quick_fix.py,52,"print(""Fixed updater/utils.py"")"
Evolve-main/tests/remove_duplicates.py,16,"print(f""Removed {dir_path}"")"
Evolve-main/tests/remove_duplicates.py,18,"print(f""Error removing {dir_path}: {e}"")"
Evolve-main/tests/remove_duplicates.py,20,"print(f""{dir_path} does not exist"")"
Evolve-main/tests/simple_audit.py,69,"'logger.', 'print(', 'st.', 'open(', 'write(', 'requests.',"
Evolve-main/tests/simple_audit.py,98,"print(""üîç EVOLVE CODEBASE RETURN STATEMENT AUDIT"")"
Evolve-main/tests/simple_audit.py,99,"print(""="" * 60)"
Evolve-main/tests/simple_audit.py,102,"print(f""Found {len(python_files)} Python files to audit"")"
Evolve-main/tests/simple_audit.py,118,"print(f""\nüìä AUDIT SUMMARY:"")"
Evolve-main/tests/simple_audit.py,119,"print(f""  Total functions audited: {total_functions}"")"
Evolve-main/tests/simple_audit.py,120,"print(f""  ‚úÖ Passing functions: {len(all_passing)}"")"
Evolve-main/tests/simple_audit.py,121,"print(f""  ‚ö†Ô∏è  Functions with issues: {len(all_issues)}"")"
Evolve-main/tests/simple_audit.py,122,"print(f""  üìà Compliance rate: {compliance_rate:.1%}"")"
Evolve-main/tests/simple_audit.py,126,"print(f""\nüîß FUNCTIONS NEEDING RETURN STATEMENTS:"")"
Evolve-main/tests/simple_audit.py,128,"print(f""  üìÅ {issue['file']}:{issue['function']} (line {issue['line']})"")"
Evolve-main/tests/simple_audit.py,129,"print(f""     Reason: {issue['reason']}"")"
Evolve-main/tests/simple_audit.py,132,"print(f""\n‚úÖ AGENTIC MODULARITY STATUS:"")"
Evolve-main/tests/simple_audit.py,134,"print(""  üéâ FULL COMPLIANCE: All functions return structured outputs"")"
Evolve-main/tests/simple_audit.py,135,"print(""  üöÄ System meets ChatGPT-like autonomous architecture standards"")"
Evolve-main/tests/simple_audit.py,137,"print(f""  ‚ö†Ô∏è  {len(all_issues)} functions need return statements"")"
Evolve-main/tests/simple_audit.py,138,"print(""  üîÑ System needs updates for full agentic modularity"")"
Evolve-main/tests/simple_audit.py,140,"print(""\n"" + ""="" * 60)"
Evolve-main/tests/simple_audit.py,144,"print(""üéâ EXCELLENT: Codebase meets agentic modularity standards!"")"
Evolve-main/tests/simple_audit.py,147,"print(""‚úÖ GOOD: Codebase mostly compliant, minor improvements needed"")"
Evolve-main/tests/simple_audit.py,150,"print(""‚ö†Ô∏è  NEEDS WORK: Significant improvements needed for full compliance"")"
Evolve-main/tests/system_check.py,37,"print(""üöÄ Evolve Trading Platform - Comprehensive System Check"")"
Evolve-main/tests/system_check.py,38,"print(""="" * 60)"
Evolve-main/tests/system_check.py,39,"print(f""Timestamp: {datetime.now()}"")"
Evolve-main/tests/system_check.py,40,print()
Evolve-main/tests/system_check.py,49,"print(""üì¶ Testing Core Modules..."")"
Evolve-main/tests/system_check.py,90,"print(""\nüî¨ Testing Advanced Modules..."")"
Evolve-main/tests/system_check.py,177,"print(""\nüîß Testing External Dependencies..."")"
Evolve-main/tests/system_check.py,284,"print(""\n‚öôÔ∏è Testing Key Functions..."")"
Evolve-main/tests/system_check.py,362,"print(""\nüìÑ Testing Streamlit Pages..."")"
Evolve-main/tests/system_check.py,387,"print(""\n"" + ""="" * 60)"
Evolve-main/tests/system_check.py,388,"print(""üìä SYSTEM CHECK RESULTS"")"
Evolve-main/tests/system_check.py,389,"print(""="" * 60)"
Evolve-main/tests/system_check.py,394,"print(f""Total Tests: {total_tests}"")"
Evolve-main/tests/system_check.py,395,"print(f""‚úÖ Successes: {successes}"")"
Evolve-main/tests/system_check.py,396,"print(f""‚ùå Failures: {failures}"")"
Evolve-main/tests/system_check.py,397,"print(f""‚ö†Ô∏è Warnings: {warnings}"")"
Evolve-main/tests/system_check.py,398,"print(f""üìà Success Rate: {success_rate:.1f}%"")"
Evolve-main/tests/system_check.py,400,"print(""\n"" + ""="" * 60)"
Evolve-main/tests/system_check.py,401,"print(""üìã DETAILED RESULTS"")"
Evolve-main/tests/system_check.py,402,"print(""="" * 60)"
Evolve-main/tests/system_check.py,405,print(message)
Evolve-main/tests/system_check.py,407,"print(""\n"" + ""="" * 60)"
Evolve-main/tests/system_check.py,408,"print(""üéØ SUMMARY"")"
Evolve-main/tests/system_check.py,409,"print(""="" * 60)"
Evolve-main/tests/system_check.py,412,"print(""üéâ EXCELLENT! System is production-ready with minimal issues."")"
Evolve-main/tests/system_check.py,414,"print(""‚úÖ GOOD! System is mostly functional with some minor issues."")"
Evolve-main/tests/system_check.py,416,"print(""‚ö†Ô∏è FAIR! System has several issues that need attention."")"
Evolve-main/tests/system_check.py,418,"print(""‚ùå POOR! System has significant issues requiring immediate attention."")"
Evolve-main/tests/system_check.py,421,"print(f""\nüîß RECOMMENDATIONS:"")"
Evolve-main/tests/system_check.py,422,"print(f""- Fix {failures} critical failures first"")"
Evolve-main/tests/system_check.py,424,"print(f""- Address {warnings} warnings for optimal performance"")"
Evolve-main/tests/system_check.py,425,"print(""- Run integration tests after fixes"")"
Evolve-main/tests/system_check.py,426,"print(""- Consider dependency updates"")"
Evolve-main/tests/system_check.py,428,"print(f""\n‚è∞ Check completed at: {datetime.now()}"")"
Evolve-main/tests/targeted_audit.py,196,"print(""\n"" + ""=""*60)"
Evolve-main/tests/targeted_audit.py,197,"print(""RETURN STATEMENT AUDIT SUMMARY"")"
Evolve-main/tests/targeted_audit.py,198,"print(""=""*60)"
Evolve-main/tests/targeted_audit.py,199,"print(f""Total files scanned: {results['total_files']}"")"
Evolve-main/tests/targeted_audit.py,200,"print(f""Total functions found: {results['total_functions']}"")"
Evolve-main/tests/targeted_audit.py,201,"print(f""Files with violations: {results['files_with_violations']}"")"
Evolve-main/tests/targeted_audit.py,202,"print(f""Total violations: {results['total_violations']}"")"
Evolve-main/tests/targeted_audit.py,203,print()
Evolve-main/tests/targeted_audit.py,206,"print(""Violations by type:"")"
Evolve-main/tests/targeted_audit.py,208,"print(f""  {violation_type}: {count}"")"
Evolve-main/tests/targeted_audit.py,209,print()
Evolve-main/tests/targeted_audit.py,212,"print(""Files with violations:"")"
Evolve-main/tests/targeted_audit.py,215,"print(f""  {file_result['filepath']}: {file_result['violation_count']} violations"")"
Evolve-main/tests/targeted_audit.py,217,"print(f""    - {violation['function']} (line {violation['line']}): {violation['message']}"")"
Evolve-main/tests/targeted_audit.py,219,"print(""‚úÖ No return statement violations found!"")"
Evolve-main/tests/targeted_audit.py,221,"print(""=""*60)"
Evolve-main/tests/test_core_functionality.py,9,"print(""Testing basic imports..."")"
Evolve-main/tests/test_core_functionality.py,15,"print(""‚úÖ Basic imports successful"")"
Evolve-main/tests/test_core_functionality.py,18,"print(f""‚ùå Basic imports failed: {e}"")"
Evolve-main/tests/test_core_functionality.py,23,"print(""Testing configuration loader..."")"
Evolve-main/tests/test_core_functionality.py,28,"print(""‚úÖ Configuration loader successful"")"
Evolve-main/tests/test_core_functionality.py,31,"print(f""‚ùå Configuration loader failed: {e}"")"
Evolve-main/tests/test_core_functionality.py,36,"print(""Testing dashboard import..."")"
Evolve-main/tests/test_core_functionality.py,42,"print(""‚úÖ Dashboard import successful"")"
Evolve-main/tests/test_core_functionality.py,45,"print(f""‚ùå Dashboard import failed: {e}"")"
Evolve-main/tests/test_core_functionality.py,50,"print(""üß™ Testing Core Functionality"")"
Evolve-main/tests/test_core_functionality.py,51,"print(""="" * 40)"
Evolve-main/tests/test_core_functionality.py,67,"print(f""‚ùå Test failed with exception: {e}"")"
Evolve-main/tests/test_core_functionality.py,69,"print(""\nüìä Summary:"")"
Evolve-main/tests/test_core_functionality.py,70,"print(f""Passed: {passed}/{total}"")"
Evolve-main/tests/test_core_functionality.py,71,"print(f""Success Rate: {passed/total*100:.1f}%"")"
Evolve-main/tests/test_core_functionality.py,74,"print(""\nüéâ All core tests passed!"")"
Evolve-main/tests/test_core_functionality.py,77,"print(""\n‚ö†Ô∏è Some tests failed."")"
Evolve-main/tests/test_fixes.py,22,"print(""Testing CapabilityRouter..."")"
Evolve-main/tests/test_fixes.py,46,"print(f""  {capability}: {'Available' if result else 'Not Available'}"")"
Evolve-main/tests/test_fixes.py,49,"print(f""  {capability}: Error - {e}"")"
Evolve-main/tests/test_fixes.py,53,"print(f""  System Health: {health.get('status', 'unknown')}"")"
Evolve-main/tests/test_fixes.py,58,"print(f""  CapabilityRouter test failed: {e}"")"
Evolve-main/tests/test_fixes.py,63,"print(""Testing DataFeed..."")"
Evolve-main/tests/test_fixes.py,71,"print(f""  Current Provider: {status.get('current_provider', 'unknown')}"")"
Evolve-main/tests/test_fixes.py,75,"print(f""  System Health: {health.get('status', 'unknown')}"")"
Evolve-main/tests/test_fixes.py,76,"print(f""  Available Providers: {health.get('available_providers', 0)}"")"
Evolve-main/tests/test_fixes.py,81,"print(f""  DataFeed test failed: {e}"")"
Evolve-main/tests/test_fixes.py,86,"print(""Testing RLTrader..."")"
Evolve-main/tests/test_fixes.py,96,"print(f""  Model Available: {status.get('model_available', False)}"")"
Evolve-main/tests/test_fixes.py,97,"print(f""  Gymnasium Available: {status.get('gymnasium_available', False)}"")"
Evolve-main/tests/test_fixes.py,98,"print(f""  Stable-baselines3 Available: {status.get('stable_baselines3_available', False)}"")"
Evolve-main/tests/test_fixes.py,102,"print(f""  System Health: {health.get('overall_status', 'unknown')}"")"
Evolve-main/tests/test_fixes.py,107,"print(f""  RLTrader test failed: {e}"")"
Evolve-main/tests/test_fixes.py,112,"print(""Testing AgentHub..."")"
Evolve-main/tests/test_fixes.py,120,"print(f""  System Health: {health.get('status', 'unknown')}"")"
Evolve-main/tests/test_fixes.py,124,"print(f""  Available Agents: {len(status.get('available_agents', []))}"")"
Evolve-main/tests/test_fixes.py,129,"print(f""  AgentHub test failed: {e}"")"
Evolve-main/tests/test_fixes.py,135,"print(""Side effect: printing to console"")"
Evolve-main/tests/test_fixes.py,741,"print(""="" * 60)"
Evolve-main/tests/test_fixes.py,742,"print(""EVOLVE TRADING SYSTEM - FIX VERIFICATION"")"
Evolve-main/tests/test_fixes.py,743,"print(""="" * 60)"
Evolve-main/tests/test_fixes.py,820,"print(f""\n{test_name}:"")"
Evolve-main/tests/test_fixes.py,826,"print(f""  PASSED"")"
Evolve-main/tests/test_fixes.py,828,"print(f""  FAILED"")"
Evolve-main/tests/test_fixes.py,831,"print(f""  ERROR: {e}"")"
Evolve-main/tests/test_fixes.py,833,"print(""\n"" + ""="" * 60)"
Evolve-main/tests/test_fixes.py,834,"print(""TEST RESULTS SUMMARY"")"
Evolve-main/tests/test_fixes.py,835,"print(""="" * 60)"
Evolve-main/tests/test_fixes.py,836,"print(f""Total Tests: {total}"")"
Evolve-main/tests/test_fixes.py,837,"print(f""Passed: {passed}"")"
Evolve-main/tests/test_fixes.py,838,"print(f""Failed: {total - passed}"")"
Evolve-main/tests/test_fixes.py,839,"print(f""Success Rate: {(passed/total)*100:.1f}%"")"
Evolve-main/tests/test_fixes.py,842,"print(""STATUS: ALL FIXES VERIFIED SUCCESSFULLY"")"
Evolve-main/tests/test_fixes.py,844,"print(""STATUS: SOME ISSUES REMAIN"")"
Evolve-main/tests/test_fixes.py,864,"print(f""\nResults saved to: {results_file}"")"
Evolve-main/tests/test_fixes.py,867,"print(f""\nCould not save results: {e}"")"
Evolve-main/tests/test_full_pipeline.py,36,"print(""üîç Testing Data Provider..."")"
Evolve-main/tests/test_full_pipeline.py,47,"print(f""‚úÖ Historical data retrieved: {len(data)} records"")"
Evolve-main/tests/test_full_pipeline.py,48,"print(f""   Columns: {list(data.columns)}"")"
Evolve-main/tests/test_full_pipeline.py,49,"print(f""   Date range: {data.index[0]} to {data.index[-1]}"")"
Evolve-main/tests/test_full_pipeline.py,51,"print(""‚ùå Failed to retrieve historical data"")"
Evolve-main/tests/test_full_pipeline.py,57,"print(f""‚úÖ Live price retrieved: ${price:.2f}"")"
Evolve-main/tests/test_full_pipeline.py,59,"print(""‚ùå Failed to retrieve live price"")"
Evolve-main/tests/test_full_pipeline.py,65,"print(""\nüîÆ Testing Forecast Router..."")"
Evolve-main/tests/test_full_pipeline.py,92,"print(f""‚úÖ {model.upper()} forecast generated"")"
Evolve-main/tests/test_full_pipeline.py,93,"print(f""   Confidence: {result.get('confidence', 0):.2%}"")"
Evolve-main/tests/test_full_pipeline.py,94,"print(f""   Warnings: {len(result.get('warnings', []))}"")"
Evolve-main/tests/test_full_pipeline.py,96,"print(f""‚ùå {model.upper()} forecast failed"")"
Evolve-main/tests/test_full_pipeline.py,99,"print(f""‚ùå {model.upper()} forecast error: {e}"")"
Evolve-main/tests/test_full_pipeline.py,105,"print(""\nüìä Testing Backtest Engine..."")"
Evolve-main/tests/test_full_pipeline.py,138,"print(f""‚úÖ {strategy} backtest completed"")"
Evolve-main/tests/test_full_pipeline.py,139,"print(f""   Sharpe: {metrics.get('sharpe_ratio', 0):.2f}"")"
Evolve-main/tests/test_full_pipeline.py,140,"print(f""   Return: {metrics.get('total_return', 0):.2%}"")"
Evolve-main/tests/test_full_pipeline.py,141,"print(f""   Max DD: {metrics.get('max_drawdown', 0):.2%}"")"
Evolve-main/tests/test_full_pipeline.py,142,"print(f""   Win Rate: {metrics.get('win_rate', 0):.2%}"")"
Evolve-main/tests/test_full_pipeline.py,144,"print(f""‚ùå {strategy} backtest failed - no metrics"")"
Evolve-main/tests/test_full_pipeline.py,147,"print(f""‚ùå {strategy} backtest error: {e}"")"
Evolve-main/tests/test_full_pipeline.py,152,"print(f""‚ùå Backtest engine error: {e}"")"
Evolve-main/tests/test_full_pipeline.py,157,"print(""\nüíº Testing Trade Executor..."")"
Evolve-main/tests/test_full_pipeline.py,166,"print(f""‚úÖ Slippage calculation: {slippage:.4f}"")"
Evolve-main/tests/test_full_pipeline.py,170,"print(f""‚úÖ Market impact calculation: {impact:.4f}"")"
Evolve-main/tests/test_full_pipeline.py,174,"print(f""‚úÖ Commission calculation: ${commission:.2f}"")"
Evolve-main/tests/test_full_pipeline.py,186,"print(""‚úÖ Trade simulation successful"")"
Evolve-main/tests/test_full_pipeline.py,187,"print(f""   Execution price: ${result.execution_price:.2f}"")"
Evolve-main/tests/test_full_pipeline.py,188,"print(f""   Total cost: ${result.total_cost:.2f}"")"
Evolve-main/tests/test_full_pipeline.py,189,"print(f""   Slippage: {result.slippage:.4f}"")"
Evolve-main/tests/test_full_pipeline.py,190,"print(f""   Commission: ${result.commission:.2f}"")"
Evolve-main/tests/test_full_pipeline.py,192,"print(f""‚ùå Trade simulation failed: {result.error_message}"")"
Evolve-main/tests/test_full_pipeline.py,195,"print(f""‚ùå Trade execution error: {e}"")"
Evolve-main/tests/test_full_pipeline.py,201,"print(""\n‚öôÔ∏è Testing Self-Tuning Optimizer..."")"
Evolve-main/tests/test_full_pipeline.py,226,"print(""‚úÖ Performance recorded"")"
Evolve-main/tests/test_full_pipeline.py,236,"print(""‚úÖ Optimization completed"")"
Evolve-main/tests/test_full_pipeline.py,237,"print(f""   Confidence: {optimization_result.confidence:.2%}"")"
Evolve-main/tests/test_full_pipeline.py,238,"print(f""   Improvements: {optimization_result.improvement}"")"
Evolve-main/tests/test_full_pipeline.py,240,"print(""‚ÑπÔ∏è No optimization needed"")"
Evolve-main/tests/test_full_pipeline.py,244,"print(f""‚úÖ Optimization summary: {summary['total_optimizations']} total optimizations"")"
Evolve-main/tests/test_full_pipeline.py,250,"print(""\nü§ñ Testing Enhanced Prompt Agent..."")"
Evolve-main/tests/test_full_pipeline.py,264,"print(f""\nüìù Testing prompt: '{prompt}'"")"
Evolve-main/tests/test_full_pipeline.py,270,"print(f""‚úÖ Prompt processed successfully"")"
Evolve-main/tests/test_full_pipeline.py,271,"print(f""   Message: {response.message[:100]}..."")"
Evolve-main/tests/test_full_pipeline.py,272,"print(f""   Recommendations: {len(response.recommendations)}"")"
Evolve-main/tests/test_full_pipeline.py,273,"print(f""   Next actions: {len(response.next_actions)}"")"
Evolve-main/tests/test_full_pipeline.py,275,"print(f""‚ùå Prompt processing failed: {response.message}"")"
Evolve-main/tests/test_full_pipeline.py,278,"print(f""‚ùå Prompt processing error: {e}"")"
Evolve-main/tests/test_full_pipeline.py,284,"print(""\nüìä Testing System Metrics Panel..."")"
Evolve-main/tests/test_full_pipeline.py,302,"print(""‚úÖ System metrics panel function available"")"
Evolve-main/tests/test_full_pipeline.py,303,"print(f""   Test metrics: {test_metrics}"")"
Evolve-main/tests/test_full_pipeline.py,316,"print(f""   Calculated health score: {health_score}/100"")"
Evolve-main/tests/test_full_pipeline.py,319,"print(f""‚ùå System metrics error: {e}"")"
Evolve-main/tests/test_full_pipeline.py,325,"print(""üöÄ Starting Comprehensive Trading Pipeline Test"")"
Evolve-main/tests/test_full_pipeline.py,326,"print(""="" * 60)"
Evolve-main/tests/test_full_pipeline.py,340,"print(""\n"" + ""="" * 60)"
Evolve-main/tests/test_full_pipeline.py,341,"print(""üìã TEST SUMMARY"")"
Evolve-main/tests/test_full_pipeline.py,342,"print(""="" * 60)"
Evolve-main/tests/test_full_pipeline.py,349,"print(f""{component:20} {status}"")"
Evolve-main/tests/test_full_pipeline.py,353,"print(f""\nOverall: {passed}/{total} components passed"")"
Evolve-main/tests/test_full_pipeline.py,356,"print(""üéâ All tests passed! Trading pipeline is ready."")"
Evolve-main/tests/test_full_pipeline.py,358,"print(""‚ö†Ô∏è Some tests failed. Please review the issues above."")"
Evolve-main/tests/test_imports.py,13,"print(f""‚úÖ {module_name} imported successfully"")"
Evolve-main/tests/test_imports.py,16,"print(f""‚ùå {module_name} failed to import: {e}"")"
Evolve-main/tests/test_imports.py,22,"print(""Testing critical imports..."")"
Evolve-main/tests/test_imports.py,23,"print(""="" * 50)"
Evolve-main/tests/test_imports.py,41,print()
Evolve-main/tests/test_imports.py,43,"print(""="" * 50)"
Evolve-main/tests/test_imports.py,44,"print(f""Results: {success_count}/{total_count} modules imported successfully"")"
Evolve-main/tests/test_imports.py,47,"print(""üéâ All imports successful! The app should work now."")"
Evolve-main/tests/test_imports.py,49,"print(""‚ö†Ô∏è  Some imports failed. Check the errors above."")"
Evolve-main/tests/test_institutional_upgrade.py,710,except:
Evolve-main/tests/test_institutional_upgrade.py,839,"print(""üöÄ Evolve Trading System - Institutional-Level Upgrade Test"")"
Evolve-main/tests/test_institutional_upgrade.py,840,"print(""=""*80)"
Evolve-main/tests/test_return_statements.py,17,"print(""üîä Testing Voice Prompt Agent..."")"
Evolve-main/tests/test_return_statements.py,27,"print(""  ‚úÖ _extract_additional_parameters returns structured output"")"
Evolve-main/tests/test_return_statements.py,32,"print(""  ‚úÖ _update_voice_history returns structured output"")"
Evolve-main/tests/test_return_statements.py,37,"print(""  ‚úÖ clear_voice_history returns structured output"")"
Evolve-main/tests/test_return_statements.py,46,"print(""üìä Testing System Status..."")"
Evolve-main/tests/test_return_statements.py,56,"print(""  ‚úÖ save_status_report returns structured output"")"
Evolve-main/tests/test_return_statements.py,61,"print(""  ‚úÖ print_status returns structured output"")"
Evolve-main/tests/test_return_statements.py,70,"print(""üîó Testing Unified Interface..."")"
Evolve-main/tests/test_return_statements.py,80,"print(""  ‚úÖ _initialize_components returns structured output"")"
Evolve-main/tests/test_return_statements.py,85,"print(""  ‚úÖ _initialize_fallback_components returns structured output"")"
Evolve-main/tests/test_return_statements.py,90,"print(""  ‚úÖ _setup_logging returns structured output"")"
Evolve-main/tests/test_return_statements.py,99,"print(""ü§ñ Testing RL Trader..."")"
Evolve-main/tests/test_return_statements.py,120,"print(""  ‚úÖ _update_portfolio_value returns structured output"")"
Evolve-main/tests/test_return_statements.py,129,"print(""üèÉ Testing Runner..."")"
Evolve-main/tests/test_return_statements.py,137,"print(""  ‚úÖ display_system_status returns structured output"")"
Evolve-main/tests/test_return_statements.py,146,"print(""‚öôÔ∏è Testing Config Loader..."")"
Evolve-main/tests/test_return_statements.py,155,"print(""  ‚úÖ __init__ sets status attribute"")"
Evolve-main/tests/test_return_statements.py,164,"print(""üéÆ Testing Demo Interface..."")"
Evolve-main/tests/test_return_statements.py,172,"print(""  ‚úÖ demo_unified_interface returns structured output"")"
Evolve-main/tests/test_return_statements.py,177,"print(""  ‚úÖ show_usage_examples returns structured output"")"
Evolve-main/tests/test_return_statements.py,182,"print(""  ‚úÖ main returns structured output"")"
Evolve-main/tests/test_return_statements.py,191,"print(""üß™ COMPREHENSIVE RETURN STATEMENT TEST"")"
Evolve-main/tests/test_return_statements.py,192,"print(""="" * 60)"
Evolve-main/tests/test_return_statements.py,222,"print(""\n"" + ""="" * 60)"
Evolve-main/tests/test_return_statements.py,223,"print(""üìä TEST RESULTS SUMMARY"")"
Evolve-main/tests/test_return_statements.py,224,"print(""="" * 60)"
Evolve-main/tests/test_return_statements.py,225,"print(f""‚úÖ Passed: {passed}"")"
Evolve-main/tests/test_return_statements.py,226,"print(f""‚ùå Failed: {failed}"")"
Evolve-main/tests/test_return_statements.py,227,"print(f""üìà Success Rate: {(passed/(passed+failed)*100):.1f}%"")"
Evolve-main/tests/test_return_statements.py,230,"print(""\nüéâ ALL TESTS PASSED! Return statement compliance: 100%"")"
Evolve-main/tests/test_return_statements.py,233,"print(f""\n‚ö†Ô∏è {failed} tests failed. Check individual results below."")"
Evolve-main/tests/test_return_statements.py,236,"print(f""  ‚ùå {result['status']}: {result.get('error', 'Unknown error')}"")"
Evolve-main/tests/test_return_statements.py,242,"print(f""\nFinal result: {result['status']}"")"
Evolve-main/tests/test_rl.py,6,"print(""‚úÖ RL module imported successfully!"")"
Evolve-main/tests/test_rl.py,8,"print(f""‚ùå RL module import failed: {e}"")"
Evolve-main/tests/test_rl.py,12,"print(""‚úÖ TFT model imported successfully!"")"
Evolve-main/tests/test_rl.py,14,"print(f""‚ùå TFT model import failed: {e}"")"
Evolve-main/tests/test_rl.py,18,"print(""‚úÖ Causal model imported successfully!"")"
Evolve-main/tests/test_rl.py,20,"print(f""‚ùå Causal model import failed: {e}"")"
Evolve-main/tests/test_rl.py,22,"print(""Test completed!"")"
Evolve-main/tests/test_system_status.py,270,"print(""\nDETAILED RESULTS:"")"
Evolve-main/tests/test_system_status.py,271,"print(""=""*60)"
Evolve-main/tests/test_system_status.py,273,print(detail)
Evolve-main/tests/test_system_status.py,275,"print(f""\nSUMMARY:"")"
Evolve-main/tests/test_system_status.py,276,"print(f""Success Rate: {results['success_rate']:.1f}%"")"
Evolve-main/tests/test_system_status.py,277,"print(f""Total: {results['total']} | Success: {results['success']} | Failures: {results['failure']} | Warnings: {results['warning']}"")"
Evolve-main/tests/test_system_status.py,289,"print(f""\nSYSTEM STATUS: {status}"")"
Evolve-main/tests/test_system_upgrade.py,325,"print(""üöÄ Evolve Trading System - Upgrade Test Suite"")"
Evolve-main/tests/test_system_upgrade.py,326,"print(""="" * 50)"
Evolve-main/tests/test_system_upgrade.py,335,"print(""\n"" + ""="" * 50)"
Evolve-main/tests/test_system_upgrade.py,336,"print(""üìä TEST RESULTS SUMMARY"")"
Evolve-main/tests/test_system_upgrade.py,337,"print(""="" * 50)"
Evolve-main/tests/test_system_upgrade.py,340,"print(f""Total Tests: {summary['total_tests']}"")"
Evolve-main/tests/test_system_upgrade.py,341,"print(f""Passed: {summary['passed_tests']}"")"
Evolve-main/tests/test_system_upgrade.py,342,"print(f""Failed: {summary['failed_tests']}"")"
Evolve-main/tests/test_system_upgrade.py,343,"print(f""Success Rate: {summary['success_rate']:.1f}%"")"
Evolve-main/tests/test_system_upgrade.py,344,"print(f""Upgrade Status: {report['upgrade_status']}"")"
Evolve-main/tests/test_system_upgrade.py,348,"print(""\n‚ùå FAILED TESTS:"")"
Evolve-main/tests/test_system_upgrade.py,351,"print(f""  - {test_name}: {result['error']}"")"
Evolve-main/tests/test_system_upgrade.py,355,"print(f""\n‚úÖ PASSED TESTS: {summary['passed_tests']}"")"
Evolve-main/tests/test_system_upgrade.py,357,"print(""\n"" + ""="" * 50)"
Evolve-main/tests/test_system_upgrade.py,360,"print(""üéâ SYSTEM UPGRADE COMPLETED SUCCESSFULLY!"")"
Evolve-main/tests/test_system_upgrade.py,361,"print(""All components now return proper results and have fallback logic."")"
Evolve-main/tests/test_system_upgrade.py,363,"print(""‚ö†Ô∏è SYSTEM UPGRADE PARTIALLY COMPLETED"")"
Evolve-main/tests/test_system_upgrade.py,364,"print(""Some components may need additional attention."")"
Evolve-main/tests/test_unified_interface.py,17,"print(""üß™ Testing Unified Interface"")"
Evolve-main/tests/test_unified_interface.py,18,"print(""="" * 50)"
Evolve-main/tests/test_unified_interface.py,23,"print(""‚úÖ Successfully imported UnifiedInterface"")"
Evolve-main/tests/test_unified_interface.py,27,"print(""‚úÖ Successfully initialized interface"")"
Evolve-main/tests/test_unified_interface.py,30,"print(""\nüìã Testing help command..."")"
Evolve-main/tests/test_unified_interface.py,33,"print(""‚úÖ Help command works"")"
Evolve-main/tests/test_unified_interface.py,35,"print(f""‚ùå Help command failed: {result.get('error')}"")"
Evolve-main/tests/test_unified_interface.py,38,"print(""\nüìà Testing forecast command..."")"
Evolve-main/tests/test_unified_interface.py,41,"print(""‚úÖ Forecast command works"")"
Evolve-main/tests/test_unified_interface.py,43,"print(f""‚ùå Forecast command failed: {result.get('error')}"")"
Evolve-main/tests/test_unified_interface.py,46,"print(""\nüéØ Testing strategy command..."")"
Evolve-main/tests/test_unified_interface.py,49,"print(""‚úÖ Strategy command works"")"
Evolve-main/tests/test_unified_interface.py,51,"print(f""‚ùå Strategy command failed: {result.get('error')}"")"
Evolve-main/tests/test_unified_interface.py,54,"print(""\nü§ñ Testing agent command..."")"
Evolve-main/tests/test_unified_interface.py,57,"print(""‚úÖ Agent command works"")"
Evolve-main/tests/test_unified_interface.py,59,"print(f""‚ùå Agent command failed: {result.get('error')}"")"
Evolve-main/tests/test_unified_interface.py,62,"print(""\n‚öôÔ∏è Testing status command..."")"
Evolve-main/tests/test_unified_interface.py,65,"print(""‚úÖ Status command works"")"
Evolve-main/tests/test_unified_interface.py,67,"print(f""‚ùå Status command failed: {result.get('error')}"")"
Evolve-main/tests/test_unified_interface.py,69,"print(""\nüéâ All tests completed!"")"
Evolve-main/tests/test_unified_interface.py,72,"print(f""‚ùå Import error: {e}"")"
Evolve-main/tests/test_unified_interface.py,73,"print(""Make sure unified_interface.py is in the current directory"")"
Evolve-main/tests/test_unified_interface.py,75,"print(f""‚ùå Unexpected error: {e}"")"
Evolve-main/tests/test_unified_interface.py,79,"print(""\nüåê Testing Streamlit import..."")"
Evolve-main/tests/test_unified_interface.py,82,"print(""‚úÖ Streamlit is available"")"
Evolve-main/tests/test_unified_interface.py,86,"print(""‚úÖ Streamlit UI functions are available"")"
Evolve-main/tests/test_unified_interface.py,89,"print(""‚ùå Streamlit not available - install with: pip install streamlit"")"
Evolve-main/tests/test_unified_interface.py,91,"print(f""‚ùå Streamlit test error: {e}"")"
Evolve-main/tests/test_unified_interface.py,98,"print(""\nüìã Test Summary:"")"
Evolve-main/tests/test_unified_interface.py,99,"print(""If all tests passed, you can:"")"
Evolve-main/tests/test_unified_interface.py,100,"print(""1. Use command line: python unified_interface.py --terminal"")"
Evolve-main/tests/test_unified_interface.py,101,"print(""2. Use Streamlit: streamlit run app.py"")"
Evolve-main/tests/test_unified_interface.py,102,"print(""3. Execute commands: python unified_interface.py --command 'help'"")"
Evolve-main/tests/unit/test_tcn_model.py,197,model.eval()
Evolve-main/tools/encoding_utils.py,168,"print(""\nNon-UTF-8 files found:"")"
Evolve-main/tools/encoding_utils.py,170,"print(f""- {file_path} ({encoding})"")"
Evolve-main/trading/demo_live_market_runner.py,21,"print(f""\nüõë Received signal {signum}, shutting down..."")"
Evolve-main/trading/demo_live_market_runner.py,31,"print(""üöÄ Live Market Runner Demo"")"
Evolve-main/trading/demo_live_market_runner.py,32,"print(""="" * 60)"
Evolve-main/trading/demo_live_market_runner.py,50,"print(f""‚úÖ LiveMarketRunner created"")"
Evolve-main/trading/demo_live_market_runner.py,51,"print(f""üìä Symbols: {config['symbols']}"")"
Evolve-main/trading/demo_live_market_runner.py,52,"print(f""üîÑ Update interval: 30 seconds"")"
Evolve-main/trading/demo_live_market_runner.py,53,"print(f""‚è∞ Trigger check interval: 10 seconds"")"
Evolve-main/trading/demo_live_market_runner.py,56,"print(f""\nüîÑ Starting LiveMarketRunner..."")"
Evolve-main/trading/demo_live_market_runner.py,59,"print(f""‚úÖ LiveMarketRunner started successfully!"")"
Evolve-main/trading/demo_live_market_runner.py,60,"print(f""   Press Ctrl+C to stop"")"
Evolve-main/trading/demo_live_market_runner.py,61,"print(f""   Logs: trading/live/logs/live_market_runner.log"")"
Evolve-main/trading/demo_live_market_runner.py,69,"print(f""\nüìä Current State ({state['timestamp']}):"")"
Evolve-main/trading/demo_live_market_runner.py,70,"print(f""   Running: {state['running']}"")"
Evolve-main/trading/demo_live_market_runner.py,71,"print(f""   Forecast count: {state['forecast_count']}"")"
Evolve-main/trading/demo_live_market_runner.py,74,"print(f""\nüí∞ Symbol Data:"")"
Evolve-main/trading/demo_live_market_runner.py,76,"print(f""   {symbol}: ${data['price']:.2f} """
Evolve-main/trading/demo_live_market_runner.py,82,"print(f""\nüìà Forecast Accuracy:"")"
Evolve-main/trading/demo_live_market_runner.py,83,"print(f""   Total forecasts: {accuracy['total_forecasts']}"")"
Evolve-main/trading/demo_live_market_runner.py,84,"print(f""   Completed: {accuracy['completed_forecasts']}"")"
Evolve-main/trading/demo_live_market_runner.py,85,"print(f""   Average accuracy: {accuracy['avg_accuracy']:.2%}"")"
Evolve-main/trading/demo_live_market_runner.py,91,"print(f""\nüõë Shutting down..."")"
Evolve-main/trading/demo_live_market_runner.py,94,"print(f""‚úÖ LiveMarketRunner stopped"")"
Evolve-main/trading/demo_live_market_runner.py,98,"print(f""\nüìä Forecast Tracking Demo"")"
Evolve-main/trading/demo_live_market_runner.py,99,"print(""="" * 40)"
Evolve-main/trading/demo_live_market_runner.py,129,"print(f""‚úÖ Added {len(sample_forecasts)} sample forecasts"")"
Evolve-main/trading/demo_live_market_runner.py,133,"print(f""üìà Forecast Statistics:"")"
Evolve-main/trading/demo_live_market_runner.py,134,"print(f""   Total forecasts: {accuracy['total_forecasts']}"")"
Evolve-main/trading/demo_live_market_runner.py,135,"print(f""   Completed: {accuracy['completed_forecasts']}"")"
Evolve-main/trading/demo_live_market_runner.py,136,"print(f""   Average accuracy: {accuracy['avg_accuracy']:.2%}"")"
Evolve-main/trading/demo_live_market_runner.py,140,"print(f""\nüçé AAPL Forecasts:"")"
Evolve-main/trading/demo_live_market_runner.py,141,"print(f""   Total: {aapl_accuracy['total_forecasts']}"")"
Evolve-main/trading/demo_live_market_runner.py,142,"print(f""   Completed: {aapl_accuracy['completed_forecasts']}"")"
Evolve-main/trading/demo_live_market_runner.py,143,"print(f""   Average accuracy: {aapl_accuracy['avg_accuracy']:.2%}"")"
Evolve-main/trading/demo_live_market_runner.py,147,"print(f""\nü§ñ Agent Triggering Demo"")"
Evolve-main/trading/demo_live_market_runner.py,148,"print(""="" * 40)"
Evolve-main/trading/demo_live_market_runner.py,154,"print(f""üìã Trigger Configurations:"")"
Evolve-main/trading/demo_live_market_runner.py,156,"print(f""   {agent_name}:"")"
Evolve-main/trading/demo_live_market_runner.py,157,"print(f""     Type: {config.trigger_type.value}"")"
Evolve-main/trading/demo_live_market_runner.py,158,"print(f""     Enabled: {config.enabled}"")"
Evolve-main/trading/demo_live_market_runner.py,160,"print(f""     Interval: {config.interval_seconds} seconds"")"
Evolve-main/trading/demo_live_market_runner.py,162,"print(f""     Threshold: {config.price_move_threshold:.1%}"")"
Evolve-main/trading/demo_live_market_runner.py,165,"print(f""\nüîç Testing Trigger Conditions:"")"
Evolve-main/trading/demo_live_market_runner.py,181,"print(f""   Time-based trigger: {should_trigger}"")"
Evolve-main/trading/demo_live_market_runner.py,202,"print(f""   Price move trigger: {should_trigger}"")"
Evolve-main/trading/demo_live_market_runner.py,206,"print(""üéØ Live Market Runner Demo Suite"")"
Evolve-main/trading/demo_live_market_runner.py,207,"print(""="" * 60)"
Evolve-main/trading/demo_live_market_runner.py,216,"print(f""\n‚úÖ Demo completed!"")"
Evolve-main/trading/demo_live_market_runner.py,217,"print(f""üìã Demo Summary:"")"
Evolve-main/trading/demo_live_market_runner.py,218,"print(f""   ‚úÖ Forecast tracking functionality demonstrated"")"
Evolve-main/trading/demo_live_market_runner.py,219,"print(f""   ‚úÖ Agent triggering logic tested"")"
Evolve-main/trading/demo_live_market_runner.py,220,"print(f""   ‚úÖ Live data streaming ready for use"")"
Evolve-main/trading/demo_live_market_runner.py,221,"print(f""   üîÆ Ready for live market execution"")"
Evolve-main/trading/launch_live_market_runner.py,73,"print(""üöÄ Launching Live Market Runner"")"
Evolve-main/trading/launch_live_market_runner.py,74,"print(""="" * 50)"
Evolve-main/trading/launch_live_market_runner.py,86,"print(f""‚úÖ Live Market Runner created"")"
Evolve-main/trading/launch_live_market_runner.py,87,"print(f""üìä Symbols: {config['symbols']}"")"
Evolve-main/trading/launch_live_market_runner.py,88,"print(f""ü§ñ Agents: {list(config['triggers'].keys())}"")"
Evolve-main/trading/launch_live_market_runner.py,92,"print(f""\nüõë Received signal {signum}, shutting down..."")"
Evolve-main/trading/launch_live_market_runner.py,100,"print(f""\nüîÑ Starting Live Market Runner..."")"
Evolve-main/trading/launch_live_market_runner.py,103,"print(f""‚úÖ Live Market Runner is running!"")"
Evolve-main/trading/launch_live_market_runner.py,104,"print(f""   Press Ctrl+C to stop"")"
Evolve-main/trading/launch_live_market_runner.py,105,"print(f""   Logs: trading/live/logs/"")"
Evolve-main/trading/launch_live_market_runner.py,106,"print(f""   Forecasts: trading/live/forecast_results.json"")"
Evolve-main/trading/launch_live_market_runner.py,113,"print(f""\nüõë Shutting down..."")"
Evolve-main/trading/launch_live_market_runner.py,116,"print(f""‚úÖ Live Market Runner stopped"")"
Evolve-main/trading/test_live_market_runner.py,17,"print(""üß™ Testing Live Market Runner"")"
Evolve-main/trading/test_live_market_runner.py,18,"print(""="" * 50)"
Evolve-main/trading/test_live_market_runner.py,32,"print(""‚úÖ LiveMarketRunner created successfully"")"
Evolve-main/trading/test_live_market_runner.py,35,"print(""\nüìã Testing initialization..."")"
Evolve-main/trading/test_live_market_runner.py,39,"print(f""üìä Live data symbols: {list(runner.live_data.keys())}"")"
Evolve-main/trading/test_live_market_runner.py,41,"print(f""   {symbol}: ${data['price']:.2f}"")"
Evolve-main/trading/test_live_market_runner.py,44,"print(f""\nüîß Testing trigger configurations..."")"
Evolve-main/trading/test_live_market_runner.py,45,"print(f""   Trigger configs: {list(runner.trigger_configs.keys())}"")"
Evolve-main/trading/test_live_market_runner.py,48,"print(f""   {agent_name}: {config.trigger_type.value}, enabled: {config.enabled}"")"
Evolve-main/trading/test_live_market_runner.py,51,"print(f""\nüìà Testing forecast tracking..."")"
Evolve-main/trading/test_live_market_runner.py,64,"print(f""   Added test forecast for {test_forecast.symbol}"")"
Evolve-main/trading/test_live_market_runner.py,68,"print(f""   Total forecasts: {accuracy['total_forecasts']}"")"
Evolve-main/trading/test_live_market_runner.py,69,"print(f""   Completed forecasts: {accuracy['completed_forecasts']}"")"
Evolve-main/trading/test_live_market_runner.py,70,"print(f""   Average accuracy: {accuracy['avg_accuracy']:.2%}"")"
Evolve-main/trading/test_live_market_runner.py,73,"print(f""\nüìä Testing state retrieval..."")"
Evolve-main/trading/test_live_market_runner.py,75,"print(f""   State keys: {list(state.keys())}"")"
Evolve-main/trading/test_live_market_runner.py,76,"print(f""   Running: {state['running']}"")"
Evolve-main/trading/test_live_market_runner.py,77,"print(f""   Forecast count: {state['forecast_count']}"")"
Evolve-main/trading/test_live_market_runner.py,79,"print(""\n‚úÖ All tests completed!"")"
Evolve-main/trading/test_live_market_runner.py,83,"print(""\nüìà Testing Forecast Tracking"")"
Evolve-main/trading/test_live_market_runner.py,84,"print(""="" * 40)"
Evolve-main/trading/test_live_market_runner.py,118,"print(f""‚úÖ Added {len(test_forecasts)} test forecasts"")"
Evolve-main/trading/test_live_market_runner.py,122,"print(f""üìä Overall accuracy: {accuracy['avg_accuracy']:.2%}"")"
Evolve-main/trading/test_live_market_runner.py,126,"print(f""üçé AAPL accuracy: {aapl_accuracy['avg_accuracy']:.2%}"")"
Evolve-main/trading/test_live_market_runner.py,130,"print(f""ü§ñ Model builder forecasts: {len(model_forecasts)}"")"
Evolve-main/trading/test_live_market_runner.py,132,"print(""‚úÖ Forecast tracking tests completed!"")"
Evolve-main/trading/test_live_market_runner.py,136,"print(""\nü§ñ Testing Agent Triggering"")"
Evolve-main/trading/test_live_market_runner.py,137,"print(""="" * 40)"
Evolve-main/trading/test_live_market_runner.py,158,"print(f""   Time-based trigger (no previous): {should_trigger}"")"
Evolve-main/trading/test_live_market_runner.py,167,"print(f""   Time-based trigger (recent): {should_trigger}"")"
Evolve-main/trading/test_live_market_runner.py,188,"print(f""   Price move trigger (1.5% change): {should_trigger}"")"
Evolve-main/trading/test_live_market_runner.py,197,"print(f""   Price move trigger (0.5% change): {should_trigger}"")"
Evolve-main/trading/test_live_market_runner.py,199,"print(""‚úÖ Agent triggering tests completed!"")"
Evolve-main/trading/test_live_market_runner.py,207,"print(f""\nüéâ All tests completed successfully!"")"
Evolve-main/trading/agents/agent_loop_manager.py,637,"print(""\nShutting down..."")"
Evolve-main/trading/agents/agent_loop_manager.py,639,"print(f""Error: {e}"")"
Evolve-main/trading/agents/demo_leaderboard.py,88,"print(""\n"" + ""=""*60)"
Evolve-main/trading/agents/demo_leaderboard.py,89,"print(""BASIC LEADERBOARD USAGE"")"
Evolve-main/trading/agents/demo_leaderboard.py,90,"print(""=""*60)"
Evolve-main/trading/agents/demo_leaderboard.py,110,"print(""\nTop 5 Agents by Sharpe Ratio:"")"
Evolve-main/trading/agents/demo_leaderboard.py,113,"print(f""{i}. {agent['agent_name']}: Sharpe={agent['sharpe_ratio']:.2f}, """
Evolve-main/trading/agents/demo_leaderboard.py,117,"print(f""\nActive Agents: {leaderboard.get_active_agents()}"")"
Evolve-main/trading/agents/demo_leaderboard.py,118,"print(f""Deprecated Agents: {leaderboard.get_deprecated_agents()}"")"
Evolve-main/trading/agents/demo_leaderboard.py,121,"print(""\nLeaderboard as DataFrame:"")"
Evolve-main/trading/agents/demo_leaderboard.py,123,"print(df[['agent_name', 'sharpe_ratio', 'max_drawdown', 'win_rate', 'total_return', 'status']].to_string(index=False))"
Evolve-main/trading/agents/demo_leaderboard.py,127,"print(""\n"" + ""=""*60)"
Evolve-main/trading/agents/demo_leaderboard.py,128,"print(""DEPRECATION SCENARIOS"")"
Evolve-main/trading/agents/demo_leaderboard.py,129,"print(""=""*60)"
Evolve-main/trading/agents/demo_leaderboard.py,142,"print(f""Added {agent_name}: Sharpe={sharpe:.2f}, Drawdown={drawdown:.2%}, WinRate={win_rate:.2%}"")"
Evolve-main/trading/agents/demo_leaderboard.py,144,"print(f""\nDeprecated Agents: {leaderboard.get_deprecated_agents()}"")"
Evolve-main/trading/agents/demo_leaderboard.py,145,"print(f""Active Agents: {leaderboard.get_active_agents()}"")"
Evolve-main/trading/agents/demo_leaderboard.py,149,"print(""\n"" + ""=""*60)"
Evolve-main/trading/agents/demo_leaderboard.py,150,"print(""AGENT MANAGER INTEGRATION"")"
Evolve-main/trading/agents/demo_leaderboard.py,151,"print(""=""*60)"
Evolve-main/trading/agents/demo_leaderboard.py,176,"print(""\nTop 3 Agents via AgentManager:"")"
Evolve-main/trading/agents/demo_leaderboard.py,179,"print(f""{i}. {agent['agent_name']}: Sharpe={agent['sharpe_ratio']:.2f}, """
Evolve-main/trading/agents/demo_leaderboard.py,184,"print(f""\nDeprecated Agents: {deprecated}"")"
Evolve-main/trading/agents/demo_leaderboard.py,188,"print(f""Active Agents: {active}"")"
Evolve-main/trading/agents/demo_leaderboard.py,192,"print(""\n"" + ""=""*60)"
Evolve-main/trading/agents/demo_leaderboard.py,193,"print(""LEADERBOARD ANALYTICS"")"
Evolve-main/trading/agents/demo_leaderboard.py,194,"print(""=""*60)"
Evolve-main/trading/agents/demo_leaderboard.py,213,"print(""\nPerformance Summary:"")"
Evolve-main/trading/agents/demo_leaderboard.py,214,"print(f""Total Agents: {len(df)}"")"
Evolve-main/trading/agents/demo_leaderboard.py,215,"print(f""Active Agents: {len(df[df['status'] == 'active'])}"")"
Evolve-main/trading/agents/demo_leaderboard.py,216,"print(f""Deprecated Agents: {len(df[df['status'] == 'deprecated'])}"")"
Evolve-main/trading/agents/demo_leaderboard.py,218,"print(""\nPerformance Statistics:"")"
Evolve-main/trading/agents/demo_leaderboard.py,219,"print(f""Average Sharpe Ratio: {df['sharpe_ratio'].mean():.2f}"")"
Evolve-main/trading/agents/demo_leaderboard.py,220,"print(f""Average Max Drawdown: {df['max_drawdown'].mean():.2%}"")"
Evolve-main/trading/agents/demo_leaderboard.py,221,"print(f""Average Win Rate: {df['win_rate'].mean():.2%}"")"
Evolve-main/trading/agents/demo_leaderboard.py,222,"print(f""Average Total Return: {df['total_return'].mean():.2%}"")"
Evolve-main/trading/agents/demo_leaderboard.py,225,"print(""\nBest Performers by Metric:"")"
Evolve-main/trading/agents/demo_leaderboard.py,230,"print(f""Best Sharpe: {best_sharpe['agent_name']} ({best_sharpe['sharpe_ratio']:.2f})"")"
Evolve-main/trading/agents/demo_leaderboard.py,231,"print(f""Best Return: {best_return['agent_name']} ({best_return['total_return']:.2%})"")"
Evolve-main/trading/agents/demo_leaderboard.py,232,"print(f""Best Win Rate: {best_return['agent_name']} ({best_win_rate['win_rate']:.2%})"")"
Evolve-main/trading/agents/demo_leaderboard.py,236,"print(""\n"" + ""=""*60)"
Evolve-main/trading/agents/demo_leaderboard.py,237,"print(""REPORTING INTEGRATION"")"
Evolve-main/trading/agents/demo_leaderboard.py,238,"print(""=""*60)"
Evolve-main/trading/agents/demo_leaderboard.py,272,"print(""\nReport Data Structure:"")"
Evolve-main/trading/agents/demo_leaderboard.py,274,"print(f""\n{section.upper()}:"")"
Evolve-main/trading/agents/demo_leaderboard.py,277,"print(f""  {key}: {value}"")"
Evolve-main/trading/agents/demo_leaderboard.py,279,"print(f""  {len(data)} items"")"
Evolve-main/trading/agents/demo_leaderboard.py,281,"print(f""  {data}"")"
Evolve-main/trading/agents/demo_leaderboard.py,285,"print(""AGENT LEADERBOARD DEMO"")"
Evolve-main/trading/agents/demo_leaderboard.py,286,"print(""=""*60)"
Evolve-main/trading/agents/demo_leaderboard.py,295,"print(""\n"" + ""=""*60)"
Evolve-main/trading/agents/demo_leaderboard.py,296,"print(""DEMO COMPLETED"")"
Evolve-main/trading/agents/demo_leaderboard.py,297,"print(""=""*60)"
Evolve-main/trading/agents/demo_leaderboard.py,298,"print(""\nKey Features Demonstrated:"")"
Evolve-main/trading/agents/demo_leaderboard.py,299,"print(""‚úì Basic leaderboard functionality"")"
Evolve-main/trading/agents/demo_leaderboard.py,300,"print(""‚úì Performance tracking and updates"")"
Evolve-main/trading/agents/demo_leaderboard.py,301,"print(""‚úì Automatic deprecation of underperformers"")"
Evolve-main/trading/agents/demo_leaderboard.py,302,"print(""‚úì AgentManager integration"")"
Evolve-main/trading/agents/demo_leaderboard.py,303,"print(""‚úì Analytics and reporting capabilities"")"
Evolve-main/trading/agents/demo_leaderboard.py,304,"print(""‚úì DataFrame export for dashboards"")"
Evolve-main/trading/agents/demo_leaderboard.py,305,"print(""‚úì Performance history tracking"")"
Evolve-main/trading/agents/demo_risk_controls.py,152,"print(""üõ°Ô∏è Risk Controls Demo"")"
Evolve-main/trading/agents/demo_risk_controls.py,153,"print(""="" * 60)"
Evolve-main/trading/agents/demo_risk_controls.py,197,"print(f""‚úÖ ExecutionAgent initialized with risk controls"")"
Evolve-main/trading/agents/demo_risk_controls.py,198,"print(f""üìä Default risk controls: {execution_agent.default_risk_controls.to_dict()}"")"
Evolve-main/trading/agents/demo_risk_controls.py,202,"print(f""\nüìà Created {len(signals)} signals with custom risk controls"")"
Evolve-main/trading/agents/demo_risk_controls.py,205,"print(f""  Signal {i}: {signal.symbol} - {signal.strategy}"")"
Evolve-main/trading/agents/demo_risk_controls.py,206,"print(f""    Risk Controls: {signal.risk_controls.to_dict()}"")"
Evolve-main/trading/agents/demo_risk_controls.py,209,"print(""\nüîÑ Executing initial trades..."")"
Evolve-main/trading/agents/demo_risk_controls.py,210,"print(""-"" * 40)"
Evolve-main/trading/agents/demo_risk_controls.py,226,"print(""‚úÖ Initial trades executed successfully"")"
Evolve-main/trading/agents/demo_risk_controls.py,227,"print(f""  Portfolio status: {result.data['portfolio_state']}"")"
Evolve-main/trading/agents/demo_risk_controls.py,228,"print(f""  Risk metrics: {result.data['risk_metrics']}"")"
Evolve-main/trading/agents/demo_risk_controls.py,230,"print(f""‚ùå Initial trades failed: {result.message}"")"
Evolve-main/trading/agents/demo_risk_controls.py,236,"print(f""\nüß™ Testing {len(scenarios)} market scenarios..."")"
Evolve-main/trading/agents/demo_risk_controls.py,237,"print(""="" * 60)"
Evolve-main/trading/agents/demo_risk_controls.py,240,"print(f""\nüìä Scenario {i}: {scenario['name']}"")"
Evolve-main/trading/agents/demo_risk_controls.py,241,"print(f""   Description: {scenario['description']}"")"
Evolve-main/trading/agents/demo_risk_controls.py,242,"print(""-"" * 40)"
Evolve-main/trading/agents/demo_risk_controls.py,253,"print(""‚úÖ Risk monitoring completed"")"
Evolve-main/trading/agents/demo_risk_controls.py,259,"print(f""  Cash: ${portfolio_state['cash']:.2f}"")"
Evolve-main/trading/agents/demo_risk_controls.py,260,"print(f""  Equity: ${portfolio_state['equity']:.2f}"")"
Evolve-main/trading/agents/demo_risk_controls.py,261,"print(f""  Unrealized PnL: ${portfolio_state['unrealized_pnl']:.2f}"")"
Evolve-main/trading/agents/demo_risk_controls.py,262,"print(f""  Daily PnL: ${risk_metrics['daily_pnl']:.2f}"")"
Evolve-main/trading/agents/demo_risk_controls.py,263,"print(f""  Open positions: {len(portfolio_state['open_positions'])}"")"
Evolve-main/trading/agents/demo_risk_controls.py,267,"print(f""    {position['symbol']}: {position['size']:.2f} shares """
Evolve-main/trading/agents/demo_risk_controls.py,271,"print(f""‚ùå Risk monitoring failed: {result.message}"")"
Evolve-main/trading/agents/demo_risk_controls.py,274,"print(f""\nüìã Exit Events Summary"")"
Evolve-main/trading/agents/demo_risk_controls.py,275,"print(""="" * 60)"
Evolve-main/trading/agents/demo_risk_controls.py,278,"print(f""Total exit events: {len(exit_events)}"")"
Evolve-main/trading/agents/demo_risk_controls.py,282,"print(f""  {exit_data['symbol']}: {exit_data['exit_reason']} """
Evolve-main/trading/agents/demo_risk_controls.py,287,"print(f""\nüìä Risk Management Summary"")"
Evolve-main/trading/agents/demo_risk_controls.py,288,"print(""="" * 60)"
Evolve-main/trading/agents/demo_risk_controls.py,291,"print(f""Total exits: {risk_summary['total_exits']}"")"
Evolve-main/trading/agents/demo_risk_controls.py,292,"print(f""Total PnL: ${risk_summary['total_pnl']:.2f}"")"
Evolve-main/trading/agents/demo_risk_controls.py,293,"print(f""Daily PnL: ${risk_summary['daily_pnl']:.2f}"")"
Evolve-main/trading/agents/demo_risk_controls.py,295,"print(""\nExit reasons breakdown:"")"
Evolve-main/trading/agents/demo_risk_controls.py,297,"print(f""  {reason}: {count} exits"")"
Evolve-main/trading/agents/demo_risk_controls.py,299,"print(""\nPnL by exit reason:"")"
Evolve-main/trading/agents/demo_risk_controls.py,301,"print(f""  {reason}: ${data['total']:.2f} (avg: ${data['avg']:.2f})"")"
Evolve-main/trading/agents/demo_risk_controls.py,303,"print(f""\n‚úÖ Risk controls demo completed!"")"
Evolve-main/trading/agents/demo_risk_controls.py,307,"print(""\nüéØ Risk Threshold Types Demo"")"
Evolve-main/trading/agents/demo_risk_controls.py,308,"print(""="" * 60)"
Evolve-main/trading/agents/demo_risk_controls.py,332,"print(f""\nüìä Testing {threshold_name} threshold:"")"
Evolve-main/trading/agents/demo_risk_controls.py,371,"print(f""  Entry price: ${signal.entry_price:.2f}"")"
Evolve-main/trading/agents/demo_risk_controls.py,372,"print(f""  Stop loss price: ${stop_loss_price:.2f}"")"
Evolve-main/trading/agents/demo_risk_controls.py,373,"print(f""  Stop loss distance: ${abs(stop_loss_price - signal.entry_price):.2f}"")"
Evolve-main/trading/agents/demo_risk_controls.py,375,"print(f""\n‚úÖ Threshold types demo completed!"")"
Evolve-main/trading/agents/demo_risk_controls.py,379,"print(""\nüö® Emergency Exits Demo"")"
Evolve-main/trading/agents/demo_risk_controls.py,380,"print(""="" * 60)"
Evolve-main/trading/agents/demo_risk_controls.py,428,"print(""‚úÖ Initial positions opened"")"
Evolve-main/trading/agents/demo_risk_controls.py,431,"print(""\nüìâ Simulating daily loss limit breach..."")"
Evolve-main/trading/agents/demo_risk_controls.py,444,"print(""‚úÖ Emergency exit triggered"")"
Evolve-main/trading/agents/demo_risk_controls.py,445,"print(f""  Daily PnL: {agent.daily_pnl:.2%}"")"
Evolve-main/trading/agents/demo_risk_controls.py,446,"print(f""  Open positions: {len(agent.portfolio_manager.state.open_positions)}"")"
Evolve-main/trading/agents/demo_risk_controls.py,448,"print(f""‚ùå Emergency exit failed: {result.message}"")"
Evolve-main/trading/agents/demo_risk_controls.py,450,"print(f""\n‚úÖ Emergency exits demo completed!"")"
Evolve-main/trading/agents/demo_risk_controls.py,454,"print(""üõ°Ô∏è Comprehensive Risk Controls Demo"")"
Evolve-main/trading/agents/demo_risk_controls.py,455,"print(""="" * 80)"
Evolve-main/trading/agents/demo_risk_controls.py,467,"print(f""\nüéâ All risk controls demos completed successfully!"")"
Evolve-main/trading/agents/demo_risk_controls.py,470,"print(f""‚ùå Demo failed: {e}"")"
Evolve-main/trading/agents/launch_execution_agent.py,76,"print(""üöÄ Launching Execution Agent"")"
Evolve-main/trading/agents/launch_execution_agent.py,77,"print(""="" * 50)"
Evolve-main/trading/agents/launch_execution_agent.py,91,"print(f""‚úÖ Execution Agent initialized"")"
Evolve-main/trading/agents/launch_execution_agent.py,92,"print(f""üìä Execution mode: {execution_agent.execution_mode.value}"")"
Evolve-main/trading/agents/launch_execution_agent.py,93,"print(f""üí∞ Max positions: {execution_agent.max_positions}"")"
Evolve-main/trading/agents/launch_execution_agent.py,94,"print(f""üéØ Min confidence: {execution_agent.min_confidence}"")"
Evolve-main/trading/agents/launch_execution_agent.py,95,"print(f""üìà Max slippage: {execution_agent.max_slippage}"")"
Evolve-main/trading/agents/launch_execution_agent.py,99,"print(f""\nüí∞ Initial Portfolio Status:"")"
Evolve-main/trading/agents/launch_execution_agent.py,100,"print(f""  Cash: ${portfolio_status['cash']:.2f}"")"
Evolve-main/trading/agents/launch_execution_agent.py,101,"print(f""  Equity: ${portfolio_status['equity']:.2f}"")"
Evolve-main/trading/agents/launch_execution_agent.py,102,"print(f""  Available Capital: ${portfolio_status['available_capital']:.2f}"")"
Evolve-main/trading/agents/launch_execution_agent.py,103,"print(f""  Open Positions: {len(portfolio_status['open_positions'])}"")"
Evolve-main/trading/agents/launch_execution_agent.py,107,"print(f""\nüõë Received signal {signum}, shutting down..."")"
Evolve-main/trading/agents/launch_execution_agent.py,113,"print(f""\nüéØ Execution Agent is running..."")"
Evolve-main/trading/agents/launch_execution_agent.py,114,"print(f""   Press Ctrl+C to stop"")"
Evolve-main/trading/agents/launch_execution_agent.py,115,"print(f""   Logs: trading/agents/logs/execution_agent.log"")"
Evolve-main/trading/agents/launch_execution_agent.py,116,"print(f""   Trade log: trading/agents/logs/trade_log.json"")"
Evolve-main/trading/agents/launch_execution_agent.py,123,"print(f""\nüõë Shutting down Execution Agent..."")"
Evolve-main/trading/agents/launch_execution_agent.py,128,"print(f""‚úÖ Execution Agent stopped"")"
Evolve-main/trading/agents/launch_leaderboard_dashboard.py,35,"print(f""‚ùå Missing required packages: {', '.join(missing_packages)}"")"
Evolve-main/trading/agents/launch_leaderboard_dashboard.py,36,"print(""Install them with: pip install "" + "" "".join(missing_packages))"
Evolve-main/trading/agents/launch_leaderboard_dashboard.py,46,"print(f""‚ùå Dashboard file not found: {dashboard_path}"")"
Evolve-main/trading/agents/launch_leaderboard_dashboard.py,59,"print(f""üöÄ Launching Agent Leaderboard Dashboard..."")"
Evolve-main/trading/agents/launch_leaderboard_dashboard.py,60,"print(f""üìç URL: http://{host}:{port}"")"
Evolve-main/trading/agents/launch_leaderboard_dashboard.py,61,"print(f""üìÅ Dashboard: {dashboard_path}"")"
Evolve-main/trading/agents/launch_leaderboard_dashboard.py,62,"print(""="" * 60)"
Evolve-main/trading/agents/launch_leaderboard_dashboard.py,68,"print(f""‚ùå Failed to launch dashboard: {e}"")"
Evolve-main/trading/agents/launch_leaderboard_dashboard.py,71,"print(""\nüëã Dashboard stopped by user"")"
Evolve-main/trading/agents/launch_leaderboard_dashboard.py,120,"print(""‚úÖ All dependencies are installed"")"
Evolve-main/trading/agents/market_regime_agent.py,354,except:
Evolve-main/trading/agents/model_selector_agent.py,362,except:
Evolve-main/trading/agents/model_selector_agent.py,370,except:
Evolve-main/trading/agents/rolling_retraining_agent.py,225,except:
Evolve-main/trading/agents/rolling_retraining_agent.py,235,except:
Evolve-main/trading/agents/rolling_retraining_agent.py,247,except:
Evolve-main/trading/agents/run_agent_loop.py,105,"print(""\nReceived interrupt signal, shutting down gracefully..."")"
Evolve-main/trading/agents/run_agent_loop.py,107,"print(f""Configuration error: {e}"")"
Evolve-main/trading/agents/run_agent_loop.py,110,"print(f""Unexpected error: {e}"")"
Evolve-main/trading/agents/task_memory.py,466,"print(f""Add task result: {result}"")"
Evolve-main/trading/agents/task_memory.py,470,"print(f""Update task result: {result}"")"
Evolve-main/trading/agents/task_memory.py,479,"print(f""Pending tasks: {len(pending_tasks)}"")"
Evolve-main/trading/agents/task_memory.py,480,"print(f""Completed tasks: {len(completed_tasks)}"")"
Evolve-main/trading/agents/test_execution_agent.py,18,"print(""üß™ Testing Execution Agent"")"
Evolve-main/trading/agents/test_execution_agent.py,19,"print(""="" * 50)"
Evolve-main/trading/agents/test_execution_agent.py,35,"print(""‚úÖ ExecutionAgent created successfully"")"
Evolve-main/trading/agents/test_execution_agent.py,38,"print(""\nüìã Testing signal validation..."")"
Evolve-main/trading/agents/test_execution_agent.py,56,"print(f""  Valid signal: {agent._validate_signal(valid_signal)}"")"
Evolve-main/trading/agents/test_execution_agent.py,57,"print(f""  Invalid signal: {agent._validate_signal(invalid_signal)}"")"
Evolve-main/trading/agents/test_execution_agent.py,60,"print(""\nüìä Testing position limits..."")"
Evolve-main/trading/agents/test_execution_agent.py,61,"print(f""  Position limit check: {agent._check_position_limits(valid_signal)}"")"
Evolve-main/trading/agents/test_execution_agent.py,64,"print(""\nüí∞ Testing execution price calculation..."")"
Evolve-main/trading/agents/test_execution_agent.py,67,"print(f""  Entry price: ${valid_signal.entry_price:.2f}"")"
Evolve-main/trading/agents/test_execution_agent.py,68,"print(f""  Execution price: ${execution_price:.2f}"")"
Evolve-main/trading/agents/test_execution_agent.py,69,"print(f""  Slippage: {abs(execution_price - valid_signal.entry_price) / valid_signal.entry_price:.4f}"")"
Evolve-main/trading/agents/test_execution_agent.py,72,"print(""\nüîÑ Testing trade execution..."")"
Evolve-main/trading/agents/test_execution_agent.py,77,"print(""‚úÖ Trade execution successful"")"
Evolve-main/trading/agents/test_execution_agent.py,78,"print(f""  Message: {result.message}"")"
Evolve-main/trading/agents/test_execution_agent.py,84,"print(f""  Success rate: {summary['success_rate']:.2%}"")"
Evolve-main/trading/agents/test_execution_agent.py,85,"print(f""  Total slippage: ${summary['total_slippage']:.2f}"")"
Evolve-main/trading/agents/test_execution_agent.py,86,"print(f""  Total fees: ${summary['total_fees']:.2f}"")"
Evolve-main/trading/agents/test_execution_agent.py,89,"print(f""‚ùå Trade execution failed: {result.message}"")"
Evolve-main/trading/agents/test_execution_agent.py,92,"print(""\nüìà Testing portfolio status..."")"
Evolve-main/trading/agents/test_execution_agent.py,94,"print(f""  Cash: ${portfolio_status['cash']:.2f}"")"
Evolve-main/trading/agents/test_execution_agent.py,95,"print(f""  Equity: ${portfolio_status['equity']:.2f}"")"
Evolve-main/trading/agents/test_execution_agent.py,96,"print(f""  Open positions: {len(portfolio_status['open_positions'])}"")"
Evolve-main/trading/agents/test_execution_agent.py,99,"print(""\nüìú Testing execution history..."")"
Evolve-main/trading/agents/test_execution_agent.py,101,"print(f""  History entries: {len(history)}"")"
Evolve-main/trading/agents/test_execution_agent.py,104,"print(""\nüìÑ Testing trade log..."")"
Evolve-main/trading/agents/test_execution_agent.py,106,"print(f""  Trade log entries: {len(trade_log)}"")"
Evolve-main/trading/agents/test_execution_agent.py,108,"print(""\n‚úÖ All tests completed!"")"
Evolve-main/trading/agents/test_integration.py,19,"print(""üß™ Testing AgentLeaderboard Integration"")"
Evolve-main/trading/agents/test_integration.py,20,"print(""="" * 50)"
Evolve-main/trading/agents/test_integration.py,30,"print(""‚úÖ AgentManager initialized with leaderboard"")"
Evolve-main/trading/agents/test_integration.py,41,"print(""\nüìä Adding sample performance data..."")"
Evolve-main/trading/agents/test_integration.py,55,"print(f""  ‚úÖ Added {agent_name}: Sharpe={sharpe:.2f}, Drawdown={drawdown:.2%}"")"
Evolve-main/trading/agents/test_integration.py,58,"print(""\nüèÜ Testing Leaderboard Functionality:"")"
Evolve-main/trading/agents/test_integration.py,62,"print(f""  Top 3 agents by Sharpe ratio:"")"
Evolve-main/trading/agents/test_integration.py,64,"print(f""    {i}. {agent['agent_name']}: Sharpe={agent['sharpe_ratio']:.2f}"")"
Evolve-main/trading/agents/test_integration.py,68,"print(f""  Deprecated agents: {deprecated}"")"
Evolve-main/trading/agents/test_integration.py,72,"print(f""  Active agents: {len(active)}"")"
Evolve-main/trading/agents/test_integration.py,76,"print(f""\nüìã Leaderboard DataFrame shape: {df.shape}"")"
Evolve-main/trading/agents/test_integration.py,77,"print(f""  Columns: {list(df.columns)}"")"
Evolve-main/trading/agents/test_integration.py,81,"print(f""  Performance history entries: {len(history)}"")"
Evolve-main/trading/agents/test_integration.py,83,"print(""\n‚úÖ Integration test completed successfully!"")"
Evolve-main/trading/agents/test_integration.py,84,"print(""\nüéØ Key Features Demonstrated:"")"
Evolve-main/trading/agents/test_integration.py,85,"print(""  ‚úì Agent performance tracking"")"
Evolve-main/trading/agents/test_integration.py,86,"print(""  ‚úì Automatic deprecation"")"
Evolve-main/trading/agents/test_integration.py,87,"print(""  ‚úì Leaderboard ranking"")"
Evolve-main/trading/agents/test_integration.py,88,"print(""  ‚úì DataFrame export"")"
Evolve-main/trading/agents/test_integration.py,89,"print(""  ‚úì Performance history"")"
Evolve-main/trading/agents/test_integration.py,90,"print(""  ‚úì AgentManager integration"")"
Evolve-main/trading/agents/walk_forward_agent.py,401,except:
Evolve-main/trading/agents/updater/utils.py,65,# TODO: Implement actual drift detection logic
Evolve-main/trading/agents/upgrader/utils.py,95,# TODO: Implement actual drift detection logic
Evolve-main/trading/agents/upgrader/utils.py,114,# TODO: Implement actual deprecated logic detection
Evolve-main/trading/agents/upgrader/utils.py,133,# TODO: Implement actual parameter checking
Evolve-main/trading/analytics/alpha_attribution_engine.py,621,except:
Evolve-main/trading/analytics/forecast_explainability.py,458,except:
Evolve-main/trading/config/settings.py,200,"print(f""Configuration validation failed: {e}"")"
Evolve-main/trading/core/agents.py,345,# TODO: Implement automated responses
Evolve-main/trading/core/agents.py,374,# TODO: Implement threshold breach responses
Evolve-main/trading/core/agents.py,399,# TODO: Implement error recovery
Evolve-main/trading/core/agents.py,463,"print(""[Agent Callback] Underperformance detected. Status report:"")"
Evolve-main/trading/core/agents.py,464,print(status_report)
Evolve-main/trading/core/agents.py,465,"print(""TODO: Implement agentic response (e.g., trigger retraining, alert, etc.)"")"
Evolve-main/trading/llm/llm_summary.py,177,# TODO: Implement actual LLM API call
Evolve-main/trading/logs/init_logs.py,103,"print(""All logging files verified or recreated."")"
Evolve-main/trading/logs/init_logs.py,105,"print(f""Log initialization completed with errors: {result['errors']}"")"
Evolve-main/trading/logs/init_logs.py,115,"print(f""Error: {e}"")"
Evolve-main/trading/logs/logger.py,41,"print(f""Error loading log config: {e}"")"
Evolve-main/trading/memory/performance_weights.py,34,"print(f""Failed to create memory directory: {e}"")"
Evolve-main/trading/memory/performance_weights.py,51,"print(f""Error exporting weights: {e}"")"
Evolve-main/trading/memory/performance_weights.py,80,"print(f""Error loading weights: {e}"")"
Evolve-main/trading/memory/strategy_logger.py,193,# TODO: Implement actual strategy analysis
Evolve-main/trading/meta_agents/automation_scheduler.py,63,# TODO: Implement cron schedule parsing
Evolve-main/trading/meta_agents/automation_scheduler.py,82,# TODO: Implement cron schedule parsing
Evolve-main/trading/meta_agents/automation_service.py,74,"schedule=None,  # TODO: Implement scheduling"
Evolve-main/trading/meta_agents/automation_tasks.py,66,# TODO: Implement backup logic
Evolve-main/trading/meta_agents/automation_tasks.py,94,# TODO: Implement cleanup logic
Evolve-main/trading/meta_agents/automation_tasks.py,122,# TODO: Implement validation logic
Evolve-main/trading/meta_agents/automation_tasks.py,160,# TODO: Implement processing logic
Evolve-main/trading/meta_agents/documentation_agent.py,99,# TODO: Implement content analysis
Evolve-main/trading/meta_agents/documentation_agent.py,106,# TODO: Implement content analysis
Evolve-main/trading/meta_agents/documentation_agent.py,113,# TODO: Implement content analysis
Evolve-main/trading/meta_agents/integration_test_handler.py,303,# TODO: Implement component-specific test execution
Evolve-main/trading/meta_agents/notification_handlers.py,114,# TODO: Implement email sending logic
Evolve-main/trading/meta_agents/notification_manager.py,142,# TODO: Implement handler status check
Evolve-main/trading/meta_agents/orchestrator.py,170,# TODO: Implement cleanup logic
Evolve-main/trading/meta_agents/security.py,171,# TODO: Implement encryption logic
Evolve-main/trading/meta_agents/security.py,180,# TODO: Implement decryption logic
Evolve-main/trading/meta_agents/service_manager.py,147,# TODO: Implement service health check
Evolve-main/trading/meta_agents/step_handlers.py,97,# TODO: Add more validation if needed
Evolve-main/trading/meta_agents/task_handlers.py,368,# TODO: Implement command execution logic
Evolve-main/trading/meta_agents/task_handlers.py,388,# TODO: Implement API call logic
Evolve-main/trading/meta_agents/task_handlers.py,407,# TODO: Implement data processing logic
Evolve-main/trading/meta_agents/task_handlers.py,426,# TODO: Implement notification logic
Evolve-main/trading/meta_agents/workflow_engine.py,78,# TODO: Implement step execution logic
Evolve-main/trading/meta_agents/workflow_engine.py,156,# TODO: Implement workflow monitoring logic
Evolve-main/trading/meta_agents/scripts/manage_secrets.py,186,print(value)
Evolve-main/trading/meta_agents/services/cli_service.py,107,"print(f""{Fore.RED}Error: {message}{Style.RESET_ALL}"")"
Evolve-main/trading/meta_agents/services/cli_service.py,111,"print(f""{Fore.GREEN}Success: {message}{Style.RESET_ALL}"")"
Evolve-main/trading/meta_agents/services/cli_service.py,115,"print(f""{Fore.BLUE}Info: {message}{Style.RESET_ALL}"")"
Evolve-main/trading/meta_agents/services/cli_service.py,119,"print(f""{Fore.YELLOW}Warning: {message}{Style.RESET_ALL}"")"
Evolve-main/trading/meta_agents/services/cli_service.py,127,print(func.__doc__ or f'No help available for {arg}')
Evolve-main/trading/meta_agents/services/cli_service.py,132,"print(""\nAvailable commands:"")"
Evolve-main/trading/meta_agents/services/cli_service.py,138,"print(f""\n{command}: {doc}"")"
Evolve-main/trading/meta_agents/services/cli_service.py,162,print(os.getcwd())
Evolve-main/trading/meta_agents/services/cli_service.py,177,"print(f""{Fore.BLUE}{item}/{Style.RESET_ALL}"")"
Evolve-main/trading/meta_agents/services/cli_service.py,179,print(item)
Evolve-main/trading/meta_agents/services/cli_service.py,190,print(f.read())
Evolve-main/trading/meta_agents/services/cli_service.py,267,print(result.stdout)
Evolve-main/trading/meta_agents/services/cli_service.py,283,"print(json.dumps(self.config, indent=2))"
Evolve-main/trading/meta_agents/services/cli_service.py,291,"print(json.dumps(value, indent=2))"
Evolve-main/trading/meta_agents/services/cli_service.py,321,"print(f""{i + 1}: {readline.get_history_item(i + 1)}"")"
Evolve-main/trading/meta_agents/services/cli_service.py,335,print(arg)
Evolve-main/trading/meta_agents/services/cli_service.py,339,print(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
Evolve-main/trading/meta_agents/services/cli_service.py,343,print(getpass.getuser())
Evolve-main/trading/meta_agents/services/cli_service.py,351,"print(f""{key}={value}"")"
Evolve-main/trading/meta_agents/services/cli_service.py,356,print(value)
Evolve-main/trading/meta_agents/services/cli_service.py,407,"self.console.print(f""[red]Error: {str(e)}[/red]"")"
Evolve-main/trading/meta_agents/services/cli_service.py,421,"self.console.print(f""[red]Error: {str(e)}[/red]"")"
Evolve-main/trading/meta_agents/services/cli_service.py,433,"self.console.print(f""[red]Error: {str(e)}[/red]"")"
Evolve-main/trading/meta_agents/services/cli_service.py,445,"self.console.print(f""[red]Error: {str(e)}[/red]"")"
Evolve-main/trading/meta_agents/services/cli_service.py,453,"self.console.print(f""[red]Error: {str(e)}[/red]"")"
Evolve-main/trading/meta_agents/services/cli_service.py,455,# TODO: Implement metrics display logic
Evolve-main/trading/meta_agents/services/cli_service.py,465,self.console.print(table)
Evolve-main/trading/meta_agents/services/cli_service.py,467,"self.console.print(f""[red]Error: {str(e)}[/red]"")"
Evolve-main/trading/meta_agents/services/cli_service.py,472,self.console.print(
Evolve-main/trading/meta_agents/services/cli_service.py,509,"print(""\nGoodbye!"")"
Evolve-main/trading/meta_agents/services/config_service.py,305,# TODO: Implement schema validation
Evolve-main/trading/meta_agents/services/config_service.py,486,"print(json.dumps(service.get_config(args.get), indent=2))"
Evolve-main/trading/meta_agents/services/config_service.py,491,"print(json.dumps(service.get_config_history(args.history), indent=2))"
Evolve-main/trading/meta_agents/services/logging_service.py,69,"print(f""Error loading config: {str(e)}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,110,"print(f""Error setting up database: {str(e)}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,127,"print(f""Error initializing loggers: {str(e)}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,156,"print(f""Error setting up logger {config.name}: {str(e)}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,204,"print(f""Unknown handler type: {handler_type}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,207,"print(f""Error creating handler: {str(e)}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,222,"print(f""Unknown filter type: {filter_type}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,225,"print(f""Error creating filter: {str(e)}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,235,"print(f""Error getting logger: {str(e)}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,269,"print(f""Error logging message: {str(e)}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,321,"print(f""Error getting logs: {str(e)}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,335,"print(f""Cleaned up logs older than {days} days"")"
Evolve-main/trading/meta_agents/services/logging_service.py,337,"print(f""Error cleaning up old logs: {str(e)}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,364,"print(f""Error rotating logs: {str(e)}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,382,"print(f""Error processing log queue: {str(e)}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,403,"print(f""Error in logging service: {str(e)}"")"
Evolve-main/trading/meta_agents/services/logging_service.py,440,"print(""Logging service interrupted"")"
Evolve-main/trading/meta_agents/services/logging_service.py,442,"print(f""Error in logging service: {str(e)}"")"
Evolve-main/trading/models/arima_model.py,406,"print(f""Could not plot results: {e}"")"
Evolve-main/trading/models/autoformer_model.py,71,self.model.eval()
Evolve-main/trading/models/autoformer_model.py,117,self.model.eval()
Evolve-main/trading/models/autoformer_model.py,145,"print(""AutoformerModel: Autoformer wrapper"")"
Evolve-main/trading/models/autoformer_model.py,146,print(self.model)
Evolve-main/trading/models/autoformer_model.py,171,self.model.eval()
Evolve-main/trading/models/autoformer_model.py,194,"print(""SHAP not directly supported for Autoformer. Showing attention weights if available."")"
Evolve-main/trading/models/autoformer_model.py,211,"print(""No attention weights available."")"
Evolve-main/trading/models/base_model.py,411,self.model.eval()
Evolve-main/trading/models/base_model.py,473,self.model.eval()
Evolve-main/trading/models/base_model.py,525,self.model.eval()
Evolve-main/trading/models/base_model.py,591,self.model.eval()
Evolve-main/trading/models/base_model.py,790,self.model.eval()
Evolve-main/trading/models/catboost_model.py,83,"print(""CatBoostModel: CatBoostRegressor wrapper"")"
Evolve-main/trading/models/catboost_model.py,84,print(self.model)
Evolve-main/trading/models/catboost_model.py,90,"print(""CatBoost SHAP summary plot:"")"
Evolve-main/trading/models/lstm_model.py,154,self.eval()
Evolve-main/trading/models/lstm_model.py,599,self.model.eval()
Evolve-main/trading/models/lstm_model.py,708,"print(f""Could not plot results: {e}"")"
Evolve-main/trading/models/prophet_model.py,278,"print(""ProphetModel: Facebook Prophet wrapper"")"
Evolve-main/trading/models/prophet_model.py,279,print(self.model)
Evolve-main/trading/models/prophet_model.py,285,"print(""SHAP not supported for Prophet. Showing component plots instead."")"
Evolve-main/trading/models/tcn_model.py,242,"print(""SHAP is not installed. Please install it with 'pip install shap'."")"
Evolve-main/trading/models/tcn_model.py,294,"print(f'Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.4f}')"
Evolve-main/trading/models/tcn_model.py,316,self.model.eval()
Evolve-main/trading/models/tcn_model.py,396,"print(f""Could not plot results: {e}"")"
Evolve-main/trading/models/xgboost_model.py,333,"print(f""Could not plot results: {e}"")"
Evolve-main/trading/models/xgboost_model.py,631,"print(f""Could not plot results: {e}"")"
Evolve-main/trading/models/advanced/gnn/gnn_model.py,367,self.eval()
Evolve-main/trading/models/advanced/gnn/gnn_model.py,380,"print(f""Early stopping at epoch {epoch}"")"
Evolve-main/trading/models/advanced/gnn/gnn_model.py,388,"print(f""Epoch {epoch}: train_loss = {train_loss.item():.4f}, """
Evolve-main/trading/models/advanced/gnn/gnn_model.py,402,self.eval()
Evolve-main/trading/models/advanced/gnn/gnn_model.py,460,"print(""SHAP is not installed. Please install it with 'pip install shap'."")"
Evolve-main/trading/models/advanced/gnn/gnn_model.py,476,"print('Synthetic test MSE:', ((y_pred.flatten() - df['close'].iloc[80:].values) ** 2).mean())"
Evolve-main/trading/models/advanced/lstm/lstm_model.py,206,self.eval()
Evolve-main/trading/models/advanced/rl/strategy_optimizer.py,243,"print(f""Could not plot results: {e}"")"
Evolve-main/trading/models/advanced/tcn/tcn_model.py,250,self.tcn.eval()
Evolve-main/trading/models/advanced/transformer/time_series_transformer.py,263,self.eval()
Evolve-main/trading/models/advanced/transformer/time_series_transformer.py,473,self.model.eval()
Evolve-main/trading/models/advanced/transformer/time_series_transformer.py,493,"print('Synthetic test MSE:', ((y_pred - df['close'].iloc[80:].values) ** 2).mean())"
Evolve-main/trading/nlp/sandbox_nlp.py,16,"print(""\n=== NLP Sandbox ==="")"
Evolve-main/trading/nlp/sandbox_nlp.py,17,"print(""Type your prompt and press Enter. Type 'exit' to quit.\n"")"
Evolve-main/trading/nlp/sandbox_nlp.py,31,"print(""\n[Entities]"")"
Evolve-main/trading/nlp/sandbox_nlp.py,33,"print(json.dumps(entities, indent=2))"
Evolve-main/trading/nlp/sandbox_nlp.py,35,"print(f""[Intent] {intent}"")"
Evolve-main/trading/nlp/sandbox_nlp.py,37,"print(f""[Routed] {json.dumps(routed, indent=2)}"")"
Evolve-main/trading/nlp/sandbox_nlp.py,39,"print(""\n[LLM Response]"")"
Evolve-main/trading/nlp/sandbox_nlp.py,42,"print(""(streaming)"", end="" "", flush=True)"
Evolve-main/trading/nlp/sandbox_nlp.py,44,"print(chunk, end="""", flush=True)"
Evolve-main/trading/nlp/sandbox_nlp.py,45,print()
Evolve-main/trading/nlp/sandbox_nlp.py,48,print(response)
Evolve-main/trading/nlp/sandbox_nlp.py,50,"print(f""Error: {e}"")"
Evolve-main/trading/nlp/sandbox_nlp.py,51,"print(""\n---\n"")"
Evolve-main/trading/optimization/strategy_optimizer.py,1028,# TODO: Implement plotting functionality for optimization results
Evolve-main/trading/optimization/strategy_optimizer.py,1090,# TODO: Implement actual optimization with cross-validation
Evolve-main/trading/optimization/strategy_optimizer.py,1105,# TODO: Implement save functionality
Evolve-main/trading/optimization/strategy_optimizer.py,1117,# TODO: Implement load functionality
Evolve-main/trading/report/test_simple.py,18,"print(""‚úÖ All imports successful"")"
Evolve-main/trading/report/test_simple.py,21,"print(f""‚ùå Import error: {e}"")"
Evolve-main/trading/report/test_simple.py,63,"print(f""‚úÖ Report generated successfully: {report_data['report_id']}"")"
Evolve-main/trading/report/test_simple.py,64,"print(f""üìä Trade metrics: {report_data['trade_metrics'].total_trades} trades"")"
Evolve-main/trading/report/test_simple.py,65,"print(f""ü§ñ Model metrics: MSE = {report_data['model_metrics'].mse:.4f}"")"
Evolve-main/trading/report/test_simple.py,66,"print(f""üìÅ Files created: {list(report_data['files'].keys())}"")"
Evolve-main/trading/report/test_simple.py,71,"print(f""‚ùå Report generation error: {e}"")"
Evolve-main/trading/report/test_simple.py,82,"print(f""‚úÖ Client initialized successfully"")"
Evolve-main/trading/report/test_simple.py,83,"print(f""üîç Service status: {status}"")"
Evolve-main/trading/report/test_simple.py,88,"print(f""‚ùå Client error: {e}"")"
Evolve-main/trading/report/test_simple.py,93,"print(""üß™ Testing Report Generation System"")"
Evolve-main/trading/report/test_simple.py,94,"print(""="" * 50)"
Evolve-main/trading/report/test_simple.py,106,"print(f""\nüîç Running {test_name}..."")"
Evolve-main/trading/report/test_simple.py,110,"print(f""‚ùå {test_name} failed"")"
Evolve-main/trading/report/test_simple.py,112,"print(f""\n"" + ""="" * 50)"
Evolve-main/trading/report/test_simple.py,113,"print(f""üìä Test Results: {passed}/{total} passed"")"
Evolve-main/trading/report/test_simple.py,116,"print(""üéâ All tests passed! Report system is working correctly."")"
Evolve-main/trading/report/test_simple.py,118,"print(""‚ö†Ô∏è  Some tests failed. Check the errors above."")"
Evolve-main/trading/services/demo_quant_gpt.py,23,"print(""ü§ñ QuantGPT Trading Interface Demonstration"")"
Evolve-main/trading/services/demo_quant_gpt.py,24,"print(""="" * 60)"
Evolve-main/trading/services/demo_quant_gpt.py,25,"print(""This demo shows how to use natural language to interact with the trading system."")"
Evolve-main/trading/services/demo_quant_gpt.py,26,"print(""="" * 60)"
Evolve-main/trading/services/demo_quant_gpt.py,29,"print(""\nüîß Initializing QuantGPT..."")"
Evolve-main/trading/services/demo_quant_gpt.py,36,"print(""‚úÖ QuantGPT initialized successfully!"")"
Evolve-main/trading/services/demo_quant_gpt.py,58,"print(f""\nüìù Running {len(demo_queries)} demo queries..."")"
Evolve-main/trading/services/demo_quant_gpt.py,59,"print(""-"" * 60)"
Evolve-main/trading/services/demo_quant_gpt.py,65,"print(f""\nüéØ Demo {i}: {description}"")"
Evolve-main/trading/services/demo_quant_gpt.py,66,"print(f""Query: '{query}'"")"
Evolve-main/trading/services/demo_quant_gpt.py,67,"print(""-"" * 50)"
Evolve-main/trading/services/demo_quant_gpt.py,81,"print(f""‚è±Ô∏è  Processing Time: {processing_time:.2f} seconds"")"
Evolve-main/trading/services/demo_quant_gpt.py,82,"print(f""üéØ Intent: {parsed.get('intent', 'unknown')}"")"
Evolve-main/trading/services/demo_quant_gpt.py,83,"print(f""üìà Symbol: {parsed.get('symbol', 'N/A')}"")"
Evolve-main/trading/services/demo_quant_gpt.py,84,"print(f""‚è∞ Timeframe: {parsed.get('timeframe', 'N/A')}"")"
Evolve-main/trading/services/demo_quant_gpt.py,85,"print(f""üìÖ Period: {parsed.get('period', 'N/A')}"")"
Evolve-main/trading/services/demo_quant_gpt.py,89,"print(f""üîß Action: {action}"")"
Evolve-main/trading/services/demo_quant_gpt.py,94,"print(f""üèÜ Best Model: {best_model['model_type'].upper()}"")"
Evolve-main/trading/services/demo_quant_gpt.py,95,"print(f""üìä Model Score: {best_model['evaluation'].get('overall_score', 0):.2f}"")"
Evolve-main/trading/services/demo_quant_gpt.py,96,"print(f""üìà Models Built: {results.get('models_built', 0)}"")"
Evolve-main/trading/services/demo_quant_gpt.py,97,"print(f""üîç Models Evaluated: {results.get('models_evaluated', 0)}"")"
Evolve-main/trading/services/demo_quant_gpt.py,102,"print(f""üìä Signal: {signal['signal']}"")"
Evolve-main/trading/services/demo_quant_gpt.py,103,"print(f""üí™ Strength: {signal['strength']}"")"
Evolve-main/trading/services/demo_quant_gpt.py,104,"print(f""üéØ Confidence: {signal['confidence']:.1%}"")"
Evolve-main/trading/services/demo_quant_gpt.py,105,"print(f""üß† Model Score: {signal['model_score']:.2f}"")"
Evolve-main/trading/services/demo_quant_gpt.py,106,"print(f""üí≠ Reasoning: {signal['reasoning']}"")"
Evolve-main/trading/services/demo_quant_gpt.py,109,"print(f""üìä Market Data Available: {'Yes' if results.get('market_data') else 'No'}"")"
Evolve-main/trading/services/demo_quant_gpt.py,110,"print(f""üìà Plots Generated: {len(results.get('plots', []))}"")"
Evolve-main/trading/services/demo_quant_gpt.py,111,"print(f""ü§ñ Model Analysis: {'Available' if results.get('model_analysis') else 'Not available'}"")"
Evolve-main/trading/services/demo_quant_gpt.py,115,"print(f""\nü§ñ GPT Commentary:"")"
Evolve-main/trading/services/demo_quant_gpt.py,116,"print(""-"" * 30)"
Evolve-main/trading/services/demo_quant_gpt.py,117,print(commentary)
Evolve-main/trading/services/demo_quant_gpt.py,119,"print(""‚úÖ Query processed successfully!"")"
Evolve-main/trading/services/demo_quant_gpt.py,123,"print(f""‚ùå Error: {error}"")"
Evolve-main/trading/services/demo_quant_gpt.py,124,"print(""üí° This might be due to missing services or data."")"
Evolve-main/trading/services/demo_quant_gpt.py,127,"print(f""‚ùå Exception: {e}"")"
Evolve-main/trading/services/demo_quant_gpt.py,128,"print(""üí° This might be due to missing dependencies or services."")"
Evolve-main/trading/services/demo_quant_gpt.py,130,"print(""\n"" + ""="" * 60)"
Evolve-main/trading/services/demo_quant_gpt.py,133,"print(""\nüìã Available Parameters"")"
Evolve-main/trading/services/demo_quant_gpt.py,134,"print(""-"" * 30)"
Evolve-main/trading/services/demo_quant_gpt.py,135,"print(f""Symbols: {', '.join(quant_gpt.trading_context['available_symbols'])}"")"
Evolve-main/trading/services/demo_quant_gpt.py,136,"print(f""Timeframes: {', '.join(quant_gpt.trading_context['available_timeframes'])}"")"
Evolve-main/trading/services/demo_quant_gpt.py,137,"print(f""Periods: {', '.join(quant_gpt.trading_context['available_periods'])}"")"
Evolve-main/trading/services/demo_quant_gpt.py,138,"print(f""Models: {', '.join(quant_gpt.trading_context['available_models'])}"")"
Evolve-main/trading/services/demo_quant_gpt.py,141,"print(""\nüßπ Cleaning up..."")"
Evolve-main/trading/services/demo_quant_gpt.py,143,"print(""‚úÖ Demo completed!"")"
Evolve-main/trading/services/demo_quant_gpt.py,145,"print(""\n"" + ""="" * 60)"
Evolve-main/trading/services/demo_quant_gpt.py,146,"print(""üéâ QuantGPT Demonstration Complete!"")"
Evolve-main/trading/services/demo_quant_gpt.py,147,"print(""="" * 60)"
Evolve-main/trading/services/demo_quant_gpt.py,148,"print(""\nüí° Tips for using QuantGPT:"")"
Evolve-main/trading/services/demo_quant_gpt.py,149,"print(""- Be specific about symbols, timeframes, and periods"")"
Evolve-main/trading/services/demo_quant_gpt.py,150,"print(""- Ask for model recommendations, trading signals, or market analysis"")"
Evolve-main/trading/services/demo_quant_gpt.py,151,"print(""- Use natural language - no need to learn specific commands"")"
Evolve-main/trading/services/demo_quant_gpt.py,152,"print(""- The system will automatically route your query to the right services"")"
Evolve-main/trading/services/demo_quant_gpt.py,153,"print(""\nüöÄ Ready to start trading with natural language!"")"
Evolve-main/trading/services/demo_quant_gpt.py,177,"print(""\n\n‚èπÔ∏è  Demo interrupted by user"")"
Evolve-main/trading/services/demo_quant_gpt.py,184,"print(f""\n‚ùå Demo failed: {e}"")"
Evolve-main/trading/services/demo_quant_gpt.py,185,"print(""üí° Make sure Redis is running and all services are available"")"
Evolve-main/trading/services/demo_safe_executor.py,23,"print(""üõ°Ô∏è Safe Executor Demonstration"")"
Evolve-main/trading/services/demo_safe_executor.py,24,"print(""="" * 60)"
Evolve-main/trading/services/demo_safe_executor.py,25,"print(""This demo shows how to safely execute user-defined models and strategies."")"
Evolve-main/trading/services/demo_safe_executor.py,26,"print(""="" * 60)"
Evolve-main/trading/services/demo_safe_executor.py,29,"print(""\nüîß Initializing ServiceClient..."")"
Evolve-main/trading/services/demo_safe_executor.py,35,"print(""‚úÖ ServiceClient initialized successfully!"")"
Evolve-main/trading/services/demo_safe_executor.py,38,"print(""\nüéØ Demo 1: Safe Model Execution"")"
Evolve-main/trading/services/demo_safe_executor.py,39,"print(""-"" * 40)"
Evolve-main/trading/services/demo_safe_executor.py,69,"print(""Executing simple moving average model..."")"
Evolve-main/trading/services/demo_safe_executor.py,81,"print(f""Status: {status}"")"
Evolve-main/trading/services/demo_safe_executor.py,82,"print(f""Execution Time: {execution_result.get('execution_time', 0):.2f}s"")"
Evolve-main/trading/services/demo_safe_executor.py,86,"print(f""Prediction: {return_value.get('prediction', 'N/A')}"")"
Evolve-main/trading/services/demo_safe_executor.py,87,"print(f""Moving Average: {return_value.get('moving_average', 'N/A')}"")"
Evolve-main/trading/services/demo_safe_executor.py,88,"print(f""Confidence: {return_value.get('confidence', 'N/A')}"")"
Evolve-main/trading/services/demo_safe_executor.py,90,"print(f""Error: {execution_result.get('error', 'Unknown error')}"")"
Evolve-main/trading/services/demo_safe_executor.py,93,"print(""\nüéØ Demo 2: Safe Strategy Execution"")"
Evolve-main/trading/services/demo_safe_executor.py,94,"print(""-"" * 40)"
Evolve-main/trading/services/demo_safe_executor.py,136,"print(""Executing RSI strategy..."")"
Evolve-main/trading/services/demo_safe_executor.py,148,"print(f""Status: {status}"")"
Evolve-main/trading/services/demo_safe_executor.py,149,"print(f""Execution Time: {execution_result.get('execution_time', 0):.2f}s"")"
Evolve-main/trading/services/demo_safe_executor.py,153,"print(f""Signal: {return_value.get('signal', 'N/A')}"")"
Evolve-main/trading/services/demo_safe_executor.py,154,"print(f""Confidence: {return_value.get('confidence', 'N/A')}"")"
Evolve-main/trading/services/demo_safe_executor.py,155,"print(f""RSI: {return_value.get('rsi', 'N/A')}"")"
Evolve-main/trading/services/demo_safe_executor.py,156,"print(f""Reasoning: {return_value.get('reasoning', 'N/A')}"")"
Evolve-main/trading/services/demo_safe_executor.py,158,"print(f""Error: {execution_result.get('error', 'Unknown error')}"")"
Evolve-main/trading/services/demo_safe_executor.py,161,"print(""\nüéØ Demo 3: Safe Indicator Execution"")"
Evolve-main/trading/services/demo_safe_executor.py,162,"print(""-"" * 40)"
Evolve-main/trading/services/demo_safe_executor.py,201,"print(""Executing MACD indicator..."")"
Evolve-main/trading/services/demo_safe_executor.py,213,"print(f""Status: {status}"")"
Evolve-main/trading/services/demo_safe_executor.py,214,"print(f""Execution Time: {execution_result.get('execution_time', 0):.2f}s"")"
Evolve-main/trading/services/demo_safe_executor.py,218,"print(f""MACD: {return_value.get('macd', 'N/A')}"")"
Evolve-main/trading/services/demo_safe_executor.py,219,"print(f""Fast MA: {return_value.get('fast_ma', 'N/A')}"")"
Evolve-main/trading/services/demo_safe_executor.py,220,"print(f""Slow MA: {return_value.get('slow_ma', 'N/A')}"")"
Evolve-main/trading/services/demo_safe_executor.py,221,"print(f""Signal: {return_value.get('signal', 'N/A')}"")"
Evolve-main/trading/services/demo_safe_executor.py,223,"print(f""Error: {execution_result.get('error', 'Unknown error')}"")"
Evolve-main/trading/services/demo_safe_executor.py,226,"print(""\nüéØ Demo 4: Error Handling (Dangerous Code)"")"
Evolve-main/trading/services/demo_safe_executor.py,227,"print(""-"" * 40)"
Evolve-main/trading/services/demo_safe_executor.py,239,"print(""Attempting to execute dangerous code..."")"
Evolve-main/trading/services/demo_safe_executor.py,251,"print(f""Status: {status}"")"
Evolve-main/trading/services/demo_safe_executor.py,254,"print(""‚úÖ Dangerous code was properly blocked!"")"
Evolve-main/trading/services/demo_safe_executor.py,255,"print(f""Error: {execution_result.get('error', 'Unknown error')}"")"
Evolve-main/trading/services/demo_safe_executor.py,257,"print(""‚ùå Dangerous code was not properly blocked"")"
Evolve-main/trading/services/demo_safe_executor.py,259,"print(""‚ùå No response from service"")"
Evolve-main/trading/services/demo_safe_executor.py,262,"print(""\nüéØ Demo 5: Timeout Handling"")"
Evolve-main/trading/services/demo_safe_executor.py,263,"print(""-"" * 40)"
Evolve-main/trading/services/demo_safe_executor.py,274,"print(""Executing code that should timeout..."")"
Evolve-main/trading/services/demo_safe_executor.py,286,"print(f""Status: {status}"")"
Evolve-main/trading/services/demo_safe_executor.py,287,"print(f""Execution Time: {execution_result.get('execution_time', 0):.2f}s"")"
Evolve-main/trading/services/demo_safe_executor.py,290,"print(""‚úÖ Code was properly timed out!"")"
Evolve-main/trading/services/demo_safe_executor.py,292,"print(f""Unexpected status: {status}"")"
Evolve-main/trading/services/demo_safe_executor.py,294,"print(""‚ùå No response from service"")"
Evolve-main/trading/services/demo_safe_executor.py,297,"print(""\nüéØ Demo 6: Get SafeExecutor Statistics"")"
Evolve-main/trading/services/demo_safe_executor.py,298,"print(""-"" * 40)"
Evolve-main/trading/services/demo_safe_executor.py,303,"print(f""Total Executions: {stats.get('total_executions', 0)}"")"
Evolve-main/trading/services/demo_safe_executor.py,304,"print(f""Successful Executions: {stats.get('successful_executions', 0)}"")"
Evolve-main/trading/services/demo_safe_executor.py,305,"print(f""Failed Executions: {stats.get('failed_executions', 0)}"")"
Evolve-main/trading/services/demo_safe_executor.py,306,"print(f""Success Rate: {stats.get('success_rate', 0):.1%}"")"
Evolve-main/trading/services/demo_safe_executor.py,307,"print(f""Total Execution Time: {stats.get('total_execution_time', 0):.2f}s"")"
Evolve-main/trading/services/demo_safe_executor.py,308,"print(f""Average Execution Time: {stats.get('average_execution_time', 0):.2f}s"")"
Evolve-main/trading/services/demo_safe_executor.py,310,"print(""‚ùå Could not retrieve statistics"")"
Evolve-main/trading/services/demo_safe_executor.py,313,"print(""\nüßπ Cleaning up..."")"
Evolve-main/trading/services/demo_safe_executor.py,316,"print(""‚úÖ Cleanup completed successfully"")"
Evolve-main/trading/services/demo_safe_executor.py,318,"print(""‚ùå Cleanup failed"")"
Evolve-main/trading/services/demo_safe_executor.py,322,"print(""\n"" + ""="" * 60)"
Evolve-main/trading/services/demo_safe_executor.py,323,"print(""üéâ Safe Executor Demonstration Complete!"")"
Evolve-main/trading/services/demo_safe_executor.py,324,"print(""="" * 60)"
Evolve-main/trading/services/demo_safe_executor.py,325,"print(""\nüí° Key Features Demonstrated:"")"
Evolve-main/trading/services/demo_safe_executor.py,326,"print(""- Safe execution of user-defined models"")"
Evolve-main/trading/services/demo_safe_executor.py,327,"print(""- Strategy execution with market data"")"
Evolve-main/trading/services/demo_safe_executor.py,328,"print(""- Technical indicator calculation"")"
Evolve-main/trading/services/demo_safe_executor.py,329,"print(""- Security validation (blocks dangerous code)"")"
Evolve-main/trading/services/demo_safe_executor.py,330,"print(""- Timeout protection"")"
Evolve-main/trading/services/demo_safe_executor.py,331,"print(""- Resource monitoring and statistics"")"
Evolve-main/trading/services/demo_safe_executor.py,332,"print(""\nüöÄ Ready to safely execute custom trading code!"")"
Evolve-main/trading/services/demo_safe_executor.py,344,"print(""\n\n‚èπÔ∏è  Demo interrupted by user"")"
Evolve-main/trading/services/demo_safe_executor.py,351,"print(f""\n‚ùå Demo failed: {e}"")"
Evolve-main/trading/services/demo_safe_executor.py,352,"print(""üí° Make sure Redis is running and the SafeExecutor service is available"")"
Evolve-main/trading/services/launch_quant_gpt.py,70,"print(""\nü§ñ QuantGPT Trading Interface"")"
Evolve-main/trading/services/launch_quant_gpt.py,71,"print(""="" * 50)"
Evolve-main/trading/services/launch_quant_gpt.py,72,"print(""Enter your trading queries in natural language:"")"
Evolve-main/trading/services/launch_quant_gpt.py,73,"print(""Examples:"")"
Evolve-main/trading/services/launch_quant_gpt.py,74,"print(""- 'Give me the best model for NVDA over 90 days'"")"
Evolve-main/trading/services/launch_quant_gpt.py,75,"print(""- 'Should I long TSLA this week?'"")"
Evolve-main/trading/services/launch_quant_gpt.py,76,"print(""- 'Analyze BTCUSDT market conditions'"")"
Evolve-main/trading/services/launch_quant_gpt.py,77,"print(""- 'What's the trading signal for AAPL?'"")"
Evolve-main/trading/services/launch_quant_gpt.py,78,"print(""Type 'quit' to exit"")"
Evolve-main/trading/services/launch_quant_gpt.py,79,"print(""="" * 50)"
Evolve-main/trading/services/launch_quant_gpt.py,98,"print(""\nüìä Results:"")"
Evolve-main/trading/services/launch_quant_gpt.py,99,"print(""-"" * 30)"
Evolve-main/trading/services/launch_quant_gpt.py,104,"print(f""Intent: {parsed.get('intent', 'unknown')}"")"
Evolve-main/trading/services/launch_quant_gpt.py,105,"print(f""Symbol: {parsed.get('symbol', 'N/A')}"")"
Evolve-main/trading/services/launch_quant_gpt.py,106,"print(f""Timeframe: {parsed.get('timeframe', 'N/A')}"")"
Evolve-main/trading/services/launch_quant_gpt.py,107,"print(f""Period: {parsed.get('period', 'N/A')}"")"
Evolve-main/trading/services/launch_quant_gpt.py,112,"print(f""Action: {action}"")"
Evolve-main/trading/services/launch_quant_gpt.py,117,"print(f""Best Model: {best_model['model_type'].upper()}"")"
Evolve-main/trading/services/launch_quant_gpt.py,118,"print(f""Model Score: {best_model['evaluation'].get('overall_score', 0):.2f}"")"
Evolve-main/trading/services/launch_quant_gpt.py,123,"print(f""Signal: {signal['signal']}"")"
Evolve-main/trading/services/launch_quant_gpt.py,124,"print(f""Strength: {signal['strength']}"")"
Evolve-main/trading/services/launch_quant_gpt.py,125,"print(f""Confidence: {signal['confidence']:.1%}"")"
Evolve-main/trading/services/launch_quant_gpt.py,130,"print(f""\nü§ñ GPT Commentary:"")"
Evolve-main/trading/services/launch_quant_gpt.py,131,"print(""-"" * 30)"
Evolve-main/trading/services/launch_quant_gpt.py,132,print(commentary)
Evolve-main/trading/services/launch_quant_gpt.py,136,"print(f""‚ùå Error: {error}"")"
Evolve-main/trading/services/launch_quant_gpt.py,138,"print(""\n"" + ""="" * 50)"
Evolve-main/trading/services/launch_quant_gpt.py,145,"print(f""‚ùå Error: {e}"")"
Evolve-main/trading/services/quant_gpt.py,611,"print(json.dumps(result, indent=2))"
Evolve-main/trading/services/quant_gpt.py,620,"print(""\nInterrupted by user"")"
Evolve-main/trading/services/quant_gpt.py,627,"print(f""Error: {e}"")"
Evolve-main/trading/services/quant_gpt_example.py,23,"print(""ü§ñ QuantGPT Trading Interface Examples"")"
Evolve-main/trading/services/quant_gpt_example.py,24,"print(""="" * 60)"
Evolve-main/trading/services/quant_gpt_example.py,27,"print(""Initializing QuantGPT..."")"
Evolve-main/trading/services/quant_gpt_example.py,43,"print(f""\nRunning {len(queries)} example queries..."")"
Evolve-main/trading/services/quant_gpt_example.py,44,"print(""-"" * 60)"
Evolve-main/trading/services/quant_gpt_example.py,47,"print(f""\nüìù Query {i}: {query}"")"
Evolve-main/trading/services/quant_gpt_example.py,48,"print(""-"" * 40)"
Evolve-main/trading/services/quant_gpt_example.py,62,"print(f""‚úÖ Success (processed in {processing_time:.2f}s)"")"
Evolve-main/trading/services/quant_gpt_example.py,63,"print(f""Intent: {parsed.get('intent', 'unknown')}"")"
Evolve-main/trading/services/quant_gpt_example.py,64,"print(f""Symbol: {parsed.get('symbol', 'N/A')}"")"
Evolve-main/trading/services/quant_gpt_example.py,65,"print(f""Timeframe: {parsed.get('timeframe', 'N/A')}"")"
Evolve-main/trading/services/quant_gpt_example.py,66,"print(f""Period: {parsed.get('period', 'N/A')}"")"
Evolve-main/trading/services/quant_gpt_example.py,70,"print(f""Action: {action}"")"
Evolve-main/trading/services/quant_gpt_example.py,75,"print(f""Best Model: {best_model['model_type'].upper()}"")"
Evolve-main/trading/services/quant_gpt_example.py,76,"print(f""Model Score: {best_model['evaluation'].get('overall_score', 0):.2f}"")"
Evolve-main/trading/services/quant_gpt_example.py,81,"print(f""Signal: {signal['signal']}"")"
Evolve-main/trading/services/quant_gpt_example.py,82,"print(f""Strength: {signal['strength']}"")"
Evolve-main/trading/services/quant_gpt_example.py,83,"print(f""Confidence: {signal['confidence']:.1%}"")"
Evolve-main/trading/services/quant_gpt_example.py,87,"print(f""\nü§ñ GPT Commentary:"")"
Evolve-main/trading/services/quant_gpt_example.py,88,"print(""-"" * 30)"
Evolve-main/trading/services/quant_gpt_example.py,89,print(commentary)
Evolve-main/trading/services/quant_gpt_example.py,93,"print(f""‚ùå Error: {error}"")"
Evolve-main/trading/services/quant_gpt_example.py,96,"print(f""‚ùå Exception: {e}"")"
Evolve-main/trading/services/quant_gpt_example.py,98,"print(""\n"" + ""="" * 60)"
Evolve-main/trading/services/quant_gpt_example.py,106,"print(""\nüîó QuantGPT via ServiceClient Example"")"
Evolve-main/trading/services/quant_gpt_example.py,107,"print(""="" * 60)"
Evolve-main/trading/services/quant_gpt_example.py,110,"print(""Initializing ServiceClient..."")"
Evolve-main/trading/services/quant_gpt_example.py,123,"print(f""\nRunning {len(service_queries)} queries via ServiceClient..."")"
Evolve-main/trading/services/quant_gpt_example.py,124,"print(""-"" * 60)"
Evolve-main/trading/services/quant_gpt_example.py,127,"print(f""\nüìù Service Query {i}: {query}"")"
Evolve-main/trading/services/quant_gpt_example.py,128,"print(""-"" * 40)"
Evolve-main/trading/services/quant_gpt_example.py,137,"print(f""‚úÖ Service Response (processed in {processing_time:.2f}s)"")"
Evolve-main/trading/services/quant_gpt_example.py,138,"print(f""Type: {result.get('type', 'unknown')}"")"
Evolve-main/trading/services/quant_gpt_example.py,144,"print(f""Intent: {parsed.get('intent', 'unknown')}"")"
Evolve-main/trading/services/quant_gpt_example.py,145,"print(f""Symbol: {parsed.get('symbol', 'N/A')}"")"
Evolve-main/trading/services/quant_gpt_example.py,149,"print(f""\nü§ñ GPT Commentary:"")"
Evolve-main/trading/services/quant_gpt_example.py,150,"print(""-"" * 30)"
Evolve-main/trading/services/quant_gpt_example.py,151,"print(commentary[:200] + ""..."" if len(commentary) > 200 else commentary)"
Evolve-main/trading/services/quant_gpt_example.py,153,"print(f""‚ùå Query Error: {query_result.get('error', 'Unknown error')}"")"
Evolve-main/trading/services/quant_gpt_example.py,155,"print(f""‚ùå Service Error: {result.get('error', 'Unknown error')}"")"
Evolve-main/trading/services/quant_gpt_example.py,157,"print(""‚ùå No response from service"")"
Evolve-main/trading/services/quant_gpt_example.py,160,"print(f""‚ùå Exception: {e}"")"
Evolve-main/trading/services/quant_gpt_example.py,162,"print(""\n"" + ""="" * 60)"
Evolve-main/trading/services/quant_gpt_example.py,165,"print(""\nüìä Available Symbols and Parameters"")"
Evolve-main/trading/services/quant_gpt_example.py,166,"print(""-"" * 40)"
Evolve-main/trading/services/quant_gpt_example.py,176,"print(f""Symbols: {', '.join(symbols)}"")"
Evolve-main/trading/services/quant_gpt_example.py,177,"print(f""Timeframes: {', '.join(timeframes)}"")"
Evolve-main/trading/services/quant_gpt_example.py,178,"print(f""Periods: {', '.join(periods)}"")"
Evolve-main/trading/services/quant_gpt_example.py,179,"print(f""Models: {', '.join(models)}"")"
Evolve-main/trading/services/quant_gpt_example.py,181,"print(""‚ùå Could not retrieve available symbols"")"
Evolve-main/trading/services/quant_gpt_example.py,184,"print(f""‚ùå Exception: {e}"")"
Evolve-main/trading/services/quant_gpt_example.py,197,"print(""‚úÖ Redis connection successful"")"
Evolve-main/trading/services/quant_gpt_example.py,199,"print(f""‚ö†Ô∏è  Redis not available: {e}"")"
Evolve-main/trading/services/quant_gpt_example.py,200,"print(""Running direct QuantGPT examples only..."")"
Evolve-main/trading/services/quant_gpt_example.py,207,"print(""\nüéâ All examples completed successfully!"")"
Evolve-main/trading/services/quant_gpt_example.py,210,"print(""\n\n‚èπÔ∏è  Examples interrupted by user"")"
Evolve-main/trading/services/quant_gpt_example.py,212,"print(f""\n‚ùå Error running examples: {e}"")"
Evolve-main/trading/services/service_client.py,534,"print(json.dumps(result, indent=2))"
Evolve-main/trading/services/service_client.py,539,"print(""Error: --service (model_id) is required for evaluate action"")"
Evolve-main/trading/services/service_client.py,542,"print(json.dumps(result, indent=2))"
Evolve-main/trading/services/service_client.py,547,"print(""Error: --service (model_id) is required for retrain action"")"
Evolve-main/trading/services/service_client.py,550,"print(json.dumps(result, indent=2))"
Evolve-main/trading/services/service_client.py,555,"print(json.dumps(result, indent=2))"
Evolve-main/trading/services/service_client.py,560,"print(json.dumps(result, indent=2))"
Evolve-main/trading/services/service_client.py,565,"print(json.dumps(result, indent=2))"
Evolve-main/trading/services/service_client.py,570,"print(json.dumps(result, indent=2))"
Evolve-main/trading/services/service_client.py,574,"print(""\nInterrupted by user"")"
Evolve-main/trading/services/service_client.py,577,"print(f""Error: {e}"")"
Evolve-main/trading/services/service_manager.py,457,"print(""Error: --service is required for start action"")"
Evolve-main/trading/services/service_manager.py,460,"print(json.dumps(result, indent=2))"
Evolve-main/trading/services/service_manager.py,465,"print(""Error: --service is required for stop action"")"
Evolve-main/trading/services/service_manager.py,468,"print(json.dumps(result, indent=2))"
Evolve-main/trading/services/service_manager.py,473,"print(json.dumps(result, indent=2))"
Evolve-main/trading/services/service_manager.py,478,"print(json.dumps(result, indent=2))"
Evolve-main/trading/services/service_manager.py,483,"print(json.dumps(result, indent=2))"
Evolve-main/trading/services/service_manager.py,487,"print(""\nShutting down..."")"
Evolve-main/trading/services/service_manager.py,490,"print(f""Error: {e}"")"
Evolve-main/trading/services/test_quant_gpt.py,21,"print(""üß™ Testing Direct QuantGPT Usage"")"
Evolve-main/trading/services/test_quant_gpt.py,22,"print(""="" * 50)"
Evolve-main/trading/services/test_quant_gpt.py,40,"print(f""\nüìù Test Query {i}: {query}"")"
Evolve-main/trading/services/test_quant_gpt.py,41,"print(""-"" * 40)"
Evolve-main/trading/services/test_quant_gpt.py,47,"print(f""Processing Time: {processing_time:.2f}s"")"
Evolve-main/trading/services/test_quant_gpt.py,48,"print(f""Status: {result.get('status', 'unknown')}"")"
Evolve-main/trading/services/test_quant_gpt.py,52,"print(f""Intent: {parsed.get('intent', 'unknown')}"")"
Evolve-main/trading/services/test_quant_gpt.py,53,"print(f""Symbol: {parsed.get('symbol', 'N/A')}"")"
Evolve-main/trading/services/test_quant_gpt.py,54,"print(f""Timeframe: {parsed.get('timeframe', 'N/A')}"")"
Evolve-main/trading/services/test_quant_gpt.py,55,"print(f""Period: {parsed.get('period', 'N/A')}"")"
Evolve-main/trading/services/test_quant_gpt.py,59,"print(f""GPT Commentary: {commentary[:100]}..."")"
Evolve-main/trading/services/test_quant_gpt.py,61,"print(""‚úÖ Test passed"")"
Evolve-main/trading/services/test_quant_gpt.py,64,"print(f""‚ùå Test failed: {error}"")"
Evolve-main/trading/services/test_quant_gpt.py,70,"print(f""‚ùå Direct QuantGPT test failed: {e}"")"
Evolve-main/trading/services/test_quant_gpt.py,75,"print(""\nüîó Testing QuantGPT via ServiceClient"")"
Evolve-main/trading/services/test_quant_gpt.py,76,"print(""="" * 50)"
Evolve-main/trading/services/test_quant_gpt.py,93,"print(f""\nüìù Service Test Query {i}: {query}"")"
Evolve-main/trading/services/test_quant_gpt.py,94,"print(""-"" * 40)"
Evolve-main/trading/services/test_quant_gpt.py,100,"print(f""Processing Time: {processing_time:.2f}s"")"
Evolve-main/trading/services/test_quant_gpt.py,103,"print(f""Response Type: {result.get('type', 'unknown')}"")"
Evolve-main/trading/services/test_quant_gpt.py,109,"print(f""Intent: {parsed.get('intent', 'unknown')}"")"
Evolve-main/trading/services/test_quant_gpt.py,110,"print(f""Symbol: {parsed.get('symbol', 'N/A')}"")"
Evolve-main/trading/services/test_quant_gpt.py,111,"print(""‚úÖ Service test passed"")"
Evolve-main/trading/services/test_quant_gpt.py,113,"print(f""‚ùå Query failed: {query_result.get('error', 'Unknown error')}"")"
Evolve-main/trading/services/test_quant_gpt.py,115,"print(f""‚ùå Service error: {result.get('error', 'Unknown error')}"")"
Evolve-main/trading/services/test_quant_gpt.py,117,"print(""‚ùå No response from service"")"
Evolve-main/trading/services/test_quant_gpt.py,120,"print(f""\nüìä Testing Available Symbols"")"
Evolve-main/trading/services/test_quant_gpt.py,121,"print(""-"" * 40)"
Evolve-main/trading/services/test_quant_gpt.py,126,"print(f""Available Symbols: {', '.join(symbols)}"")"
Evolve-main/trading/services/test_quant_gpt.py,127,"print(""‚úÖ Symbols test passed"")"
Evolve-main/trading/services/test_quant_gpt.py,129,"print(""‚ùå Symbols test failed"")"
Evolve-main/trading/services/test_quant_gpt.py,135,"print(f""‚ùå ServiceClient test failed: {e}"")"
Evolve-main/trading/services/test_quant_gpt.py,140,"print(""\nüîç Testing Query Parsing"")"
Evolve-main/trading/services/test_quant_gpt.py,141,"print(""="" * 50)"
Evolve-main/trading/services/test_quant_gpt.py,172,"print(f""\nüìù Parsing Test {i}: {test_case['query']}"")"
Evolve-main/trading/services/test_quant_gpt.py,173,"print(""-"" * 40)"
Evolve-main/trading/services/test_quant_gpt.py,184,"print(f""‚úÖ Intent: {intent}"")"
Evolve-main/trading/services/test_quant_gpt.py,186,"print(f""‚ùå Intent mismatch: expected {expected_intent}, got {intent}"")"
Evolve-main/trading/services/test_quant_gpt.py,192,"print(f""‚úÖ Symbol: {symbol}"")"
Evolve-main/trading/services/test_quant_gpt.py,194,"print(f""‚ùå Symbol mismatch: expected {expected_symbol}, got {symbol}"")"
Evolve-main/trading/services/test_quant_gpt.py,202,"print(f""‚úÖ {param}: {value}"")"
Evolve-main/trading/services/test_quant_gpt.py,204,"print(f""‚ùå {param} mismatch: expected {expected_value}, got {value}"")"
Evolve-main/trading/services/test_quant_gpt.py,206,"print(""‚úÖ Parsing test passed"")"
Evolve-main/trading/services/test_quant_gpt.py,208,"print(f""‚ùå Parsing test failed: {result.get('error', 'Unknown error')}"")"
Evolve-main/trading/services/test_quant_gpt.py,214,"print(f""‚ùå Query parsing test failed: {e}"")"
Evolve-main/trading/services/test_quant_gpt.py,219,"print(""üöÄ QuantGPT Test Suite"")"
Evolve-main/trading/services/test_quant_gpt.py,220,"print(""="" * 60)"
Evolve-main/trading/services/test_quant_gpt.py,227,"print(""‚úÖ Redis connection successful"")"
Evolve-main/trading/services/test_quant_gpt.py,229,"print(f""‚ö†Ô∏è  Redis not available: {e}"")"
Evolve-main/trading/services/test_quant_gpt.py,230,"print(""Running direct QuantGPT tests only..."")"
Evolve-main/trading/services/test_quant_gpt.py,243,"print(f""\n{'='*20} {test_name} {'='*20}"")"
Evolve-main/trading/services/test_quant_gpt.py,248,"print(f""‚ùå {test_name} test crashed: {e}"")"
Evolve-main/trading/services/test_quant_gpt.py,252,"print(f""\n{'='*60}"")"
Evolve-main/trading/services/test_quant_gpt.py,253,"print(""üìä Test Results Summary"")"
Evolve-main/trading/services/test_quant_gpt.py,254,"print(""="" * 60)"
Evolve-main/trading/services/test_quant_gpt.py,261,"print(f""{test_name}: {status}"")"
Evolve-main/trading/services/test_quant_gpt.py,265,"print(f""\nOverall: {passed}/{total} tests passed"")"
Evolve-main/trading/services/test_quant_gpt.py,268,"print(""üéâ All tests passed! QuantGPT is working correctly."")"
Evolve-main/trading/services/test_quant_gpt.py,270,"print(""‚ö†Ô∏è  Some tests failed. Check the output above for details."")"
Evolve-main/trading/services/test_safe_executor.py,22,"print(""üß™ Testing Direct SafeExecutor Usage"")"
Evolve-main/trading/services/test_safe_executor.py,23,"print(""="" * 50)"
Evolve-main/trading/services/test_safe_executor.py,35,"print(""\nüìù Test 1: Valid Model Execution"")"
Evolve-main/trading/services/test_safe_executor.py,36,"print(""-"" * 40)"
Evolve-main/trading/services/test_safe_executor.py,50,"print(f""Status: {result.status.value}"")"
Evolve-main/trading/services/test_safe_executor.py,51,"print(f""Execution Time: {result.execution_time:.2f}s"")"
Evolve-main/trading/services/test_safe_executor.py,54,"print(f""Return Value: {result.return_value}"")"
Evolve-main/trading/services/test_safe_executor.py,55,"print(""‚úÖ Valid model execution test passed"")"
Evolve-main/trading/services/test_safe_executor.py,57,"print(f""‚ùå Valid model execution test failed: {result.error}"")"
Evolve-main/trading/services/test_safe_executor.py,60,"print(""\nüìù Test 2: Dangerous Code Validation"")"
Evolve-main/trading/services/test_safe_executor.py,61,"print(""-"" * 40)"
Evolve-main/trading/services/test_safe_executor.py,79,"print(f""Status: {result.status.value}"")"
Evolve-main/trading/services/test_safe_executor.py,82,"print(""‚úÖ Dangerous code validation test passed"")"
Evolve-main/trading/services/test_safe_executor.py,84,"print(f""‚ùå Dangerous code validation test failed: {result.status.value}"")"
Evolve-main/trading/services/test_safe_executor.py,87,"print(""\nüìù Test 3: Timeout Handling"")"
Evolve-main/trading/services/test_safe_executor.py,88,"print(""-"" * 40)"
Evolve-main/trading/services/test_safe_executor.py,105,"print(f""Status: {result.status.value}"")"
Evolve-main/trading/services/test_safe_executor.py,106,"print(f""Execution Time: {result.execution_time:.2f}s"")"
Evolve-main/trading/services/test_safe_executor.py,109,"print(""‚úÖ Timeout handling test passed"")"
Evolve-main/trading/services/test_safe_executor.py,111,"print(f""‚ùå Timeout handling test failed: {result.status.value}"")"
Evolve-main/trading/services/test_safe_executor.py,114,"print(""\nüìù Test 4: Syntax Error Handling"")"
Evolve-main/trading/services/test_safe_executor.py,115,"print(""-"" * 40)"
Evolve-main/trading/services/test_safe_executor.py,129,"print(f""Status: {result.status.value}"")"
Evolve-main/trading/services/test_safe_executor.py,132,"print(""‚úÖ Syntax error handling test passed"")"
Evolve-main/trading/services/test_safe_executor.py,134,"print(f""‚ùå Syntax error handling test failed: {result.status.value}"")"
Evolve-main/trading/services/test_safe_executor.py,137,"print(""\nüìù Test 5: Strategy Execution"")"
Evolve-main/trading/services/test_safe_executor.py,138,"print(""-"" * 40)"
Evolve-main/trading/services/test_safe_executor.py,163,"print(f""Status: {result.status.value}"")"
Evolve-main/trading/services/test_safe_executor.py,164,"print(f""Execution Time: {result.execution_time:.2f}s"")"
Evolve-main/trading/services/test_safe_executor.py,167,"print(f""Strategy Result: {result.return_value}"")"
Evolve-main/trading/services/test_safe_executor.py,168,"print(""‚úÖ Strategy execution test passed"")"
Evolve-main/trading/services/test_safe_executor.py,170,"print(f""‚ùå Strategy execution test failed: {result.error}"")"
Evolve-main/trading/services/test_safe_executor.py,173,"print(""\nüìù Test 6: Indicator Execution"")"
Evolve-main/trading/services/test_safe_executor.py,174,"print(""-"" * 40)"
Evolve-main/trading/services/test_safe_executor.py,199,"print(f""Status: {result.status.value}"")"
Evolve-main/trading/services/test_safe_executor.py,200,"print(f""Execution Time: {result.execution_time:.2f}s"")"
Evolve-main/trading/services/test_safe_executor.py,203,"print(f""Indicator Result: {result.return_value}"")"
Evolve-main/trading/services/test_safe_executor.py,204,"print(""‚úÖ Indicator execution test passed"")"
Evolve-main/trading/services/test_safe_executor.py,206,"print(f""‚ùå Indicator execution test failed: {result.error}"")"
Evolve-main/trading/services/test_safe_executor.py,209,"print(""\nüìä SafeExecutor Statistics"")"
Evolve-main/trading/services/test_safe_executor.py,210,"print(""-"" * 40)"
Evolve-main/trading/services/test_safe_executor.py,213,"print(f""Total Executions: {stats['total_executions']}"")"
Evolve-main/trading/services/test_safe_executor.py,214,"print(f""Successful Executions: {stats['successful_executions']}"")"
Evolve-main/trading/services/test_safe_executor.py,215,"print(f""Failed Executions: {stats['failed_executions']}"")"
Evolve-main/trading/services/test_safe_executor.py,216,"print(f""Success Rate: {stats['success_rate']:.1%}"")"
Evolve-main/trading/services/test_safe_executor.py,217,"print(f""Total Execution Time: {stats['total_execution_time']:.2f}s"")"
Evolve-main/trading/services/test_safe_executor.py,218,"print(f""Average Execution Time: {stats['average_execution_time']:.2f}s"")"
Evolve-main/trading/services/test_safe_executor.py,225,"print(f""‚ùå Direct SafeExecutor test failed: {e}"")"
Evolve-main/trading/services/test_safe_executor.py,230,"print(""\nüîó Testing SafeExecutor via ServiceClient"")"
Evolve-main/trading/services/test_safe_executor.py,231,"print(""="" * 50)"
Evolve-main/trading/services/test_safe_executor.py,241,"print(""\nüìù Service Test 1: Model Execution"")"
Evolve-main/trading/services/test_safe_executor.py,242,"print(""-"" * 40)"
Evolve-main/trading/services/test_safe_executor.py,260,"print(f""Status: {status}"")"
Evolve-main/trading/services/test_safe_executor.py,261,"print(f""Execution Time: {execution_result.get('execution_time', 0):.2f}s"")"
Evolve-main/trading/services/test_safe_executor.py,265,"print(f""Return Value: {return_value}"")"
Evolve-main/trading/services/test_safe_executor.py,266,"print(""‚úÖ Service model execution test passed"")"
Evolve-main/trading/services/test_safe_executor.py,268,"print(f""‚ùå Service model execution test failed: {execution_result.get('error')}"")"
Evolve-main/trading/services/test_safe_executor.py,270,"print(""‚ùå No response from service"")"
Evolve-main/trading/services/test_safe_executor.py,273,"print(""\nüìù Service Test 2: Strategy Execution"")"
Evolve-main/trading/services/test_safe_executor.py,274,"print(""-"" * 40)"
Evolve-main/trading/services/test_safe_executor.py,300,"print(f""Status: {status}"")"
Evolve-main/trading/services/test_safe_executor.py,301,"print(f""Execution Time: {execution_result.get('execution_time', 0):.2f}s"")"
Evolve-main/trading/services/test_safe_executor.py,305,"print(f""Strategy Result: {return_value}"")"
Evolve-main/trading/services/test_safe_executor.py,306,"print(""‚úÖ Service strategy execution test passed"")"
Evolve-main/trading/services/test_safe_executor.py,308,"print(f""‚ùå Service strategy execution test failed: {execution_result.get('error')}"")"
Evolve-main/trading/services/test_safe_executor.py,310,"print(""‚ùå No response from service"")"
Evolve-main/trading/services/test_safe_executor.py,313,"print(""\nüìù Service Test 3: Get Statistics"")"
Evolve-main/trading/services/test_safe_executor.py,314,"print(""-"" * 40)"
Evolve-main/trading/services/test_safe_executor.py,319,"print(f""Total Executions: {stats.get('total_executions', 0)}"")"
Evolve-main/trading/services/test_safe_executor.py,320,"print(f""Successful Executions: {stats.get('successful_executions', 0)}"")"
Evolve-main/trading/services/test_safe_executor.py,321,"print(f""Failed Executions: {stats.get('failed_executions', 0)}"")"
Evolve-main/trading/services/test_safe_executor.py,322,"print(f""Success Rate: {stats.get('success_rate', 0):.1%}"")"
Evolve-main/trading/services/test_safe_executor.py,323,"print(""‚úÖ Service statistics test passed"")"
Evolve-main/trading/services/test_safe_executor.py,325,"print(""‚ùå Service statistics test failed"")"
Evolve-main/trading/services/test_safe_executor.py,328,"print(""\nüìù Service Test 4: Cleanup"")"
Evolve-main/trading/services/test_safe_executor.py,329,"print(""-"" * 40)"
Evolve-main/trading/services/test_safe_executor.py,333,"print(""‚úÖ Service cleanup test passed"")"
Evolve-main/trading/services/test_safe_executor.py,335,"print(""‚ùå Service cleanup test failed"")"
Evolve-main/trading/services/test_safe_executor.py,341,"print(f""‚ùå ServiceClient test failed: {e}"")"
Evolve-main/trading/services/test_safe_executor.py,346,"print(""\nüõ°Ô∏è Testing Security Features"")"
Evolve-main/trading/services/test_safe_executor.py,347,"print(""="" * 50)"
Evolve-main/trading/services/test_safe_executor.py,368,"'code': 'def main(input_data): eval(""print(\'dangerous\')""); return {""status"": ""dangerous""}'"
Evolve-main/trading/services/test_safe_executor.py,372,"'code': 'def main(input_data): exec(""print(\'dangerous\')""); return {""status"": ""dangerous""}'"
Evolve-main/trading/services/test_safe_executor.py,384,"print(f""\nüìù Testing: {test['name']}"")"
Evolve-main/trading/services/test_safe_executor.py,385,"print(""-"" * 30)"
Evolve-main/trading/services/test_safe_executor.py,395,"print(""‚úÖ Security test passed - dangerous code blocked"")"
Evolve-main/trading/services/test_safe_executor.py,398,"print(f""‚ùå Security test failed - dangerous code allowed: {result.status.value}"")"
Evolve-main/trading/services/test_safe_executor.py,400,"print(f""\nüìä Security Test Results: {passed_tests}/{total_tests} passed"")"
Evolve-main/trading/services/test_safe_executor.py,406,"print(f""‚ùå Security features test failed: {e}"")"
Evolve-main/trading/services/test_safe_executor.py,411,"print(""üöÄ Safe Executor Test Suite"")"
Evolve-main/trading/services/test_safe_executor.py,412,"print(""="" * 60)"
Evolve-main/trading/services/test_safe_executor.py,419,"print(""‚úÖ Redis connection successful"")"
Evolve-main/trading/services/test_safe_executor.py,421,"print(f""‚ö†Ô∏è  Redis not available: {e}"")"
Evolve-main/trading/services/test_safe_executor.py,422,"print(""Running direct SafeExecutor tests only..."")"
Evolve-main/trading/services/test_safe_executor.py,435,"print(f""\n{'='*20} {test_name} {'='*20}"")"
Evolve-main/trading/services/test_safe_executor.py,440,"print(f""‚ùå {test_name} test crashed: {e}"")"
Evolve-main/trading/services/test_safe_executor.py,444,"print(f""\n{'='*60}"")"
Evolve-main/trading/services/test_safe_executor.py,445,"print(""üìä Test Results Summary"")"
Evolve-main/trading/services/test_safe_executor.py,446,"print(""="" * 60)"
Evolve-main/trading/services/test_safe_executor.py,453,"print(f""{test_name}: {status}"")"
Evolve-main/trading/services/test_safe_executor.py,457,"print(f""\nOverall: {passed}/{total} tests passed"")"
Evolve-main/trading/services/test_safe_executor.py,460,"print(""üéâ All tests passed! SafeExecutor is working correctly."")"
Evolve-main/trading/services/test_safe_executor.py,462,"print(""‚ö†Ô∏è  Some tests failed. Check the output above for details."")"
Evolve-main/trading/tools/init_logs.py,9,>>> print(result)
Evolve-main/trading/utils/demo_reasoning.py,178,"print(""=== Basic Decision Logging Demo ==="")"
Evolve-main/trading/utils/demo_reasoning.py,195,"print(f""‚úÖ Logged decision: {decision_id}"")"
Evolve-main/trading/utils/demo_reasoning.py,201,"print(""\n=== Display Components Demo ==="")"
Evolve-main/trading/utils/demo_reasoning.py,207,"print(""\nüìä Statistics:"")"
Evolve-main/trading/utils/demo_reasoning.py,211,"print(""\nüìã Recent Decisions:"")"
Evolve-main/trading/utils/demo_reasoning.py,216,"print(f""\nüìÑ Specific Decision ({decision_ids[0]}):"")"
Evolve-main/trading/utils/demo_reasoning.py,223,"print(""\n=== Real-time Updates Demo ==="")"
Evolve-main/trading/utils/demo_reasoning.py,231,"print(""Simulating real-time decision logging..."")"
Evolve-main/trading/utils/demo_reasoning.py,260,"print(f""üîÑ Logged real-time decision {i+1}: {decision_id}"")"
Evolve-main/trading/utils/demo_reasoning.py,264,"print(""\nüìä Final Statistics:"")"
Evolve-main/trading/utils/demo_reasoning.py,266,"print(f""Total decisions: {stats['total_decisions']}"")"
Evolve-main/trading/utils/demo_reasoning.py,267,"print(f""Active agents: {len(stats['decisions_by_agent'])}"")"
Evolve-main/trading/utils/demo_reasoning.py,271,"print(""\n=== Streamlit Components Demo ==="")"
Evolve-main/trading/utils/demo_reasoning.py,286,"print(""Streamlit components would display:"")"
Evolve-main/trading/utils/demo_reasoning.py,287,"print(""1. üìä Statistics dashboard with charts"")"
Evolve-main/trading/utils/demo_reasoning.py,288,"print(""2. üìã Recent decisions table"")"
Evolve-main/trading/utils/demo_reasoning.py,289,"print(""3. üî¥ Live decision feed"")"
Evolve-main/trading/utils/demo_reasoning.py,290,"print(""4. üìÑ Detailed decision viewer"")"
Evolve-main/trading/utils/demo_reasoning.py,291,"print(""5. ü§ñ Sidebar controls for filtering"")"
Evolve-main/trading/utils/demo_reasoning.py,293,"print(""\nTo run Streamlit dashboard:"")"
Evolve-main/trading/utils/demo_reasoning.py,294,"print(""streamlit run trading/utils/reasoning_display.py"")"
Evolve-main/trading/utils/demo_reasoning.py,298,"print(""\n=== Search and Filter Demo ==="")"
Evolve-main/trading/utils/demo_reasoning.py,334,"print(""Filtering by agent:"")"
Evolve-main/trading/utils/demo_reasoning.py,336,"print(f""LSTMForecaster decisions: {len(lstm_decisions)}"")"
Evolve-main/trading/utils/demo_reasoning.py,338,"print(""\nFiltering by decision type:"")"
Evolve-main/trading/utils/demo_reasoning.py,340,"print(f""Forecast decisions: {len(forecast_decisions)}"")"
Evolve-main/trading/utils/demo_reasoning.py,342,"print(""\nGetting explanations:"")"
Evolve-main/trading/utils/demo_reasoning.py,346,"print(f""Explanation preview: {explanation[:100]}..."")"
Evolve-main/trading/utils/demo_reasoning.py,350,"print(""ü§ñ Reasoning Logger and Display Demo"")"
Evolve-main/trading/utils/demo_reasoning.py,351,"print(""="" * 50)"
Evolve-main/trading/utils/demo_reasoning.py,360,"print(""\n"" + ""="" * 50)"
Evolve-main/trading/utils/demo_reasoning.py,361,"print(""‚úÖ Demo completed!"")"
Evolve-main/trading/utils/demo_reasoning.py,362,"print(""\nüìö Next steps:"")"
Evolve-main/trading/utils/demo_reasoning.py,363,"print(""1. Integrate with your trading agents"")"
Evolve-main/trading/utils/demo_reasoning.py,364,"print(""2. Start the reasoning service: python trading/utils/launch_reasoning_service.py"")"
Evolve-main/trading/utils/demo_reasoning.py,365,"print(""3. Run Streamlit dashboard: streamlit run trading/utils/reasoning_display.py"")"
Evolve-main/trading/utils/demo_reasoning.py,366,"print(""4. Monitor decisions in real-time"")"
Evolve-main/trading/utils/logging_utils.py,550,"print(f""Warning: Failed to close handler for logger {logger.name}: {e}"")"
Evolve-main/trading/utils/reasoning_display.py,43,"print(""\n"" + ""=""*80)"
Evolve-main/trading/utils/reasoning_display.py,44,"print(f""ü§ñ AGENT DECISION: {decision.agent_name.upper()}"")"
Evolve-main/trading/utils/reasoning_display.py,45,"print(""=""*80)"
Evolve-main/trading/utils/reasoning_display.py,48,"print(f""üìÖ Time: {decision.timestamp}"")"
Evolve-main/trading/utils/reasoning_display.py,49,"print(f""üéØ Type: {decision.decision_type.value.replace('_', ' ').title()}"")"
Evolve-main/trading/utils/reasoning_display.py,50,"print(f""üìà Symbol: {decision.context.symbol}"")"
Evolve-main/trading/utils/reasoning_display.py,51,"print(f""‚è±Ô∏è  Timeframe: {decision.context.timeframe}"")"
Evolve-main/trading/utils/reasoning_display.py,52,"print(f""üéØ Action: {decision.action_taken}"")"
Evolve-main/trading/utils/reasoning_display.py,53,"print(f""üéØ Confidence: {decision.confidence_level.value.replace('_', ' ').title()}"")"
Evolve-main/trading/utils/reasoning_display.py,56,"print(f""\nüß† REASONING:"")"
Evolve-main/trading/utils/reasoning_display.py,57,"print(f""Primary Reason: {decision.reasoning.primary_reason}"")"
Evolve-main/trading/utils/reasoning_display.py,60,"print(f""\nSupporting Factors:"")"
Evolve-main/trading/utils/reasoning_display.py,62,"print(f""  ‚Ä¢ {factor}"")"
Evolve-main/trading/utils/reasoning_display.py,65,"print(f""\nAlternatives Considered:"")"
Evolve-main/trading/utils/reasoning_display.py,67,"print(f""  ‚Ä¢ {alt}"")"
Evolve-main/trading/utils/reasoning_display.py,70,"print(f""\nRisks Assessed:"")"
Evolve-main/trading/utils/reasoning_display.py,72,"print(f""  ‚Ä¢ {risk}"")"
Evolve-main/trading/utils/reasoning_display.py,74,"print(f""\nExpected Outcome: {decision.reasoning.expected_outcome}"")"
Evolve-main/trading/utils/reasoning_display.py,78,"print(f""\nüìä MARKET CONDITIONS:"")"
Evolve-main/trading/utils/reasoning_display.py,80,"print(f""  {key}: {value}"")"
Evolve-main/trading/utils/reasoning_display.py,86,"print(f""\nüí¨ CHAT EXPLANATION:"")"
Evolve-main/trading/utils/reasoning_display.py,87,"print(""-"" * 40)"
Evolve-main/trading/utils/reasoning_display.py,88,print(explanation)
Evolve-main/trading/utils/reasoning_display.py,89,"print(""-"" * 40)"
Evolve-main/trading/utils/reasoning_display.py,91,"print(""=""*80 + ""\n"")"
Evolve-main/trading/utils/reasoning_display.py,103,"print(f""\nü§ñ RECENT DECISIONS BY {agent_name.upper()}"")"
Evolve-main/trading/utils/reasoning_display.py,112,"print(f""\nü§ñ RECENT DECISIONS (ALL AGENTS)"")"
Evolve-main/trading/utils/reasoning_display.py,114,"print(""=""*80)"
Evolve-main/trading/utils/reasoning_display.py,117,"print(""No decisions found."")"
Evolve-main/trading/utils/reasoning_display.py,120,"print(f""\n{i}. {decision.agent_name} - {decision.decision_type.value}"")"
Evolve-main/trading/utils/reasoning_display.py,121,"print(f""   üìà {decision.context.symbol} | {decision.action_taken}"")"
Evolve-main/trading/utils/reasoning_display.py,122,"print(f""   üéØ {decision.reasoning.primary_reason}"")"
Evolve-main/trading/utils/reasoning_display.py,123,"print(f""   ‚è∞ {decision.timestamp}"")"
Evolve-main/trading/utils/reasoning_display.py,124,"print(f""   üéØ Confidence: {decision.confidence_level.value}"")"
Evolve-main/trading/utils/reasoning_display.py,125,"print(""-"" * 40)"
Evolve-main/trading/utils/reasoning_display.py,131,"print(""\nüìä REASONING STATISTICS"")"
Evolve-main/trading/utils/reasoning_display.py,132,"print(""=""*50)"
Evolve-main/trading/utils/reasoning_display.py,134,"print(f""Total Decisions: {stats['total_decisions']}"")"
Evolve-main/trading/utils/reasoning_display.py,136,"print(f""\nDecisions by Agent:"")"
Evolve-main/trading/utils/reasoning_display.py,138,"print(f""  {agent}: {count}"")"
Evolve-main/trading/utils/reasoning_display.py,140,"print(f""\nDecisions by Type:"")"
Evolve-main/trading/utils/reasoning_display.py,142,"print(f""  {decision_type}: {count}"")"
Evolve-main/trading/utils/reasoning_display.py,144,"print(f""\nConfidence Distribution:"")"
Evolve-main/trading/utils/reasoning_display.py,146,"print(f""  {confidence}: {count}"")"
Evolve-main/trading/utils/reasoning_display.py,148,"print(f""\nRecent Activity:"")"
Evolve-main/trading/utils/reasoning_display.py,150,"print(f""  {activity['agent_name']} - {activity['decision_type']} - {activity['symbol']}"")"
Evolve-main/trading/utils/safe_executor.py,329,"print(f""Warning: Could not set resource limits: {{e}}"")"
Evolve-main/trading/utils/safe_executor.py,408,print(json.dumps(output))
Evolve-main/trading/utils/safe_executor.py,417,print(json.dumps(error_output))
Evolve-main/utils/runner.py,314,"print(f""System initialization completed: {status}"")"
